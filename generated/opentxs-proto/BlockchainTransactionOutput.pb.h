// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BlockchainTransactionOutput.proto

#ifndef PROTOBUF_BlockchainTransactionOutput_2eproto__INCLUDED
#define PROTOBUF_BlockchainTransactionOutput_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "BlockchainExternalAddress.pb.h"  // IWYU pragma: export
#include "BlockchainWalletKey.pb.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace protobuf_BlockchainTransactionOutput_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsBlockchainTransactionOutputImpl();
void InitDefaultsBlockchainTransactionOutput();
inline void InitDefaults() {
  InitDefaultsBlockchainTransactionOutput();
}
}  // namespace protobuf_BlockchainTransactionOutput_2eproto
namespace opentxs {
namespace proto {
class BlockchainTransactionOutput;
class BlockchainTransactionOutputDefaultTypeInternal;
extern BlockchainTransactionOutputDefaultTypeInternal _BlockchainTransactionOutput_default_instance_;
}  // namespace proto
}  // namespace opentxs
namespace opentxs {
namespace proto {

// ===================================================================

class BlockchainTransactionOutput : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:opentxs.proto.BlockchainTransactionOutput) */ {
 public:
  BlockchainTransactionOutput();
  virtual ~BlockchainTransactionOutput();

  BlockchainTransactionOutput(const BlockchainTransactionOutput& from);

  inline BlockchainTransactionOutput& operator=(const BlockchainTransactionOutput& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BlockchainTransactionOutput(BlockchainTransactionOutput&& from) noexcept
    : BlockchainTransactionOutput() {
    *this = ::std::move(from);
  }

  inline BlockchainTransactionOutput& operator=(BlockchainTransactionOutput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BlockchainTransactionOutput& default_instance();

  enum DestinationCase {
    kKey = 5,
    kExternal = 6,
    DESTINATION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockchainTransactionOutput* internal_default_instance() {
    return reinterpret_cast<const BlockchainTransactionOutput*>(
               &_BlockchainTransactionOutput_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(BlockchainTransactionOutput* other);
  friend void swap(BlockchainTransactionOutput& a, BlockchainTransactionOutput& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BlockchainTransactionOutput* New() const PROTOBUF_FINAL { return New(NULL); }

  BlockchainTransactionOutput* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const BlockchainTransactionOutput& from);
  void MergeFrom(const BlockchainTransactionOutput& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BlockchainTransactionOutput* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string orphanedspend = 8;
  int orphanedspend_size() const;
  void clear_orphanedspend();
  static const int kOrphanedspendFieldNumber = 8;
  const ::std::string& orphanedspend(int index) const;
  ::std::string* mutable_orphanedspend(int index);
  void set_orphanedspend(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_orphanedspend(int index, ::std::string&& value);
  #endif
  void set_orphanedspend(int index, const char* value);
  void set_orphanedspend(int index, const char* value, size_t size);
  ::std::string* add_orphanedspend();
  void add_orphanedspend(const ::std::string& value);
  #if LANG_CXX11
  void add_orphanedspend(::std::string&& value);
  #endif
  void add_orphanedspend(const char* value);
  void add_orphanedspend(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& orphanedspend() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_orphanedspend();

  // optional bytes script = 4;
  bool has_script() const;
  void clear_script();
  static const int kScriptFieldNumber = 4;
  const ::std::string& script() const;
  void set_script(const ::std::string& value);
  #if LANG_CXX11
  void set_script(::std::string&& value);
  #endif
  void set_script(const char* value);
  void set_script(const void* value, size_t size);
  ::std::string* mutable_script();
  ::std::string* release_script();
  void set_allocated_script(::std::string* script);

  // optional string confirmedspend = 7;
  bool has_confirmedspend() const;
  void clear_confirmedspend();
  static const int kConfirmedspendFieldNumber = 7;
  const ::std::string& confirmedspend() const;
  void set_confirmedspend(const ::std::string& value);
  #if LANG_CXX11
  void set_confirmedspend(::std::string&& value);
  #endif
  void set_confirmedspend(const char* value);
  void set_confirmedspend(const char* value, size_t size);
  ::std::string* mutable_confirmedspend();
  ::std::string* release_confirmedspend();
  void set_allocated_confirmedspend(::std::string* confirmedspend);

  // optional uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // optional uint32 index = 2;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 2;
  ::google::protobuf::uint32 index() const;
  void set_index(::google::protobuf::uint32 value);

  // optional uint64 value = 3;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  ::google::protobuf::uint64 value() const;
  void set_value(::google::protobuf::uint64 value);

  // optional .opentxs.proto.BlockchainWalletKey key = 5;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 5;
  const ::opentxs::proto::BlockchainWalletKey& key() const;
  ::opentxs::proto::BlockchainWalletKey* release_key();
  ::opentxs::proto::BlockchainWalletKey* mutable_key();
  void set_allocated_key(::opentxs::proto::BlockchainWalletKey* key);

  // optional .opentxs.proto.BlockchainExternalAddress external = 6;
  bool has_external() const;
  void clear_external();
  static const int kExternalFieldNumber = 6;
  const ::opentxs::proto::BlockchainExternalAddress& external() const;
  ::opentxs::proto::BlockchainExternalAddress* release_external();
  ::opentxs::proto::BlockchainExternalAddress* mutable_external();
  void set_allocated_external(::opentxs::proto::BlockchainExternalAddress* external);

  DestinationCase destination_case() const;
  // @@protoc_insertion_point(class_scope:opentxs.proto.BlockchainTransactionOutput)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_index();
  void clear_has_index();
  void set_has_value();
  void clear_has_value();
  void set_has_script();
  void clear_has_script();
  void set_has_key();
  void set_has_external();
  void set_has_confirmedspend();
  void clear_has_confirmedspend();

  inline bool has_destination() const;
  void clear_destination();
  inline void clear_has_destination();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> orphanedspend_;
  ::google::protobuf::internal::ArenaStringPtr script_;
  ::google::protobuf::internal::ArenaStringPtr confirmedspend_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::uint32 index_;
  ::google::protobuf::uint64 value_;
  union DestinationUnion {
    DestinationUnion() {}
    ::opentxs::proto::BlockchainWalletKey* key_;
    ::opentxs::proto::BlockchainExternalAddress* external_;
  } destination_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_BlockchainTransactionOutput_2eproto::TableStruct;
  friend void ::protobuf_BlockchainTransactionOutput_2eproto::InitDefaultsBlockchainTransactionOutputImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BlockchainTransactionOutput

// optional uint32 version = 1;
inline bool BlockchainTransactionOutput::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlockchainTransactionOutput::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlockchainTransactionOutput::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlockchainTransactionOutput::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 BlockchainTransactionOutput::version() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.BlockchainTransactionOutput.version)
  return version_;
}
inline void BlockchainTransactionOutput::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.BlockchainTransactionOutput.version)
}

// optional uint32 index = 2;
inline bool BlockchainTransactionOutput::has_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlockchainTransactionOutput::set_has_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BlockchainTransactionOutput::clear_has_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BlockchainTransactionOutput::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 BlockchainTransactionOutput::index() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.BlockchainTransactionOutput.index)
  return index_;
}
inline void BlockchainTransactionOutput::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.BlockchainTransactionOutput.index)
}

// optional uint64 value = 3;
inline bool BlockchainTransactionOutput::has_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlockchainTransactionOutput::set_has_value() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BlockchainTransactionOutput::clear_has_value() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BlockchainTransactionOutput::clear_value() {
  value_ = GOOGLE_ULONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::uint64 BlockchainTransactionOutput::value() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.BlockchainTransactionOutput.value)
  return value_;
}
inline void BlockchainTransactionOutput::set_value(::google::protobuf::uint64 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.BlockchainTransactionOutput.value)
}

// optional bytes script = 4;
inline bool BlockchainTransactionOutput::has_script() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockchainTransactionOutput::set_has_script() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlockchainTransactionOutput::clear_has_script() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlockchainTransactionOutput::clear_script() {
  script_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_script();
}
inline const ::std::string& BlockchainTransactionOutput::script() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.BlockchainTransactionOutput.script)
  return script_.GetNoArena();
}
inline void BlockchainTransactionOutput::set_script(const ::std::string& value) {
  set_has_script();
  script_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.BlockchainTransactionOutput.script)
}
#if LANG_CXX11
inline void BlockchainTransactionOutput::set_script(::std::string&& value) {
  set_has_script();
  script_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.BlockchainTransactionOutput.script)
}
#endif
inline void BlockchainTransactionOutput::set_script(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_script();
  script_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.BlockchainTransactionOutput.script)
}
inline void BlockchainTransactionOutput::set_script(const void* value, size_t size) {
  set_has_script();
  script_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.BlockchainTransactionOutput.script)
}
inline ::std::string* BlockchainTransactionOutput::mutable_script() {
  set_has_script();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.BlockchainTransactionOutput.script)
  return script_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockchainTransactionOutput::release_script() {
  // @@protoc_insertion_point(field_release:opentxs.proto.BlockchainTransactionOutput.script)
  clear_has_script();
  return script_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockchainTransactionOutput::set_allocated_script(::std::string* script) {
  if (script != NULL) {
    set_has_script();
  } else {
    clear_has_script();
  }
  script_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), script);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.BlockchainTransactionOutput.script)
}

// optional .opentxs.proto.BlockchainWalletKey key = 5;
inline bool BlockchainTransactionOutput::has_key() const {
  return destination_case() == kKey;
}
inline void BlockchainTransactionOutput::set_has_key() {
  _oneof_case_[0] = kKey;
}
inline ::opentxs::proto::BlockchainWalletKey* BlockchainTransactionOutput::release_key() {
  // @@protoc_insertion_point(field_release:opentxs.proto.BlockchainTransactionOutput.key)
  if (has_key()) {
    clear_has_destination();
      ::opentxs::proto::BlockchainWalletKey* temp = destination_.key_;
    destination_.key_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::opentxs::proto::BlockchainWalletKey& BlockchainTransactionOutput::key() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.BlockchainTransactionOutput.key)
  return has_key()
      ? *destination_.key_
      : *reinterpret_cast< ::opentxs::proto::BlockchainWalletKey*>(&::opentxs::proto::_BlockchainWalletKey_default_instance_);
}
inline ::opentxs::proto::BlockchainWalletKey* BlockchainTransactionOutput::mutable_key() {
  if (!has_key()) {
    clear_destination();
    set_has_key();
    destination_.key_ = new ::opentxs::proto::BlockchainWalletKey;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.proto.BlockchainTransactionOutput.key)
  return destination_.key_;
}

// optional .opentxs.proto.BlockchainExternalAddress external = 6;
inline bool BlockchainTransactionOutput::has_external() const {
  return destination_case() == kExternal;
}
inline void BlockchainTransactionOutput::set_has_external() {
  _oneof_case_[0] = kExternal;
}
inline ::opentxs::proto::BlockchainExternalAddress* BlockchainTransactionOutput::release_external() {
  // @@protoc_insertion_point(field_release:opentxs.proto.BlockchainTransactionOutput.external)
  if (has_external()) {
    clear_has_destination();
      ::opentxs::proto::BlockchainExternalAddress* temp = destination_.external_;
    destination_.external_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::opentxs::proto::BlockchainExternalAddress& BlockchainTransactionOutput::external() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.BlockchainTransactionOutput.external)
  return has_external()
      ? *destination_.external_
      : *reinterpret_cast< ::opentxs::proto::BlockchainExternalAddress*>(&::opentxs::proto::_BlockchainExternalAddress_default_instance_);
}
inline ::opentxs::proto::BlockchainExternalAddress* BlockchainTransactionOutput::mutable_external() {
  if (!has_external()) {
    clear_destination();
    set_has_external();
    destination_.external_ = new ::opentxs::proto::BlockchainExternalAddress;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.proto.BlockchainTransactionOutput.external)
  return destination_.external_;
}

// optional string confirmedspend = 7;
inline bool BlockchainTransactionOutput::has_confirmedspend() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlockchainTransactionOutput::set_has_confirmedspend() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlockchainTransactionOutput::clear_has_confirmedspend() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlockchainTransactionOutput::clear_confirmedspend() {
  confirmedspend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_confirmedspend();
}
inline const ::std::string& BlockchainTransactionOutput::confirmedspend() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.BlockchainTransactionOutput.confirmedspend)
  return confirmedspend_.GetNoArena();
}
inline void BlockchainTransactionOutput::set_confirmedspend(const ::std::string& value) {
  set_has_confirmedspend();
  confirmedspend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.BlockchainTransactionOutput.confirmedspend)
}
#if LANG_CXX11
inline void BlockchainTransactionOutput::set_confirmedspend(::std::string&& value) {
  set_has_confirmedspend();
  confirmedspend_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.BlockchainTransactionOutput.confirmedspend)
}
#endif
inline void BlockchainTransactionOutput::set_confirmedspend(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_confirmedspend();
  confirmedspend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.BlockchainTransactionOutput.confirmedspend)
}
inline void BlockchainTransactionOutput::set_confirmedspend(const char* value, size_t size) {
  set_has_confirmedspend();
  confirmedspend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.BlockchainTransactionOutput.confirmedspend)
}
inline ::std::string* BlockchainTransactionOutput::mutable_confirmedspend() {
  set_has_confirmedspend();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.BlockchainTransactionOutput.confirmedspend)
  return confirmedspend_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockchainTransactionOutput::release_confirmedspend() {
  // @@protoc_insertion_point(field_release:opentxs.proto.BlockchainTransactionOutput.confirmedspend)
  clear_has_confirmedspend();
  return confirmedspend_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockchainTransactionOutput::set_allocated_confirmedspend(::std::string* confirmedspend) {
  if (confirmedspend != NULL) {
    set_has_confirmedspend();
  } else {
    clear_has_confirmedspend();
  }
  confirmedspend_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), confirmedspend);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.BlockchainTransactionOutput.confirmedspend)
}

// repeated string orphanedspend = 8;
inline int BlockchainTransactionOutput::orphanedspend_size() const {
  return orphanedspend_.size();
}
inline void BlockchainTransactionOutput::clear_orphanedspend() {
  orphanedspend_.Clear();
}
inline const ::std::string& BlockchainTransactionOutput::orphanedspend(int index) const {
  // @@protoc_insertion_point(field_get:opentxs.proto.BlockchainTransactionOutput.orphanedspend)
  return orphanedspend_.Get(index);
}
inline ::std::string* BlockchainTransactionOutput::mutable_orphanedspend(int index) {
  // @@protoc_insertion_point(field_mutable:opentxs.proto.BlockchainTransactionOutput.orphanedspend)
  return orphanedspend_.Mutable(index);
}
inline void BlockchainTransactionOutput::set_orphanedspend(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:opentxs.proto.BlockchainTransactionOutput.orphanedspend)
  orphanedspend_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void BlockchainTransactionOutput::set_orphanedspend(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:opentxs.proto.BlockchainTransactionOutput.orphanedspend)
  orphanedspend_.Mutable(index)->assign(std::move(value));
}
#endif
inline void BlockchainTransactionOutput::set_orphanedspend(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  orphanedspend_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opentxs.proto.BlockchainTransactionOutput.orphanedspend)
}
inline void BlockchainTransactionOutput::set_orphanedspend(int index, const char* value, size_t size) {
  orphanedspend_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.BlockchainTransactionOutput.orphanedspend)
}
inline ::std::string* BlockchainTransactionOutput::add_orphanedspend() {
  // @@protoc_insertion_point(field_add_mutable:opentxs.proto.BlockchainTransactionOutput.orphanedspend)
  return orphanedspend_.Add();
}
inline void BlockchainTransactionOutput::add_orphanedspend(const ::std::string& value) {
  orphanedspend_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:opentxs.proto.BlockchainTransactionOutput.orphanedspend)
}
#if LANG_CXX11
inline void BlockchainTransactionOutput::add_orphanedspend(::std::string&& value) {
  orphanedspend_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:opentxs.proto.BlockchainTransactionOutput.orphanedspend)
}
#endif
inline void BlockchainTransactionOutput::add_orphanedspend(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  orphanedspend_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opentxs.proto.BlockchainTransactionOutput.orphanedspend)
}
inline void BlockchainTransactionOutput::add_orphanedspend(const char* value, size_t size) {
  orphanedspend_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opentxs.proto.BlockchainTransactionOutput.orphanedspend)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BlockchainTransactionOutput::orphanedspend() const {
  // @@protoc_insertion_point(field_list:opentxs.proto.BlockchainTransactionOutput.orphanedspend)
  return orphanedspend_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BlockchainTransactionOutput::mutable_orphanedspend() {
  // @@protoc_insertion_point(field_mutable_list:opentxs.proto.BlockchainTransactionOutput.orphanedspend)
  return &orphanedspend_;
}

inline bool BlockchainTransactionOutput::has_destination() const {
  return destination_case() != DESTINATION_NOT_SET;
}
inline void BlockchainTransactionOutput::clear_has_destination() {
  _oneof_case_[0] = DESTINATION_NOT_SET;
}
inline BlockchainTransactionOutput::DestinationCase BlockchainTransactionOutput::destination_case() const {
  return BlockchainTransactionOutput::DestinationCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace opentxs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BlockchainTransactionOutput_2eproto__INCLUDED
