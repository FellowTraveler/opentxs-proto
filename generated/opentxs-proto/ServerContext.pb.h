// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerContext.proto

#ifndef PROTOBUF_ServerContext_2eproto__INCLUDED
#define PROTOBUF_ServerContext_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "ConsensusEnums.pb.h"  // IWYU pragma: export
#include "PendingCommand.pb.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace protobuf_ServerContext_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsServerContextImpl();
void InitDefaultsServerContext();
inline void InitDefaults() {
  InitDefaultsServerContext();
}
}  // namespace protobuf_ServerContext_2eproto
namespace opentxs {
namespace proto {
class ServerContext;
class ServerContextDefaultTypeInternal;
extern ServerContextDefaultTypeInternal _ServerContext_default_instance_;
}  // namespace proto
}  // namespace opentxs
namespace opentxs {
namespace proto {

// ===================================================================

class ServerContext : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:opentxs.proto.ServerContext) */ {
 public:
  ServerContext();
  virtual ~ServerContext();

  ServerContext(const ServerContext& from);

  inline ServerContext& operator=(const ServerContext& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerContext(ServerContext&& from) noexcept
    : ServerContext() {
    *this = ::std::move(from);
  }

  inline ServerContext& operator=(ServerContext&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ServerContext& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerContext* internal_default_instance() {
    return reinterpret_cast<const ServerContext*>(
               &_ServerContext_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ServerContext* other);
  friend void swap(ServerContext& a, ServerContext& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerContext* New() const PROTOBUF_FINAL { return New(NULL); }

  ServerContext* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const ServerContext& from);
  void MergeFrom(const ServerContext& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerContext* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 tentativerequestnumber = 4;
  int tentativerequestnumber_size() const;
  void clear_tentativerequestnumber();
  static const int kTentativerequestnumberFieldNumber = 4;
  ::google::protobuf::uint64 tentativerequestnumber(int index) const;
  void set_tentativerequestnumber(int index, ::google::protobuf::uint64 value);
  void add_tentativerequestnumber(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      tentativerequestnumber() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_tentativerequestnumber();

  // optional string serverid = 2;
  bool has_serverid() const;
  void clear_serverid();
  static const int kServeridFieldNumber = 2;
  const ::std::string& serverid() const;
  void set_serverid(const ::std::string& value);
  #if LANG_CXX11
  void set_serverid(::std::string&& value);
  #endif
  void set_serverid(const char* value);
  void set_serverid(const char* value, size_t size);
  ::std::string* mutable_serverid();
  ::std::string* release_serverid();
  void set_allocated_serverid(::std::string* serverid);

  // optional string adminpassword = 6;
  bool has_adminpassword() const;
  void clear_adminpassword();
  static const int kAdminpasswordFieldNumber = 6;
  const ::std::string& adminpassword() const;
  void set_adminpassword(const ::std::string& value);
  #if LANG_CXX11
  void set_adminpassword(::std::string&& value);
  #endif
  void set_adminpassword(const char* value);
  void set_adminpassword(const char* value, size_t size);
  ::std::string* mutable_adminpassword();
  ::std::string* release_adminpassword();
  void set_allocated_adminpassword(::std::string* adminpassword);

  // optional .opentxs.proto.PendingCommand pending = 11;
  bool has_pending() const;
  void clear_pending();
  static const int kPendingFieldNumber = 11;
  const ::opentxs::proto::PendingCommand& pending() const;
  ::opentxs::proto::PendingCommand* release_pending();
  ::opentxs::proto::PendingCommand* mutable_pending();
  void set_allocated_pending(::opentxs::proto::PendingCommand* pending);

  // optional uint64 highesttransactionnumber = 3;
  bool has_highesttransactionnumber() const;
  void clear_highesttransactionnumber();
  static const int kHighesttransactionnumberFieldNumber = 3;
  ::google::protobuf::uint64 highesttransactionnumber() const;
  void set_highesttransactionnumber(::google::protobuf::uint64 value);

  // optional uint64 revision = 5;
  bool has_revision() const;
  void clear_revision();
  static const int kRevisionFieldNumber = 5;
  ::google::protobuf::uint64 revision() const;
  void set_revision(::google::protobuf::uint64 value);

  // optional uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // optional bool adminattempted = 7;
  bool has_adminattempted() const;
  void clear_adminattempted();
  static const int kAdminattemptedFieldNumber = 7;
  bool adminattempted() const;
  void set_adminattempted(bool value);

  // optional bool adminsuccess = 8;
  bool has_adminsuccess() const;
  void clear_adminsuccess();
  static const int kAdminsuccessFieldNumber = 8;
  bool adminsuccess() const;
  void set_adminsuccess(bool value);

  // optional .opentxs.proto.DeliveryState state = 9;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 9;
  ::opentxs::proto::DeliveryState state() const;
  void set_state(::opentxs::proto::DeliveryState value);

  // optional .opentxs.proto.LastReplyStatus laststatus = 10;
  bool has_laststatus() const;
  void clear_laststatus();
  static const int kLaststatusFieldNumber = 10;
  ::opentxs::proto::LastReplyStatus laststatus() const;
  void set_laststatus(::opentxs::proto::LastReplyStatus value);

  // @@protoc_insertion_point(class_scope:opentxs.proto.ServerContext)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_serverid();
  void clear_has_serverid();
  void set_has_highesttransactionnumber();
  void clear_has_highesttransactionnumber();
  void set_has_revision();
  void clear_has_revision();
  void set_has_adminpassword();
  void clear_has_adminpassword();
  void set_has_adminattempted();
  void clear_has_adminattempted();
  void set_has_adminsuccess();
  void clear_has_adminsuccess();
  void set_has_state();
  void clear_has_state();
  void set_has_laststatus();
  void clear_has_laststatus();
  void set_has_pending();
  void clear_has_pending();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > tentativerequestnumber_;
  ::google::protobuf::internal::ArenaStringPtr serverid_;
  ::google::protobuf::internal::ArenaStringPtr adminpassword_;
  ::opentxs::proto::PendingCommand* pending_;
  ::google::protobuf::uint64 highesttransactionnumber_;
  ::google::protobuf::uint64 revision_;
  ::google::protobuf::uint32 version_;
  bool adminattempted_;
  bool adminsuccess_;
  int state_;
  int laststatus_;
  friend struct ::protobuf_ServerContext_2eproto::TableStruct;
  friend void ::protobuf_ServerContext_2eproto::InitDefaultsServerContextImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServerContext

// optional uint32 version = 1;
inline bool ServerContext::has_version() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ServerContext::set_has_version() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ServerContext::clear_has_version() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ServerContext::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 ServerContext::version() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.ServerContext.version)
  return version_;
}
inline void ServerContext::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.ServerContext.version)
}

// optional string serverid = 2;
inline bool ServerContext::has_serverid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerContext::set_has_serverid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerContext::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerContext::clear_serverid() {
  serverid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serverid();
}
inline const ::std::string& ServerContext::serverid() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.ServerContext.serverid)
  return serverid_.GetNoArena();
}
inline void ServerContext::set_serverid(const ::std::string& value) {
  set_has_serverid();
  serverid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.ServerContext.serverid)
}
#if LANG_CXX11
inline void ServerContext::set_serverid(::std::string&& value) {
  set_has_serverid();
  serverid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.ServerContext.serverid)
}
#endif
inline void ServerContext::set_serverid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_serverid();
  serverid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.ServerContext.serverid)
}
inline void ServerContext::set_serverid(const char* value, size_t size) {
  set_has_serverid();
  serverid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.ServerContext.serverid)
}
inline ::std::string* ServerContext::mutable_serverid() {
  set_has_serverid();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.ServerContext.serverid)
  return serverid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerContext::release_serverid() {
  // @@protoc_insertion_point(field_release:opentxs.proto.ServerContext.serverid)
  clear_has_serverid();
  return serverid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerContext::set_allocated_serverid(::std::string* serverid) {
  if (serverid != NULL) {
    set_has_serverid();
  } else {
    clear_has_serverid();
  }
  serverid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serverid);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.ServerContext.serverid)
}

// optional uint64 highesttransactionnumber = 3;
inline bool ServerContext::has_highesttransactionnumber() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerContext::set_has_highesttransactionnumber() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerContext::clear_has_highesttransactionnumber() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerContext::clear_highesttransactionnumber() {
  highesttransactionnumber_ = GOOGLE_ULONGLONG(0);
  clear_has_highesttransactionnumber();
}
inline ::google::protobuf::uint64 ServerContext::highesttransactionnumber() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.ServerContext.highesttransactionnumber)
  return highesttransactionnumber_;
}
inline void ServerContext::set_highesttransactionnumber(::google::protobuf::uint64 value) {
  set_has_highesttransactionnumber();
  highesttransactionnumber_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.ServerContext.highesttransactionnumber)
}

// repeated uint64 tentativerequestnumber = 4;
inline int ServerContext::tentativerequestnumber_size() const {
  return tentativerequestnumber_.size();
}
inline void ServerContext::clear_tentativerequestnumber() {
  tentativerequestnumber_.Clear();
}
inline ::google::protobuf::uint64 ServerContext::tentativerequestnumber(int index) const {
  // @@protoc_insertion_point(field_get:opentxs.proto.ServerContext.tentativerequestnumber)
  return tentativerequestnumber_.Get(index);
}
inline void ServerContext::set_tentativerequestnumber(int index, ::google::protobuf::uint64 value) {
  tentativerequestnumber_.Set(index, value);
  // @@protoc_insertion_point(field_set:opentxs.proto.ServerContext.tentativerequestnumber)
}
inline void ServerContext::add_tentativerequestnumber(::google::protobuf::uint64 value) {
  tentativerequestnumber_.Add(value);
  // @@protoc_insertion_point(field_add:opentxs.proto.ServerContext.tentativerequestnumber)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ServerContext::tentativerequestnumber() const {
  // @@protoc_insertion_point(field_list:opentxs.proto.ServerContext.tentativerequestnumber)
  return tentativerequestnumber_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ServerContext::mutable_tentativerequestnumber() {
  // @@protoc_insertion_point(field_mutable_list:opentxs.proto.ServerContext.tentativerequestnumber)
  return &tentativerequestnumber_;
}

// optional uint64 revision = 5;
inline bool ServerContext::has_revision() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ServerContext::set_has_revision() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ServerContext::clear_has_revision() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ServerContext::clear_revision() {
  revision_ = GOOGLE_ULONGLONG(0);
  clear_has_revision();
}
inline ::google::protobuf::uint64 ServerContext::revision() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.ServerContext.revision)
  return revision_;
}
inline void ServerContext::set_revision(::google::protobuf::uint64 value) {
  set_has_revision();
  revision_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.ServerContext.revision)
}

// optional string adminpassword = 6;
inline bool ServerContext::has_adminpassword() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerContext::set_has_adminpassword() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerContext::clear_has_adminpassword() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerContext::clear_adminpassword() {
  adminpassword_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_adminpassword();
}
inline const ::std::string& ServerContext::adminpassword() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.ServerContext.adminpassword)
  return adminpassword_.GetNoArena();
}
inline void ServerContext::set_adminpassword(const ::std::string& value) {
  set_has_adminpassword();
  adminpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.ServerContext.adminpassword)
}
#if LANG_CXX11
inline void ServerContext::set_adminpassword(::std::string&& value) {
  set_has_adminpassword();
  adminpassword_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.ServerContext.adminpassword)
}
#endif
inline void ServerContext::set_adminpassword(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_adminpassword();
  adminpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.ServerContext.adminpassword)
}
inline void ServerContext::set_adminpassword(const char* value, size_t size) {
  set_has_adminpassword();
  adminpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.ServerContext.adminpassword)
}
inline ::std::string* ServerContext::mutable_adminpassword() {
  set_has_adminpassword();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.ServerContext.adminpassword)
  return adminpassword_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerContext::release_adminpassword() {
  // @@protoc_insertion_point(field_release:opentxs.proto.ServerContext.adminpassword)
  clear_has_adminpassword();
  return adminpassword_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerContext::set_allocated_adminpassword(::std::string* adminpassword) {
  if (adminpassword != NULL) {
    set_has_adminpassword();
  } else {
    clear_has_adminpassword();
  }
  adminpassword_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), adminpassword);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.ServerContext.adminpassword)
}

// optional bool adminattempted = 7;
inline bool ServerContext::has_adminattempted() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ServerContext::set_has_adminattempted() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ServerContext::clear_has_adminattempted() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ServerContext::clear_adminattempted() {
  adminattempted_ = false;
  clear_has_adminattempted();
}
inline bool ServerContext::adminattempted() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.ServerContext.adminattempted)
  return adminattempted_;
}
inline void ServerContext::set_adminattempted(bool value) {
  set_has_adminattempted();
  adminattempted_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.ServerContext.adminattempted)
}

// optional bool adminsuccess = 8;
inline bool ServerContext::has_adminsuccess() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ServerContext::set_has_adminsuccess() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ServerContext::clear_has_adminsuccess() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ServerContext::clear_adminsuccess() {
  adminsuccess_ = false;
  clear_has_adminsuccess();
}
inline bool ServerContext::adminsuccess() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.ServerContext.adminsuccess)
  return adminsuccess_;
}
inline void ServerContext::set_adminsuccess(bool value) {
  set_has_adminsuccess();
  adminsuccess_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.ServerContext.adminsuccess)
}

// optional .opentxs.proto.DeliveryState state = 9;
inline bool ServerContext::has_state() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ServerContext::set_has_state() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ServerContext::clear_has_state() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ServerContext::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::opentxs::proto::DeliveryState ServerContext::state() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.ServerContext.state)
  return static_cast< ::opentxs::proto::DeliveryState >(state_);
}
inline void ServerContext::set_state(::opentxs::proto::DeliveryState value) {
  assert(::opentxs::proto::DeliveryState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.ServerContext.state)
}

// optional .opentxs.proto.LastReplyStatus laststatus = 10;
inline bool ServerContext::has_laststatus() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ServerContext::set_has_laststatus() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ServerContext::clear_has_laststatus() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ServerContext::clear_laststatus() {
  laststatus_ = 0;
  clear_has_laststatus();
}
inline ::opentxs::proto::LastReplyStatus ServerContext::laststatus() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.ServerContext.laststatus)
  return static_cast< ::opentxs::proto::LastReplyStatus >(laststatus_);
}
inline void ServerContext::set_laststatus(::opentxs::proto::LastReplyStatus value) {
  assert(::opentxs::proto::LastReplyStatus_IsValid(value));
  set_has_laststatus();
  laststatus_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.ServerContext.laststatus)
}

// optional .opentxs.proto.PendingCommand pending = 11;
inline bool ServerContext::has_pending() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerContext::set_has_pending() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerContext::clear_has_pending() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::opentxs::proto::PendingCommand& ServerContext::pending() const {
  const ::opentxs::proto::PendingCommand* p = pending_;
  // @@protoc_insertion_point(field_get:opentxs.proto.ServerContext.pending)
  return p != NULL ? *p : *reinterpret_cast<const ::opentxs::proto::PendingCommand*>(
      &::opentxs::proto::_PendingCommand_default_instance_);
}
inline ::opentxs::proto::PendingCommand* ServerContext::release_pending() {
  // @@protoc_insertion_point(field_release:opentxs.proto.ServerContext.pending)
  clear_has_pending();
  ::opentxs::proto::PendingCommand* temp = pending_;
  pending_ = NULL;
  return temp;
}
inline ::opentxs::proto::PendingCommand* ServerContext::mutable_pending() {
  set_has_pending();
  if (pending_ == NULL) {
    pending_ = new ::opentxs::proto::PendingCommand;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.proto.ServerContext.pending)
  return pending_;
}
inline void ServerContext::set_allocated_pending(::opentxs::proto::PendingCommand* pending) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pending_);
  }
  if (pending) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pending = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pending, submessage_arena);
    }
    set_has_pending();
  } else {
    clear_has_pending();
  }
  pending_ = pending;
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.ServerContext.pending)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace opentxs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ServerContext_2eproto__INCLUDED
