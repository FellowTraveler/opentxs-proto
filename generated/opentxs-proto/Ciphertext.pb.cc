// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Ciphertext.proto

#include "Ciphertext.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace opentxs {
namespace proto {
class CiphertextDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ciphertext>
      _instance;
} _Ciphertext_default_instance_;
class SymmetricKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SymmetricKey>
      _instance;
} _SymmetricKey_default_instance_;
}  // namespace proto
}  // namespace opentxs
namespace protobuf_Ciphertext_2eproto {
void InitDefaultsCiphertextImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::opentxs::proto::_Ciphertext_default_instance_;
    new (ptr) ::opentxs::proto::Ciphertext();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::opentxs::proto::_SymmetricKey_default_instance_;
    new (ptr) ::opentxs::proto::SymmetricKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opentxs::proto::Ciphertext::InitAsDefaultInstance();
  ::opentxs::proto::SymmetricKey::InitAsDefaultInstance();
}

void InitDefaultsCiphertext() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCiphertextImpl);
}

}  // namespace protobuf_Ciphertext_2eproto
namespace opentxs {
namespace proto {

// ===================================================================

void Ciphertext::InitAsDefaultInstance() {
  ::opentxs::proto::_Ciphertext_default_instance_._instance.get_mutable()->key_ = const_cast< ::opentxs::proto::SymmetricKey*>(
      ::opentxs::proto::SymmetricKey::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ciphertext::kVersionFieldNumber;
const int Ciphertext::kModeFieldNumber;
const int Ciphertext::kTextFieldNumber;
const int Ciphertext::kKeyFieldNumber;
const int Ciphertext::kIvFieldNumber;
const int Ciphertext::kTagFieldNumber;
const int Ciphertext::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ciphertext::Ciphertext()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Ciphertext_2eproto::InitDefaultsCiphertext();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:opentxs.proto.Ciphertext)
}
Ciphertext::Ciphertext(const Ciphertext& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  iv_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_iv()) {
    iv_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.iv_);
  }
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag()) {
    tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_key()) {
    key_ = new ::opentxs::proto::SymmetricKey(*from.key_);
  } else {
    key_ = NULL;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&text_) -
    reinterpret_cast<char*>(&version_)) + sizeof(text_));
  // @@protoc_insertion_point(copy_constructor:opentxs.proto.Ciphertext)
}

void Ciphertext::SharedCtor() {
  _cached_size_ = 0;
  iv_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&text_) -
      reinterpret_cast<char*>(&key_)) + sizeof(text_));
}

Ciphertext::~Ciphertext() {
  // @@protoc_insertion_point(destructor:opentxs.proto.Ciphertext)
  SharedDtor();
}

void Ciphertext::SharedDtor() {
  iv_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete key_;
}

void Ciphertext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Ciphertext& Ciphertext::default_instance() {
  ::protobuf_Ciphertext_2eproto::InitDefaultsCiphertext();
  return *internal_default_instance();
}

Ciphertext* Ciphertext::New(::google::protobuf::Arena* arena) const {
  Ciphertext* n = new Ciphertext;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ciphertext::Clear() {
// @@protoc_insertion_point(message_clear_start:opentxs.proto.Ciphertext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!iv_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*iv_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!tag_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tag_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*data_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(key_ != NULL);
      key_->Clear();
    }
  }
  if (cached_has_bits & 112u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&text_) -
        reinterpret_cast<char*>(&version_)) + sizeof(text_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Ciphertext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:opentxs.proto.Ciphertext)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.SymmetricMode mode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::opentxs::proto::SymmetricMode_IsValid(value)) {
            set_mode(static_cast< ::opentxs::proto::SymmetricMode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool text = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_text();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &text_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.SymmetricKey key = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes iv = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_iv()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes tag = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opentxs.proto.Ciphertext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opentxs.proto.Ciphertext)
  return false;
#undef DO_
}

void Ciphertext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opentxs.proto.Ciphertext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional .opentxs.proto.SymmetricMode mode = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->mode(), output);
  }

  // optional bool text = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->text(), output);
  }

  // optional .opentxs.proto.SymmetricKey key = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->key_, output);
  }

  // optional bytes iv = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->iv(), output);
  }

  // optional bytes tag = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->tag(), output);
  }

  // optional bytes data = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->data(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:opentxs.proto.Ciphertext)
}

size_t Ciphertext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentxs.proto.Ciphertext)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 127u) {
    // optional bytes iv = 5;
    if (has_iv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->iv());
    }

    // optional bytes tag = 6;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tag());
    }

    // optional bytes data = 7;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional .opentxs.proto.SymmetricKey key = 4;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->key_);
    }

    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional .opentxs.proto.SymmetricMode mode = 2;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

    // optional bool text = 3;
    if (has_text()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ciphertext::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Ciphertext*>(&from));
}

void Ciphertext::MergeFrom(const Ciphertext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentxs.proto.Ciphertext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_iv();
      iv_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.iv_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_tag();
      tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_key()->::opentxs::proto::SymmetricKey::MergeFrom(from.key());
    }
    if (cached_has_bits & 0x00000010u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000020u) {
      mode_ = from.mode_;
    }
    if (cached_has_bits & 0x00000040u) {
      text_ = from.text_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Ciphertext::CopyFrom(const Ciphertext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentxs.proto.Ciphertext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ciphertext::IsInitialized() const {
  return true;
}

void Ciphertext::Swap(Ciphertext* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ciphertext::InternalSwap(Ciphertext* other) {
  using std::swap;
  iv_.Swap(&other->iv_);
  tag_.Swap(&other->tag_);
  data_.Swap(&other->data_);
  swap(key_, other->key_);
  swap(version_, other->version_);
  swap(mode_, other->mode_);
  swap(text_, other->text_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string Ciphertext::GetTypeName() const {
  return "opentxs.proto.Ciphertext";
}


// ===================================================================

void SymmetricKey::InitAsDefaultInstance() {
  ::opentxs::proto::_SymmetricKey_default_instance_._instance.get_mutable()->key_ = const_cast< ::opentxs::proto::Ciphertext*>(
      ::opentxs::proto::Ciphertext::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SymmetricKey::kVersionFieldNumber;
const int SymmetricKey::kTypeFieldNumber;
const int SymmetricKey::kSizeFieldNumber;
const int SymmetricKey::kSaltFieldNumber;
const int SymmetricKey::kOperationsFieldNumber;
const int SymmetricKey::kDifficultyFieldNumber;
const int SymmetricKey::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SymmetricKey::SymmetricKey()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Ciphertext_2eproto::InitDefaultsCiphertext();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:opentxs.proto.SymmetricKey)
}
SymmetricKey::SymmetricKey(const SymmetricKey& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  salt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_salt()) {
    salt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.salt_);
  }
  if (from.has_key()) {
    key_ = new ::opentxs::proto::Ciphertext(*from.key_);
  } else {
    key_ = NULL;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&version_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:opentxs.proto.SymmetricKey)
}

void SymmetricKey::SharedCtor() {
  _cached_size_ = 0;
  salt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&key_)) + sizeof(size_));
}

SymmetricKey::~SymmetricKey() {
  // @@protoc_insertion_point(destructor:opentxs.proto.SymmetricKey)
  SharedDtor();
}

void SymmetricKey::SharedDtor() {
  salt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete key_;
}

void SymmetricKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SymmetricKey& SymmetricKey::default_instance() {
  ::protobuf_Ciphertext_2eproto::InitDefaultsCiphertext();
  return *internal_default_instance();
}

SymmetricKey* SymmetricKey::New(::google::protobuf::Arena* arena) const {
  SymmetricKey* n = new SymmetricKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SymmetricKey::Clear() {
// @@protoc_insertion_point(message_clear_start:opentxs.proto.SymmetricKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!salt_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*salt_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(key_ != NULL);
      key_->Clear();
    }
  }
  if (cached_has_bits & 124u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&size_) -
        reinterpret_cast<char*>(&version_)) + sizeof(size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SymmetricKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:opentxs.proto.SymmetricKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.SymmetricKeyType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::opentxs::proto::SymmetricKeyType_IsValid(value)) {
            set_type(static_cast< ::opentxs::proto::SymmetricKeyType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes salt = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_salt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 operations = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_operations();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &operations_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 difficulty = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_difficulty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &difficulty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.Ciphertext key = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opentxs.proto.SymmetricKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opentxs.proto.SymmetricKey)
  return false;
#undef DO_
}

void SymmetricKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opentxs.proto.SymmetricKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional .opentxs.proto.SymmetricKeyType type = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional uint32 size = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->size(), output);
  }

  // optional bytes salt = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->salt(), output);
  }

  // optional uint64 operations = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->operations(), output);
  }

  // optional uint64 difficulty = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->difficulty(), output);
  }

  // optional .opentxs.proto.Ciphertext key = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, *this->key_, output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:opentxs.proto.SymmetricKey)
}

size_t SymmetricKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentxs.proto.SymmetricKey)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 127u) {
    // optional bytes salt = 4;
    if (has_salt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->salt());
    }

    // optional .opentxs.proto.Ciphertext key = 7;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->key_);
    }

    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional .opentxs.proto.SymmetricKeyType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 operations = 5;
    if (has_operations()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->operations());
    }

    // optional uint64 difficulty = 6;
    if (has_difficulty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->difficulty());
    }

    // optional uint32 size = 3;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SymmetricKey::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SymmetricKey*>(&from));
}

void SymmetricKey::MergeFrom(const SymmetricKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentxs.proto.SymmetricKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_salt();
      salt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.salt_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_key()->::opentxs::proto::Ciphertext::MergeFrom(from.key());
    }
    if (cached_has_bits & 0x00000004u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      operations_ = from.operations_;
    }
    if (cached_has_bits & 0x00000020u) {
      difficulty_ = from.difficulty_;
    }
    if (cached_has_bits & 0x00000040u) {
      size_ = from.size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SymmetricKey::CopyFrom(const SymmetricKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentxs.proto.SymmetricKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymmetricKey::IsInitialized() const {
  return true;
}

void SymmetricKey::Swap(SymmetricKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SymmetricKey::InternalSwap(SymmetricKey* other) {
  using std::swap;
  salt_.Swap(&other->salt_);
  swap(key_, other->key_);
  swap(version_, other->version_);
  swap(type_, other->type_);
  swap(operations_, other->operations_);
  swap(difficulty_, other->difficulty_);
  swap(size_, other->size_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string SymmetricKey::GetTypeName() const {
  return "opentxs.proto.SymmetricKey";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace opentxs

// @@protoc_insertion_point(global_scope)
