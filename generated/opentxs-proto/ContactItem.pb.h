// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ContactItem.proto

#ifndef PROTOBUF_ContactItem_2eproto__INCLUDED
#define PROTOBUF_ContactItem_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "ContactEnums.pb.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace protobuf_ContactItem_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsContactItemImpl();
void InitDefaultsContactItem();
inline void InitDefaults() {
  InitDefaultsContactItem();
}
}  // namespace protobuf_ContactItem_2eproto
namespace opentxs {
namespace proto {
class ContactItem;
class ContactItemDefaultTypeInternal;
extern ContactItemDefaultTypeInternal _ContactItem_default_instance_;
}  // namespace proto
}  // namespace opentxs
namespace opentxs {
namespace proto {

// ===================================================================

class ContactItem : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:opentxs.proto.ContactItem) */ {
 public:
  ContactItem();
  virtual ~ContactItem();

  ContactItem(const ContactItem& from);

  inline ContactItem& operator=(const ContactItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ContactItem(ContactItem&& from) noexcept
    : ContactItem() {
    *this = ::std::move(from);
  }

  inline ContactItem& operator=(ContactItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ContactItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContactItem* internal_default_instance() {
    return reinterpret_cast<const ContactItem*>(
               &_ContactItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ContactItem* other);
  friend void swap(ContactItem& a, ContactItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ContactItem* New() const PROTOBUF_FINAL { return New(NULL); }

  ContactItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const ContactItem& from);
  void MergeFrom(const ContactItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContactItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .opentxs.proto.ContactItemAttribute attribute = 7;
  int attribute_size() const;
  void clear_attribute();
  static const int kAttributeFieldNumber = 7;
  ::opentxs::proto::ContactItemAttribute attribute(int index) const;
  void set_attribute(int index, ::opentxs::proto::ContactItemAttribute value);
  void add_attribute(::opentxs::proto::ContactItemAttribute value);
  const ::google::protobuf::RepeatedField<int>& attribute() const;
  ::google::protobuf::RepeatedField<int>* mutable_attribute();

  // optional string id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string value = 4;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 4;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // optional string subtype = 8;
  bool has_subtype() const;
  void clear_subtype();
  static const int kSubtypeFieldNumber = 8;
  const ::std::string& subtype() const;
  void set_subtype(const ::std::string& value);
  #if LANG_CXX11
  void set_subtype(::std::string&& value);
  #endif
  void set_subtype(const char* value);
  void set_subtype(const char* value, size_t size);
  ::std::string* mutable_subtype();
  ::std::string* release_subtype();
  void set_allocated_subtype(::std::string* subtype);

  // optional uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // optional .opentxs.proto.ContactItemType type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::opentxs::proto::ContactItemType type() const;
  void set_type(::opentxs::proto::ContactItemType value);

  // optional sint64 start = 5;
  bool has_start() const;
  void clear_start();
  static const int kStartFieldNumber = 5;
  ::google::protobuf::int64 start() const;
  void set_start(::google::protobuf::int64 value);

  // optional sint64 end = 6;
  bool has_end() const;
  void clear_end();
  static const int kEndFieldNumber = 6;
  ::google::protobuf::int64 end() const;
  void set_end(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:opentxs.proto.ContactItem)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_id();
  void clear_has_id();
  void set_has_type();
  void clear_has_type();
  void set_has_value();
  void clear_has_value();
  void set_has_start();
  void clear_has_start();
  void set_has_end();
  void clear_has_end();
  void set_has_subtype();
  void clear_has_subtype();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField<int> attribute_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::internal::ArenaStringPtr subtype_;
  ::google::protobuf::uint32 version_;
  int type_;
  ::google::protobuf::int64 start_;
  ::google::protobuf::int64 end_;
  friend struct ::protobuf_ContactItem_2eproto::TableStruct;
  friend void ::protobuf_ContactItem_2eproto::InitDefaultsContactItemImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ContactItem

// optional uint32 version = 1;
inline bool ContactItem::has_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ContactItem::set_has_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ContactItem::clear_has_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ContactItem::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 ContactItem::version() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.ContactItem.version)
  return version_;
}
inline void ContactItem::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.ContactItem.version)
}

// optional string id = 2;
inline bool ContactItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContactItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContactItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContactItem::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& ContactItem::id() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.ContactItem.id)
  return id_.GetNoArena();
}
inline void ContactItem::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.ContactItem.id)
}
#if LANG_CXX11
inline void ContactItem::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.ContactItem.id)
}
#endif
inline void ContactItem::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.ContactItem.id)
}
inline void ContactItem::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.ContactItem.id)
}
inline ::std::string* ContactItem::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.ContactItem.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactItem::release_id() {
  // @@protoc_insertion_point(field_release:opentxs.proto.ContactItem.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactItem::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.ContactItem.id)
}

// optional .opentxs.proto.ContactItemType type = 3;
inline bool ContactItem::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ContactItem::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ContactItem::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ContactItem::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::opentxs::proto::ContactItemType ContactItem::type() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.ContactItem.type)
  return static_cast< ::opentxs::proto::ContactItemType >(type_);
}
inline void ContactItem::set_type(::opentxs::proto::ContactItemType value) {
  assert(::opentxs::proto::ContactItemType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.ContactItem.type)
}

// optional string value = 4;
inline bool ContactItem::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContactItem::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ContactItem::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ContactItem::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& ContactItem::value() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.ContactItem.value)
  return value_.GetNoArena();
}
inline void ContactItem::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.ContactItem.value)
}
#if LANG_CXX11
inline void ContactItem::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.ContactItem.value)
}
#endif
inline void ContactItem::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.ContactItem.value)
}
inline void ContactItem::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.ContactItem.value)
}
inline ::std::string* ContactItem::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.ContactItem.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactItem::release_value() {
  // @@protoc_insertion_point(field_release:opentxs.proto.ContactItem.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactItem::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.ContactItem.value)
}

// optional sint64 start = 5;
inline bool ContactItem::has_start() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ContactItem::set_has_start() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ContactItem::clear_has_start() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ContactItem::clear_start() {
  start_ = GOOGLE_LONGLONG(0);
  clear_has_start();
}
inline ::google::protobuf::int64 ContactItem::start() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.ContactItem.start)
  return start_;
}
inline void ContactItem::set_start(::google::protobuf::int64 value) {
  set_has_start();
  start_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.ContactItem.start)
}

// optional sint64 end = 6;
inline bool ContactItem::has_end() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ContactItem::set_has_end() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ContactItem::clear_has_end() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ContactItem::clear_end() {
  end_ = GOOGLE_LONGLONG(0);
  clear_has_end();
}
inline ::google::protobuf::int64 ContactItem::end() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.ContactItem.end)
  return end_;
}
inline void ContactItem::set_end(::google::protobuf::int64 value) {
  set_has_end();
  end_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.ContactItem.end)
}

// repeated .opentxs.proto.ContactItemAttribute attribute = 7;
inline int ContactItem::attribute_size() const {
  return attribute_.size();
}
inline void ContactItem::clear_attribute() {
  attribute_.Clear();
}
inline ::opentxs::proto::ContactItemAttribute ContactItem::attribute(int index) const {
  // @@protoc_insertion_point(field_get:opentxs.proto.ContactItem.attribute)
  return static_cast< ::opentxs::proto::ContactItemAttribute >(attribute_.Get(index));
}
inline void ContactItem::set_attribute(int index, ::opentxs::proto::ContactItemAttribute value) {
  assert(::opentxs::proto::ContactItemAttribute_IsValid(value));
  attribute_.Set(index, value);
  // @@protoc_insertion_point(field_set:opentxs.proto.ContactItem.attribute)
}
inline void ContactItem::add_attribute(::opentxs::proto::ContactItemAttribute value) {
  assert(::opentxs::proto::ContactItemAttribute_IsValid(value));
  attribute_.Add(value);
  // @@protoc_insertion_point(field_add:opentxs.proto.ContactItem.attribute)
}
inline const ::google::protobuf::RepeatedField<int>&
ContactItem::attribute() const {
  // @@protoc_insertion_point(field_list:opentxs.proto.ContactItem.attribute)
  return attribute_;
}
inline ::google::protobuf::RepeatedField<int>*
ContactItem::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:opentxs.proto.ContactItem.attribute)
  return &attribute_;
}

// optional string subtype = 8;
inline bool ContactItem::has_subtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ContactItem::set_has_subtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ContactItem::clear_has_subtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ContactItem::clear_subtype() {
  subtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_subtype();
}
inline const ::std::string& ContactItem::subtype() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.ContactItem.subtype)
  return subtype_.GetNoArena();
}
inline void ContactItem::set_subtype(const ::std::string& value) {
  set_has_subtype();
  subtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.ContactItem.subtype)
}
#if LANG_CXX11
inline void ContactItem::set_subtype(::std::string&& value) {
  set_has_subtype();
  subtype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.ContactItem.subtype)
}
#endif
inline void ContactItem::set_subtype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_subtype();
  subtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.ContactItem.subtype)
}
inline void ContactItem::set_subtype(const char* value, size_t size) {
  set_has_subtype();
  subtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.ContactItem.subtype)
}
inline ::std::string* ContactItem::mutable_subtype() {
  set_has_subtype();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.ContactItem.subtype)
  return subtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactItem::release_subtype() {
  // @@protoc_insertion_point(field_release:opentxs.proto.ContactItem.subtype)
  clear_has_subtype();
  return subtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactItem::set_allocated_subtype(::std::string* subtype) {
  if (subtype != NULL) {
    set_has_subtype();
  } else {
    clear_has_subtype();
  }
  subtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subtype);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.ContactItem.subtype)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace opentxs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ContactItem_2eproto__INCLUDED
