// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Purse.proto

#include "Purse.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace opentxs {
namespace proto {
class PurseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Purse>
      _instance;
} _Purse_default_instance_;
}  // namespace proto
}  // namespace opentxs
namespace protobuf_Purse_2eproto {
void InitDefaultsPurseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_Token_2eproto::InitDefaultsToken();
  protobuf_Ciphertext_2eproto::InitDefaultsCiphertext();
  protobuf_SessionKey_2eproto::InitDefaultsSessionKey();
  {
    void* ptr = &::opentxs::proto::_Purse_default_instance_;
    new (ptr) ::opentxs::proto::Purse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opentxs::proto::Purse::InitAsDefaultInstance();
}

void InitDefaultsPurse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPurseImpl);
}

}  // namespace protobuf_Purse_2eproto
namespace opentxs {
namespace proto {

// ===================================================================

void Purse::InitAsDefaultInstance() {
  ::opentxs::proto::_Purse_default_instance_._instance.get_mutable()->primarykey_ = const_cast< ::opentxs::proto::SymmetricKey*>(
      ::opentxs::proto::SymmetricKey::internal_default_instance());
  ::opentxs::proto::_Purse_default_instance_._instance.get_mutable()->secondarykey_ = const_cast< ::opentxs::proto::SymmetricKey*>(
      ::opentxs::proto::SymmetricKey::internal_default_instance());
  ::opentxs::proto::_Purse_default_instance_._instance.get_mutable()->secondarypassword_ = const_cast< ::opentxs::proto::Ciphertext*>(
      ::opentxs::proto::Ciphertext::internal_default_instance());
}
void Purse::clear_token() {
  token_.Clear();
}
void Purse::clear_primarykey() {
  if (primarykey_ != NULL) primarykey_->Clear();
  clear_has_primarykey();
}
void Purse::clear_primarypassword() {
  primarypassword_.Clear();
}
void Purse::clear_secondarykey() {
  if (secondarykey_ != NULL) secondarykey_->Clear();
  clear_has_secondarykey();
}
void Purse::clear_secondarypassword() {
  if (secondarypassword_ != NULL) secondarypassword_->Clear();
  clear_has_secondarypassword();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Purse::kVersionFieldNumber;
const int Purse::kTypeFieldNumber;
const int Purse::kStateFieldNumber;
const int Purse::kNotaryFieldNumber;
const int Purse::kMintFieldNumber;
const int Purse::kTotalvalueFieldNumber;
const int Purse::kLatestvalidfromFieldNumber;
const int Purse::kEarliestvalidtoFieldNumber;
const int Purse::kTokenFieldNumber;
const int Purse::kPrimarykeyFieldNumber;
const int Purse::kPrimarypasswordFieldNumber;
const int Purse::kSecondarykeyFieldNumber;
const int Purse::kSecondarypasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Purse::Purse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Purse_2eproto::InitDefaultsPurse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:opentxs.proto.Purse)
}
Purse::Purse(const Purse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      token_(from.token_),
      primarypassword_(from.primarypassword_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  notary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_notary()) {
    notary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.notary_);
  }
  mint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mint()) {
    mint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mint_);
  }
  if (from.has_primarykey()) {
    primarykey_ = new ::opentxs::proto::SymmetricKey(*from.primarykey_);
  } else {
    primarykey_ = NULL;
  }
  if (from.has_secondarykey()) {
    secondarykey_ = new ::opentxs::proto::SymmetricKey(*from.secondarykey_);
  } else {
    secondarykey_ = NULL;
  }
  if (from.has_secondarypassword()) {
    secondarypassword_ = new ::opentxs::proto::Ciphertext(*from.secondarypassword_);
  } else {
    secondarypassword_ = NULL;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&version_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:opentxs.proto.Purse)
}

void Purse::SharedCtor() {
  _cached_size_ = 0;
  notary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&primarykey_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&primarykey_)) + sizeof(state_));
}

Purse::~Purse() {
  // @@protoc_insertion_point(destructor:opentxs.proto.Purse)
  SharedDtor();
}

void Purse::SharedDtor() {
  notary_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mint_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete primarykey_;
  if (this != internal_default_instance()) delete secondarykey_;
  if (this != internal_default_instance()) delete secondarypassword_;
}

void Purse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Purse& Purse::default_instance() {
  ::protobuf_Purse_2eproto::InitDefaultsPurse();
  return *internal_default_instance();
}

Purse* Purse::New(::google::protobuf::Arena* arena) const {
  Purse* n = new Purse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Purse::Clear() {
// @@protoc_insertion_point(message_clear_start:opentxs.proto.Purse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.Clear();
  primarypassword_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!notary_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*notary_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!mint_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mint_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(primarykey_ != NULL);
      primarykey_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(secondarykey_ != NULL);
      secondarykey_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(secondarypassword_ != NULL);
      secondarypassword_->Clear();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&totalvalue_) -
        reinterpret_cast<char*>(&version_)) + sizeof(totalvalue_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&latestvalidfrom_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&latestvalidfrom_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Purse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:opentxs.proto.Purse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.CashType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::opentxs::proto::CashType_IsValid(value)) {
            set_type(static_cast< ::opentxs::proto::CashType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.PurseType state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::opentxs::proto::PurseType_IsValid(value)) {
            set_state(static_cast< ::opentxs::proto::PurseType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string notary = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mint = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 totalvalue = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_totalvalue();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalvalue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 latestvalidfrom = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_latestvalidfrom();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &latestvalidfrom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 earliestvalidto = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_earliestvalidto();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &earliestvalidto_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .opentxs.proto.Token token = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.SymmetricKey primarykey = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_primarykey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .opentxs.proto.SessionKey primarypassword = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_primarypassword()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.SymmetricKey secondarykey = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_secondarykey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.Ciphertext secondarypassword = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_secondarypassword()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opentxs.proto.Purse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opentxs.proto.Purse)
  return false;
#undef DO_
}

void Purse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opentxs.proto.Purse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional .opentxs.proto.CashType type = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .opentxs.proto.PurseType state = 3;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->state(), output);
  }

  // optional string notary = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->notary(), output);
  }

  // optional string mint = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->mint(), output);
  }

  // optional int64 totalvalue = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->totalvalue(), output);
  }

  // optional int64 latestvalidfrom = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->latestvalidfrom(), output);
  }

  // optional int64 earliestvalidto = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->earliestvalidto(), output);
  }

  // repeated .opentxs.proto.Token token = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->token_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->token(static_cast<int>(i)), output);
  }

  // optional .opentxs.proto.SymmetricKey primarykey = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, *this->primarykey_, output);
  }

  // repeated .opentxs.proto.SessionKey primarypassword = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->primarypassword_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->primarypassword(static_cast<int>(i)), output);
  }

  // optional .opentxs.proto.SymmetricKey secondarykey = 12;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, *this->secondarykey_, output);
  }

  // optional .opentxs.proto.Ciphertext secondarypassword = 13;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, *this->secondarypassword_, output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:opentxs.proto.Purse)
}

size_t Purse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentxs.proto.Purse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated .opentxs.proto.Token token = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->token_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->token(static_cast<int>(i)));
    }
  }

  // repeated .opentxs.proto.SessionKey primarypassword = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->primarypassword_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->primarypassword(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string notary = 4;
    if (has_notary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notary());
    }

    // optional string mint = 5;
    if (has_mint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mint());
    }

    // optional .opentxs.proto.SymmetricKey primarykey = 10;
    if (has_primarykey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->primarykey_);
    }

    // optional .opentxs.proto.SymmetricKey secondarykey = 12;
    if (has_secondarykey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->secondarykey_);
    }

    // optional .opentxs.proto.Ciphertext secondarypassword = 13;
    if (has_secondarypassword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->secondarypassword_);
    }

    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional .opentxs.proto.CashType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int64 totalvalue = 6;
    if (has_totalvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->totalvalue());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional int64 latestvalidfrom = 7;
    if (has_latestvalidfrom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->latestvalidfrom());
    }

    // optional int64 earliestvalidto = 8;
    if (has_earliestvalidto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->earliestvalidto());
    }

    // optional .opentxs.proto.PurseType state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Purse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Purse*>(&from));
}

void Purse::MergeFrom(const Purse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentxs.proto.Purse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  token_.MergeFrom(from.token_);
  primarypassword_.MergeFrom(from.primarypassword_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_notary();
      notary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.notary_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_mint();
      mint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mint_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_primarykey()->::opentxs::proto::SymmetricKey::MergeFrom(from.primarykey());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_secondarykey()->::opentxs::proto::SymmetricKey::MergeFrom(from.secondarykey());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_secondarypassword()->::opentxs::proto::Ciphertext::MergeFrom(from.secondarypassword());
    }
    if (cached_has_bits & 0x00000020u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000040u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000080u) {
      totalvalue_ = from.totalvalue_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      latestvalidfrom_ = from.latestvalidfrom_;
    }
    if (cached_has_bits & 0x00000200u) {
      earliestvalidto_ = from.earliestvalidto_;
    }
    if (cached_has_bits & 0x00000400u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Purse::CopyFrom(const Purse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentxs.proto.Purse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Purse::IsInitialized() const {
  return true;
}

void Purse::Swap(Purse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Purse::InternalSwap(Purse* other) {
  using std::swap;
  token_.InternalSwap(&other->token_);
  primarypassword_.InternalSwap(&other->primarypassword_);
  notary_.Swap(&other->notary_);
  mint_.Swap(&other->mint_);
  swap(primarykey_, other->primarykey_);
  swap(secondarykey_, other->secondarykey_);
  swap(secondarypassword_, other->secondarypassword_);
  swap(version_, other->version_);
  swap(type_, other->type_);
  swap(totalvalue_, other->totalvalue_);
  swap(latestvalidfrom_, other->latestvalidfrom_);
  swap(earliestvalidto_, other->earliestvalidto_);
  swap(state_, other->state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string Purse::GetTypeName() const {
  return "opentxs.proto.Purse";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace opentxs

// @@protoc_insertion_point(global_scope)
