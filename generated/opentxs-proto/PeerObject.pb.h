// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PeerObject.proto

#ifndef PROTOBUF_PeerObject_2eproto__INCLUDED
#define PROTOBUF_PeerObject_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "CredentialIndex.pb.h"  // IWYU pragma: export
#include "PeerEnums.pb.h"  // IWYU pragma: export
#include "PeerReply.pb.h"  // IWYU pragma: export
#include "PeerRequest.pb.h"  // IWYU pragma: export
#include "Purse.pb.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace protobuf_PeerObject_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsPeerObjectImpl();
void InitDefaultsPeerObject();
inline void InitDefaults() {
  InitDefaultsPeerObject();
}
}  // namespace protobuf_PeerObject_2eproto
namespace opentxs {
namespace proto {
class PeerObject;
class PeerObjectDefaultTypeInternal;
extern PeerObjectDefaultTypeInternal _PeerObject_default_instance_;
}  // namespace proto
}  // namespace opentxs
namespace opentxs {
namespace proto {

// ===================================================================

class PeerObject : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:opentxs.proto.PeerObject) */ {
 public:
  PeerObject();
  virtual ~PeerObject();

  PeerObject(const PeerObject& from);

  inline PeerObject& operator=(const PeerObject& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PeerObject(PeerObject&& from) noexcept
    : PeerObject() {
    *this = ::std::move(from);
  }

  inline PeerObject& operator=(PeerObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PeerObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PeerObject* internal_default_instance() {
    return reinterpret_cast<const PeerObject*>(
               &_PeerObject_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(PeerObject* other);
  friend void swap(PeerObject& a, PeerObject& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PeerObject* New() const PROTOBUF_FINAL { return New(NULL); }

  PeerObject* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const PeerObject& from);
  void MergeFrom(const PeerObject& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PeerObject* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string otmessage = 3;
  bool has_otmessage() const;
  void clear_otmessage();
  static const int kOtmessageFieldNumber = 3;
  const ::std::string& otmessage() const;
  void set_otmessage(const ::std::string& value);
  #if LANG_CXX11
  void set_otmessage(::std::string&& value);
  #endif
  void set_otmessage(const char* value);
  void set_otmessage(const char* value, size_t size);
  ::std::string* mutable_otmessage();
  ::std::string* release_otmessage();
  void set_allocated_otmessage(::std::string* otmessage);

  // optional string otpayment = 7;
  bool has_otpayment() const;
  void clear_otpayment();
  static const int kOtpaymentFieldNumber = 7;
  const ::std::string& otpayment() const;
  void set_otpayment(const ::std::string& value);
  #if LANG_CXX11
  void set_otpayment(::std::string&& value);
  #endif
  void set_otpayment(const char* value);
  void set_otpayment(const char* value, size_t size);
  ::std::string* mutable_otpayment();
  ::std::string* release_otpayment();
  void set_allocated_otpayment(::std::string* otpayment);

  // optional .opentxs.proto.PeerRequest otrequest = 4;
  bool has_otrequest() const;
  void clear_otrequest();
  static const int kOtrequestFieldNumber = 4;
  const ::opentxs::proto::PeerRequest& otrequest() const;
  ::opentxs::proto::PeerRequest* release_otrequest();
  ::opentxs::proto::PeerRequest* mutable_otrequest();
  void set_allocated_otrequest(::opentxs::proto::PeerRequest* otrequest);

  // optional .opentxs.proto.PeerReply otreply = 5;
  bool has_otreply() const;
  void clear_otreply();
  static const int kOtreplyFieldNumber = 5;
  const ::opentxs::proto::PeerReply& otreply() const;
  ::opentxs::proto::PeerReply* release_otreply();
  ::opentxs::proto::PeerReply* mutable_otreply();
  void set_allocated_otreply(::opentxs::proto::PeerReply* otreply);

  // optional .opentxs.proto.CredentialIndex nym = 6;
  bool has_nym() const;
  void clear_nym();
  static const int kNymFieldNumber = 6;
  const ::opentxs::proto::CredentialIndex& nym() const;
  ::opentxs::proto::CredentialIndex* release_nym();
  ::opentxs::proto::CredentialIndex* mutable_nym();
  void set_allocated_nym(::opentxs::proto::CredentialIndex* nym);

  // optional .opentxs.proto.Purse purse = 8;
  bool has_purse() const;
  void clear_purse();
  static const int kPurseFieldNumber = 8;
  const ::opentxs::proto::Purse& purse() const;
  ::opentxs::proto::Purse* release_purse();
  ::opentxs::proto::Purse* mutable_purse();
  void set_allocated_purse(::opentxs::proto::Purse* purse);

  // optional uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // optional .opentxs.proto.PeerObjectType type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::opentxs::proto::PeerObjectType type() const;
  void set_type(::opentxs::proto::PeerObjectType value);

  // @@protoc_insertion_point(class_scope:opentxs.proto.PeerObject)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_type();
  void clear_has_type();
  void set_has_otmessage();
  void clear_has_otmessage();
  void set_has_otrequest();
  void clear_has_otrequest();
  void set_has_otreply();
  void clear_has_otreply();
  void set_has_nym();
  void clear_has_nym();
  void set_has_otpayment();
  void clear_has_otpayment();
  void set_has_purse();
  void clear_has_purse();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr otmessage_;
  ::google::protobuf::internal::ArenaStringPtr otpayment_;
  ::opentxs::proto::PeerRequest* otrequest_;
  ::opentxs::proto::PeerReply* otreply_;
  ::opentxs::proto::CredentialIndex* nym_;
  ::opentxs::proto::Purse* purse_;
  ::google::protobuf::uint32 version_;
  int type_;
  friend struct ::protobuf_PeerObject_2eproto::TableStruct;
  friend void ::protobuf_PeerObject_2eproto::InitDefaultsPeerObjectImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PeerObject

// optional uint32 version = 1;
inline bool PeerObject::has_version() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PeerObject::set_has_version() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PeerObject::clear_has_version() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PeerObject::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 PeerObject::version() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.PeerObject.version)
  return version_;
}
inline void PeerObject::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.PeerObject.version)
}

// optional .opentxs.proto.PeerObjectType type = 2;
inline bool PeerObject::has_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PeerObject::set_has_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PeerObject::clear_has_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PeerObject::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::opentxs::proto::PeerObjectType PeerObject::type() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.PeerObject.type)
  return static_cast< ::opentxs::proto::PeerObjectType >(type_);
}
inline void PeerObject::set_type(::opentxs::proto::PeerObjectType value) {
  assert(::opentxs::proto::PeerObjectType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.PeerObject.type)
}

// optional string otmessage = 3;
inline bool PeerObject::has_otmessage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PeerObject::set_has_otmessage() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PeerObject::clear_has_otmessage() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PeerObject::clear_otmessage() {
  otmessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_otmessage();
}
inline const ::std::string& PeerObject::otmessage() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.PeerObject.otmessage)
  return otmessage_.GetNoArena();
}
inline void PeerObject::set_otmessage(const ::std::string& value) {
  set_has_otmessage();
  otmessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.PeerObject.otmessage)
}
#if LANG_CXX11
inline void PeerObject::set_otmessage(::std::string&& value) {
  set_has_otmessage();
  otmessage_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.PeerObject.otmessage)
}
#endif
inline void PeerObject::set_otmessage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_otmessage();
  otmessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.PeerObject.otmessage)
}
inline void PeerObject::set_otmessage(const char* value, size_t size) {
  set_has_otmessage();
  otmessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.PeerObject.otmessage)
}
inline ::std::string* PeerObject::mutable_otmessage() {
  set_has_otmessage();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.PeerObject.otmessage)
  return otmessage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerObject::release_otmessage() {
  // @@protoc_insertion_point(field_release:opentxs.proto.PeerObject.otmessage)
  clear_has_otmessage();
  return otmessage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerObject::set_allocated_otmessage(::std::string* otmessage) {
  if (otmessage != NULL) {
    set_has_otmessage();
  } else {
    clear_has_otmessage();
  }
  otmessage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), otmessage);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.PeerObject.otmessage)
}

// optional .opentxs.proto.PeerRequest otrequest = 4;
inline bool PeerObject::has_otrequest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PeerObject::set_has_otrequest() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PeerObject::clear_has_otrequest() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::opentxs::proto::PeerRequest& PeerObject::otrequest() const {
  const ::opentxs::proto::PeerRequest* p = otrequest_;
  // @@protoc_insertion_point(field_get:opentxs.proto.PeerObject.otrequest)
  return p != NULL ? *p : *reinterpret_cast<const ::opentxs::proto::PeerRequest*>(
      &::opentxs::proto::_PeerRequest_default_instance_);
}
inline ::opentxs::proto::PeerRequest* PeerObject::release_otrequest() {
  // @@protoc_insertion_point(field_release:opentxs.proto.PeerObject.otrequest)
  clear_has_otrequest();
  ::opentxs::proto::PeerRequest* temp = otrequest_;
  otrequest_ = NULL;
  return temp;
}
inline ::opentxs::proto::PeerRequest* PeerObject::mutable_otrequest() {
  set_has_otrequest();
  if (otrequest_ == NULL) {
    otrequest_ = new ::opentxs::proto::PeerRequest;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.proto.PeerObject.otrequest)
  return otrequest_;
}
inline void PeerObject::set_allocated_otrequest(::opentxs::proto::PeerRequest* otrequest) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(otrequest_);
  }
  if (otrequest) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      otrequest = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, otrequest, submessage_arena);
    }
    set_has_otrequest();
  } else {
    clear_has_otrequest();
  }
  otrequest_ = otrequest;
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.PeerObject.otrequest)
}

// optional .opentxs.proto.PeerReply otreply = 5;
inline bool PeerObject::has_otreply() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PeerObject::set_has_otreply() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PeerObject::clear_has_otreply() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::opentxs::proto::PeerReply& PeerObject::otreply() const {
  const ::opentxs::proto::PeerReply* p = otreply_;
  // @@protoc_insertion_point(field_get:opentxs.proto.PeerObject.otreply)
  return p != NULL ? *p : *reinterpret_cast<const ::opentxs::proto::PeerReply*>(
      &::opentxs::proto::_PeerReply_default_instance_);
}
inline ::opentxs::proto::PeerReply* PeerObject::release_otreply() {
  // @@protoc_insertion_point(field_release:opentxs.proto.PeerObject.otreply)
  clear_has_otreply();
  ::opentxs::proto::PeerReply* temp = otreply_;
  otreply_ = NULL;
  return temp;
}
inline ::opentxs::proto::PeerReply* PeerObject::mutable_otreply() {
  set_has_otreply();
  if (otreply_ == NULL) {
    otreply_ = new ::opentxs::proto::PeerReply;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.proto.PeerObject.otreply)
  return otreply_;
}
inline void PeerObject::set_allocated_otreply(::opentxs::proto::PeerReply* otreply) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(otreply_);
  }
  if (otreply) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      otreply = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, otreply, submessage_arena);
    }
    set_has_otreply();
  } else {
    clear_has_otreply();
  }
  otreply_ = otreply;
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.PeerObject.otreply)
}

// optional .opentxs.proto.CredentialIndex nym = 6;
inline bool PeerObject::has_nym() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PeerObject::set_has_nym() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PeerObject::clear_has_nym() {
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::opentxs::proto::CredentialIndex& PeerObject::nym() const {
  const ::opentxs::proto::CredentialIndex* p = nym_;
  // @@protoc_insertion_point(field_get:opentxs.proto.PeerObject.nym)
  return p != NULL ? *p : *reinterpret_cast<const ::opentxs::proto::CredentialIndex*>(
      &::opentxs::proto::_CredentialIndex_default_instance_);
}
inline ::opentxs::proto::CredentialIndex* PeerObject::release_nym() {
  // @@protoc_insertion_point(field_release:opentxs.proto.PeerObject.nym)
  clear_has_nym();
  ::opentxs::proto::CredentialIndex* temp = nym_;
  nym_ = NULL;
  return temp;
}
inline ::opentxs::proto::CredentialIndex* PeerObject::mutable_nym() {
  set_has_nym();
  if (nym_ == NULL) {
    nym_ = new ::opentxs::proto::CredentialIndex;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.proto.PeerObject.nym)
  return nym_;
}
inline void PeerObject::set_allocated_nym(::opentxs::proto::CredentialIndex* nym) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(nym_);
  }
  if (nym) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      nym = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, nym, submessage_arena);
    }
    set_has_nym();
  } else {
    clear_has_nym();
  }
  nym_ = nym;
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.PeerObject.nym)
}

// optional string otpayment = 7;
inline bool PeerObject::has_otpayment() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PeerObject::set_has_otpayment() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PeerObject::clear_has_otpayment() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PeerObject::clear_otpayment() {
  otpayment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_otpayment();
}
inline const ::std::string& PeerObject::otpayment() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.PeerObject.otpayment)
  return otpayment_.GetNoArena();
}
inline void PeerObject::set_otpayment(const ::std::string& value) {
  set_has_otpayment();
  otpayment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.PeerObject.otpayment)
}
#if LANG_CXX11
inline void PeerObject::set_otpayment(::std::string&& value) {
  set_has_otpayment();
  otpayment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.PeerObject.otpayment)
}
#endif
inline void PeerObject::set_otpayment(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_otpayment();
  otpayment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.PeerObject.otpayment)
}
inline void PeerObject::set_otpayment(const char* value, size_t size) {
  set_has_otpayment();
  otpayment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.PeerObject.otpayment)
}
inline ::std::string* PeerObject::mutable_otpayment() {
  set_has_otpayment();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.PeerObject.otpayment)
  return otpayment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerObject::release_otpayment() {
  // @@protoc_insertion_point(field_release:opentxs.proto.PeerObject.otpayment)
  clear_has_otpayment();
  return otpayment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerObject::set_allocated_otpayment(::std::string* otpayment) {
  if (otpayment != NULL) {
    set_has_otpayment();
  } else {
    clear_has_otpayment();
  }
  otpayment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), otpayment);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.PeerObject.otpayment)
}

// optional .opentxs.proto.Purse purse = 8;
inline bool PeerObject::has_purse() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PeerObject::set_has_purse() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PeerObject::clear_has_purse() {
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::opentxs::proto::Purse& PeerObject::purse() const {
  const ::opentxs::proto::Purse* p = purse_;
  // @@protoc_insertion_point(field_get:opentxs.proto.PeerObject.purse)
  return p != NULL ? *p : *reinterpret_cast<const ::opentxs::proto::Purse*>(
      &::opentxs::proto::_Purse_default_instance_);
}
inline ::opentxs::proto::Purse* PeerObject::release_purse() {
  // @@protoc_insertion_point(field_release:opentxs.proto.PeerObject.purse)
  clear_has_purse();
  ::opentxs::proto::Purse* temp = purse_;
  purse_ = NULL;
  return temp;
}
inline ::opentxs::proto::Purse* PeerObject::mutable_purse() {
  set_has_purse();
  if (purse_ == NULL) {
    purse_ = new ::opentxs::proto::Purse;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.proto.PeerObject.purse)
  return purse_;
}
inline void PeerObject::set_allocated_purse(::opentxs::proto::Purse* purse) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(purse_);
  }
  if (purse) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      purse = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, purse, submessage_arena);
    }
    set_has_purse();
  } else {
    clear_has_purse();
  }
  purse_ = purse;
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.PeerObject.purse)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace opentxs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PeerObject_2eproto__INCLUDED
