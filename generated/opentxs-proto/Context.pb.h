// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Context.proto

#ifndef PROTOBUF_Context_2eproto__INCLUDED
#define PROTOBUF_Context_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "ClientContext.pb.h"  // IWYU pragma: export
#include "ConsensusEnums.pb.h"  // IWYU pragma: export
#include "ServerContext.pb.h"  // IWYU pragma: export
#include "Signature.pb.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace protobuf_Context_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsContextImpl();
void InitDefaultsContext();
inline void InitDefaults() {
  InitDefaultsContext();
}
}  // namespace protobuf_Context_2eproto
namespace opentxs {
namespace proto {
class Context;
class ContextDefaultTypeInternal;
extern ContextDefaultTypeInternal _Context_default_instance_;
}  // namespace proto
}  // namespace opentxs
namespace opentxs {
namespace proto {

// ===================================================================

class Context : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:opentxs.proto.Context) */ {
 public:
  Context();
  virtual ~Context();

  Context(const Context& from);

  inline Context& operator=(const Context& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Context(Context&& from) noexcept
    : Context() {
    *this = ::std::move(from);
  }

  inline Context& operator=(Context&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Context& default_instance();

  enum TypedataCase {
    kServercontext = 11,
    kClientcontext = 12,
    TYPEDATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Context* internal_default_instance() {
    return reinterpret_cast<const Context*>(
               &_Context_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Context* other);
  friend void swap(Context& a, Context& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Context* New() const PROTOBUF_FINAL { return New(NULL); }

  Context* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Context& from);
  void MergeFrom(const Context& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Context* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 acknowledgedrequestnumber = 8;
  int acknowledgedrequestnumber_size() const;
  void clear_acknowledgedrequestnumber();
  static const int kAcknowledgedrequestnumberFieldNumber = 8;
  ::google::protobuf::uint64 acknowledgedrequestnumber(int index) const;
  void set_acknowledgedrequestnumber(int index, ::google::protobuf::uint64 value);
  void add_acknowledgedrequestnumber(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      acknowledgedrequestnumber() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_acknowledgedrequestnumber();

  // repeated uint64 availabletransactionnumber = 9;
  int availabletransactionnumber_size() const;
  void clear_availabletransactionnumber();
  static const int kAvailabletransactionnumberFieldNumber = 9;
  ::google::protobuf::uint64 availabletransactionnumber(int index) const;
  void set_availabletransactionnumber(int index, ::google::protobuf::uint64 value);
  void add_availabletransactionnumber(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      availabletransactionnumber() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_availabletransactionnumber();

  // repeated uint64 issuedtransactionnumber = 10;
  int issuedtransactionnumber_size() const;
  void clear_issuedtransactionnumber();
  static const int kIssuedtransactionnumberFieldNumber = 10;
  ::google::protobuf::uint64 issuedtransactionnumber(int index) const;
  void set_issuedtransactionnumber(int index, ::google::protobuf::uint64 value);
  void add_issuedtransactionnumber(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      issuedtransactionnumber() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_issuedtransactionnumber();

  // optional string localnym = 3;
  bool has_localnym() const;
  void clear_localnym();
  static const int kLocalnymFieldNumber = 3;
  const ::std::string& localnym() const;
  void set_localnym(const ::std::string& value);
  #if LANG_CXX11
  void set_localnym(::std::string&& value);
  #endif
  void set_localnym(const char* value);
  void set_localnym(const char* value, size_t size);
  ::std::string* mutable_localnym();
  ::std::string* release_localnym();
  void set_allocated_localnym(::std::string* localnym);

  // optional string remotenym = 4;
  bool has_remotenym() const;
  void clear_remotenym();
  static const int kRemotenymFieldNumber = 4;
  const ::std::string& remotenym() const;
  void set_remotenym(const ::std::string& value);
  #if LANG_CXX11
  void set_remotenym(::std::string&& value);
  #endif
  void set_remotenym(const char* value);
  void set_remotenym(const char* value, size_t size);
  ::std::string* mutable_remotenym();
  ::std::string* release_remotenym();
  void set_allocated_remotenym(::std::string* remotenym);

  // optional string localnymboxhash = 5;
  bool has_localnymboxhash() const;
  void clear_localnymboxhash();
  static const int kLocalnymboxhashFieldNumber = 5;
  const ::std::string& localnymboxhash() const;
  void set_localnymboxhash(const ::std::string& value);
  #if LANG_CXX11
  void set_localnymboxhash(::std::string&& value);
  #endif
  void set_localnymboxhash(const char* value);
  void set_localnymboxhash(const char* value, size_t size);
  ::std::string* mutable_localnymboxhash();
  ::std::string* release_localnymboxhash();
  void set_allocated_localnymboxhash(::std::string* localnymboxhash);

  // optional string remotenymboxhash = 6;
  bool has_remotenymboxhash() const;
  void clear_remotenymboxhash();
  static const int kRemotenymboxhashFieldNumber = 6;
  const ::std::string& remotenymboxhash() const;
  void set_remotenymboxhash(const ::std::string& value);
  #if LANG_CXX11
  void set_remotenymboxhash(::std::string&& value);
  #endif
  void set_remotenymboxhash(const char* value);
  void set_remotenymboxhash(const char* value, size_t size);
  ::std::string* mutable_remotenymboxhash();
  ::std::string* release_remotenymboxhash();
  void set_allocated_remotenymboxhash(::std::string* remotenymboxhash);

  // optional .opentxs.proto.Signature signature = 15;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 15;
  const ::opentxs::proto::Signature& signature() const;
  ::opentxs::proto::Signature* release_signature();
  ::opentxs::proto::Signature* mutable_signature();
  void set_allocated_signature(::opentxs::proto::Signature* signature);

  // optional uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // optional .opentxs.proto.ConsensusType type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::opentxs::proto::ConsensusType type() const;
  void set_type(::opentxs::proto::ConsensusType value);

  // optional uint64 requestnumber = 7;
  bool has_requestnumber() const;
  void clear_requestnumber();
  static const int kRequestnumberFieldNumber = 7;
  ::google::protobuf::uint64 requestnumber() const;
  void set_requestnumber(::google::protobuf::uint64 value);

  // optional .opentxs.proto.ServerContext servercontext = 11;
  bool has_servercontext() const;
  void clear_servercontext();
  static const int kServercontextFieldNumber = 11;
  const ::opentxs::proto::ServerContext& servercontext() const;
  ::opentxs::proto::ServerContext* release_servercontext();
  ::opentxs::proto::ServerContext* mutable_servercontext();
  void set_allocated_servercontext(::opentxs::proto::ServerContext* servercontext);

  // optional .opentxs.proto.ClientContext clientcontext = 12;
  bool has_clientcontext() const;
  void clear_clientcontext();
  static const int kClientcontextFieldNumber = 12;
  const ::opentxs::proto::ClientContext& clientcontext() const;
  ::opentxs::proto::ClientContext* release_clientcontext();
  ::opentxs::proto::ClientContext* mutable_clientcontext();
  void set_allocated_clientcontext(::opentxs::proto::ClientContext* clientcontext);

  TypedataCase typedata_case() const;
  // @@protoc_insertion_point(class_scope:opentxs.proto.Context)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_type();
  void clear_has_type();
  void set_has_localnym();
  void clear_has_localnym();
  void set_has_remotenym();
  void clear_has_remotenym();
  void set_has_localnymboxhash();
  void clear_has_localnymboxhash();
  void set_has_remotenymboxhash();
  void clear_has_remotenymboxhash();
  void set_has_requestnumber();
  void clear_has_requestnumber();
  void set_has_servercontext();
  void set_has_clientcontext();
  void set_has_signature();
  void clear_has_signature();

  inline bool has_typedata() const;
  void clear_typedata();
  inline void clear_has_typedata();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > acknowledgedrequestnumber_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > availabletransactionnumber_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > issuedtransactionnumber_;
  ::google::protobuf::internal::ArenaStringPtr localnym_;
  ::google::protobuf::internal::ArenaStringPtr remotenym_;
  ::google::protobuf::internal::ArenaStringPtr localnymboxhash_;
  ::google::protobuf::internal::ArenaStringPtr remotenymboxhash_;
  ::opentxs::proto::Signature* signature_;
  ::google::protobuf::uint32 version_;
  int type_;
  ::google::protobuf::uint64 requestnumber_;
  union TypedataUnion {
    TypedataUnion() {}
    ::opentxs::proto::ServerContext* servercontext_;
    ::opentxs::proto::ClientContext* clientcontext_;
  } typedata_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_Context_2eproto::TableStruct;
  friend void ::protobuf_Context_2eproto::InitDefaultsContextImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Context

// optional uint32 version = 1;
inline bool Context::has_version() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Context::set_has_version() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Context::clear_has_version() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Context::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 Context::version() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.Context.version)
  return version_;
}
inline void Context::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.Context.version)
}

// optional .opentxs.proto.ConsensusType type = 2;
inline bool Context::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Context::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Context::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Context::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::opentxs::proto::ConsensusType Context::type() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.Context.type)
  return static_cast< ::opentxs::proto::ConsensusType >(type_);
}
inline void Context::set_type(::opentxs::proto::ConsensusType value) {
  assert(::opentxs::proto::ConsensusType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.Context.type)
}

// optional string localnym = 3;
inline bool Context::has_localnym() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Context::set_has_localnym() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Context::clear_has_localnym() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Context::clear_localnym() {
  localnym_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_localnym();
}
inline const ::std::string& Context::localnym() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.Context.localnym)
  return localnym_.GetNoArena();
}
inline void Context::set_localnym(const ::std::string& value) {
  set_has_localnym();
  localnym_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.Context.localnym)
}
#if LANG_CXX11
inline void Context::set_localnym(::std::string&& value) {
  set_has_localnym();
  localnym_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.Context.localnym)
}
#endif
inline void Context::set_localnym(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_localnym();
  localnym_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.Context.localnym)
}
inline void Context::set_localnym(const char* value, size_t size) {
  set_has_localnym();
  localnym_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.Context.localnym)
}
inline ::std::string* Context::mutable_localnym() {
  set_has_localnym();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.Context.localnym)
  return localnym_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Context::release_localnym() {
  // @@protoc_insertion_point(field_release:opentxs.proto.Context.localnym)
  clear_has_localnym();
  return localnym_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Context::set_allocated_localnym(::std::string* localnym) {
  if (localnym != NULL) {
    set_has_localnym();
  } else {
    clear_has_localnym();
  }
  localnym_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), localnym);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.Context.localnym)
}

// optional string remotenym = 4;
inline bool Context::has_remotenym() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Context::set_has_remotenym() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Context::clear_has_remotenym() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Context::clear_remotenym() {
  remotenym_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_remotenym();
}
inline const ::std::string& Context::remotenym() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.Context.remotenym)
  return remotenym_.GetNoArena();
}
inline void Context::set_remotenym(const ::std::string& value) {
  set_has_remotenym();
  remotenym_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.Context.remotenym)
}
#if LANG_CXX11
inline void Context::set_remotenym(::std::string&& value) {
  set_has_remotenym();
  remotenym_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.Context.remotenym)
}
#endif
inline void Context::set_remotenym(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_remotenym();
  remotenym_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.Context.remotenym)
}
inline void Context::set_remotenym(const char* value, size_t size) {
  set_has_remotenym();
  remotenym_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.Context.remotenym)
}
inline ::std::string* Context::mutable_remotenym() {
  set_has_remotenym();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.Context.remotenym)
  return remotenym_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Context::release_remotenym() {
  // @@protoc_insertion_point(field_release:opentxs.proto.Context.remotenym)
  clear_has_remotenym();
  return remotenym_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Context::set_allocated_remotenym(::std::string* remotenym) {
  if (remotenym != NULL) {
    set_has_remotenym();
  } else {
    clear_has_remotenym();
  }
  remotenym_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remotenym);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.Context.remotenym)
}

// optional string localnymboxhash = 5;
inline bool Context::has_localnymboxhash() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Context::set_has_localnymboxhash() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Context::clear_has_localnymboxhash() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Context::clear_localnymboxhash() {
  localnymboxhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_localnymboxhash();
}
inline const ::std::string& Context::localnymboxhash() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.Context.localnymboxhash)
  return localnymboxhash_.GetNoArena();
}
inline void Context::set_localnymboxhash(const ::std::string& value) {
  set_has_localnymboxhash();
  localnymboxhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.Context.localnymboxhash)
}
#if LANG_CXX11
inline void Context::set_localnymboxhash(::std::string&& value) {
  set_has_localnymboxhash();
  localnymboxhash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.Context.localnymboxhash)
}
#endif
inline void Context::set_localnymboxhash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_localnymboxhash();
  localnymboxhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.Context.localnymboxhash)
}
inline void Context::set_localnymboxhash(const char* value, size_t size) {
  set_has_localnymboxhash();
  localnymboxhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.Context.localnymboxhash)
}
inline ::std::string* Context::mutable_localnymboxhash() {
  set_has_localnymboxhash();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.Context.localnymboxhash)
  return localnymboxhash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Context::release_localnymboxhash() {
  // @@protoc_insertion_point(field_release:opentxs.proto.Context.localnymboxhash)
  clear_has_localnymboxhash();
  return localnymboxhash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Context::set_allocated_localnymboxhash(::std::string* localnymboxhash) {
  if (localnymboxhash != NULL) {
    set_has_localnymboxhash();
  } else {
    clear_has_localnymboxhash();
  }
  localnymboxhash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), localnymboxhash);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.Context.localnymboxhash)
}

// optional string remotenymboxhash = 6;
inline bool Context::has_remotenymboxhash() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Context::set_has_remotenymboxhash() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Context::clear_has_remotenymboxhash() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Context::clear_remotenymboxhash() {
  remotenymboxhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_remotenymboxhash();
}
inline const ::std::string& Context::remotenymboxhash() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.Context.remotenymboxhash)
  return remotenymboxhash_.GetNoArena();
}
inline void Context::set_remotenymboxhash(const ::std::string& value) {
  set_has_remotenymboxhash();
  remotenymboxhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.Context.remotenymboxhash)
}
#if LANG_CXX11
inline void Context::set_remotenymboxhash(::std::string&& value) {
  set_has_remotenymboxhash();
  remotenymboxhash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.Context.remotenymboxhash)
}
#endif
inline void Context::set_remotenymboxhash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_remotenymboxhash();
  remotenymboxhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.Context.remotenymboxhash)
}
inline void Context::set_remotenymboxhash(const char* value, size_t size) {
  set_has_remotenymboxhash();
  remotenymboxhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.Context.remotenymboxhash)
}
inline ::std::string* Context::mutable_remotenymboxhash() {
  set_has_remotenymboxhash();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.Context.remotenymboxhash)
  return remotenymboxhash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Context::release_remotenymboxhash() {
  // @@protoc_insertion_point(field_release:opentxs.proto.Context.remotenymboxhash)
  clear_has_remotenymboxhash();
  return remotenymboxhash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Context::set_allocated_remotenymboxhash(::std::string* remotenymboxhash) {
  if (remotenymboxhash != NULL) {
    set_has_remotenymboxhash();
  } else {
    clear_has_remotenymboxhash();
  }
  remotenymboxhash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remotenymboxhash);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.Context.remotenymboxhash)
}

// optional uint64 requestnumber = 7;
inline bool Context::has_requestnumber() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Context::set_has_requestnumber() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Context::clear_has_requestnumber() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Context::clear_requestnumber() {
  requestnumber_ = GOOGLE_ULONGLONG(0);
  clear_has_requestnumber();
}
inline ::google::protobuf::uint64 Context::requestnumber() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.Context.requestnumber)
  return requestnumber_;
}
inline void Context::set_requestnumber(::google::protobuf::uint64 value) {
  set_has_requestnumber();
  requestnumber_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.Context.requestnumber)
}

// repeated uint64 acknowledgedrequestnumber = 8;
inline int Context::acknowledgedrequestnumber_size() const {
  return acknowledgedrequestnumber_.size();
}
inline void Context::clear_acknowledgedrequestnumber() {
  acknowledgedrequestnumber_.Clear();
}
inline ::google::protobuf::uint64 Context::acknowledgedrequestnumber(int index) const {
  // @@protoc_insertion_point(field_get:opentxs.proto.Context.acknowledgedrequestnumber)
  return acknowledgedrequestnumber_.Get(index);
}
inline void Context::set_acknowledgedrequestnumber(int index, ::google::protobuf::uint64 value) {
  acknowledgedrequestnumber_.Set(index, value);
  // @@protoc_insertion_point(field_set:opentxs.proto.Context.acknowledgedrequestnumber)
}
inline void Context::add_acknowledgedrequestnumber(::google::protobuf::uint64 value) {
  acknowledgedrequestnumber_.Add(value);
  // @@protoc_insertion_point(field_add:opentxs.proto.Context.acknowledgedrequestnumber)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Context::acknowledgedrequestnumber() const {
  // @@protoc_insertion_point(field_list:opentxs.proto.Context.acknowledgedrequestnumber)
  return acknowledgedrequestnumber_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Context::mutable_acknowledgedrequestnumber() {
  // @@protoc_insertion_point(field_mutable_list:opentxs.proto.Context.acknowledgedrequestnumber)
  return &acknowledgedrequestnumber_;
}

// repeated uint64 availabletransactionnumber = 9;
inline int Context::availabletransactionnumber_size() const {
  return availabletransactionnumber_.size();
}
inline void Context::clear_availabletransactionnumber() {
  availabletransactionnumber_.Clear();
}
inline ::google::protobuf::uint64 Context::availabletransactionnumber(int index) const {
  // @@protoc_insertion_point(field_get:opentxs.proto.Context.availabletransactionnumber)
  return availabletransactionnumber_.Get(index);
}
inline void Context::set_availabletransactionnumber(int index, ::google::protobuf::uint64 value) {
  availabletransactionnumber_.Set(index, value);
  // @@protoc_insertion_point(field_set:opentxs.proto.Context.availabletransactionnumber)
}
inline void Context::add_availabletransactionnumber(::google::protobuf::uint64 value) {
  availabletransactionnumber_.Add(value);
  // @@protoc_insertion_point(field_add:opentxs.proto.Context.availabletransactionnumber)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Context::availabletransactionnumber() const {
  // @@protoc_insertion_point(field_list:opentxs.proto.Context.availabletransactionnumber)
  return availabletransactionnumber_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Context::mutable_availabletransactionnumber() {
  // @@protoc_insertion_point(field_mutable_list:opentxs.proto.Context.availabletransactionnumber)
  return &availabletransactionnumber_;
}

// repeated uint64 issuedtransactionnumber = 10;
inline int Context::issuedtransactionnumber_size() const {
  return issuedtransactionnumber_.size();
}
inline void Context::clear_issuedtransactionnumber() {
  issuedtransactionnumber_.Clear();
}
inline ::google::protobuf::uint64 Context::issuedtransactionnumber(int index) const {
  // @@protoc_insertion_point(field_get:opentxs.proto.Context.issuedtransactionnumber)
  return issuedtransactionnumber_.Get(index);
}
inline void Context::set_issuedtransactionnumber(int index, ::google::protobuf::uint64 value) {
  issuedtransactionnumber_.Set(index, value);
  // @@protoc_insertion_point(field_set:opentxs.proto.Context.issuedtransactionnumber)
}
inline void Context::add_issuedtransactionnumber(::google::protobuf::uint64 value) {
  issuedtransactionnumber_.Add(value);
  // @@protoc_insertion_point(field_add:opentxs.proto.Context.issuedtransactionnumber)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Context::issuedtransactionnumber() const {
  // @@protoc_insertion_point(field_list:opentxs.proto.Context.issuedtransactionnumber)
  return issuedtransactionnumber_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Context::mutable_issuedtransactionnumber() {
  // @@protoc_insertion_point(field_mutable_list:opentxs.proto.Context.issuedtransactionnumber)
  return &issuedtransactionnumber_;
}

// optional .opentxs.proto.ServerContext servercontext = 11;
inline bool Context::has_servercontext() const {
  return typedata_case() == kServercontext;
}
inline void Context::set_has_servercontext() {
  _oneof_case_[0] = kServercontext;
}
inline ::opentxs::proto::ServerContext* Context::release_servercontext() {
  // @@protoc_insertion_point(field_release:opentxs.proto.Context.servercontext)
  if (has_servercontext()) {
    clear_has_typedata();
      ::opentxs::proto::ServerContext* temp = typedata_.servercontext_;
    typedata_.servercontext_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::opentxs::proto::ServerContext& Context::servercontext() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.Context.servercontext)
  return has_servercontext()
      ? *typedata_.servercontext_
      : *reinterpret_cast< ::opentxs::proto::ServerContext*>(&::opentxs::proto::_ServerContext_default_instance_);
}
inline ::opentxs::proto::ServerContext* Context::mutable_servercontext() {
  if (!has_servercontext()) {
    clear_typedata();
    set_has_servercontext();
    typedata_.servercontext_ = new ::opentxs::proto::ServerContext;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.proto.Context.servercontext)
  return typedata_.servercontext_;
}

// optional .opentxs.proto.ClientContext clientcontext = 12;
inline bool Context::has_clientcontext() const {
  return typedata_case() == kClientcontext;
}
inline void Context::set_has_clientcontext() {
  _oneof_case_[0] = kClientcontext;
}
inline ::opentxs::proto::ClientContext* Context::release_clientcontext() {
  // @@protoc_insertion_point(field_release:opentxs.proto.Context.clientcontext)
  if (has_clientcontext()) {
    clear_has_typedata();
      ::opentxs::proto::ClientContext* temp = typedata_.clientcontext_;
    typedata_.clientcontext_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::opentxs::proto::ClientContext& Context::clientcontext() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.Context.clientcontext)
  return has_clientcontext()
      ? *typedata_.clientcontext_
      : *reinterpret_cast< ::opentxs::proto::ClientContext*>(&::opentxs::proto::_ClientContext_default_instance_);
}
inline ::opentxs::proto::ClientContext* Context::mutable_clientcontext() {
  if (!has_clientcontext()) {
    clear_typedata();
    set_has_clientcontext();
    typedata_.clientcontext_ = new ::opentxs::proto::ClientContext;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.proto.Context.clientcontext)
  return typedata_.clientcontext_;
}

// optional .opentxs.proto.Signature signature = 15;
inline bool Context::has_signature() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Context::set_has_signature() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Context::clear_has_signature() {
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::opentxs::proto::Signature& Context::signature() const {
  const ::opentxs::proto::Signature* p = signature_;
  // @@protoc_insertion_point(field_get:opentxs.proto.Context.signature)
  return p != NULL ? *p : *reinterpret_cast<const ::opentxs::proto::Signature*>(
      &::opentxs::proto::_Signature_default_instance_);
}
inline ::opentxs::proto::Signature* Context::release_signature() {
  // @@protoc_insertion_point(field_release:opentxs.proto.Context.signature)
  clear_has_signature();
  ::opentxs::proto::Signature* temp = signature_;
  signature_ = NULL;
  return temp;
}
inline ::opentxs::proto::Signature* Context::mutable_signature() {
  set_has_signature();
  if (signature_ == NULL) {
    signature_ = new ::opentxs::proto::Signature;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.proto.Context.signature)
  return signature_;
}
inline void Context::set_allocated_signature(::opentxs::proto::Signature* signature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(signature_);
  }
  if (signature) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      signature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, signature, submessage_arena);
    }
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_ = signature;
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.Context.signature)
}

inline bool Context::has_typedata() const {
  return typedata_case() != TYPEDATA_NOT_SET;
}
inline void Context::clear_has_typedata() {
  _oneof_case_[0] = TYPEDATA_NOT_SET;
}
inline Context::TypedataCase Context::typedata_case() const {
  return Context::TypedataCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace opentxs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Context_2eproto__INCLUDED
