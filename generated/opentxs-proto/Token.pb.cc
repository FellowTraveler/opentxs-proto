// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Token.proto

#include "Token.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace opentxs {
namespace proto {
class TokenDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Token>
      _instance;
  const ::opentxs::proto::LucreTokenData* lucre_;
} _Token_default_instance_;
}  // namespace proto
}  // namespace opentxs
namespace protobuf_Token_2eproto {
void InitDefaultsTokenImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_LucreTokenData_2eproto::InitDefaultsLucreTokenData();
  {
    void* ptr = &::opentxs::proto::_Token_default_instance_;
    new (ptr) ::opentxs::proto::Token();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opentxs::proto::Token::InitAsDefaultInstance();
}

void InitDefaultsToken() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTokenImpl);
}

}  // namespace protobuf_Token_2eproto
namespace opentxs {
namespace proto {

// ===================================================================

void Token::InitAsDefaultInstance() {
}
void Token::set_allocated_lucre(::opentxs::proto::LucreTokenData* lucre) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_algorithm();
  if (lucre) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lucre = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lucre, submessage_arena);
    }
    set_has_lucre();
    algorithm_.lucre_ = lucre;
  }
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.Token.lucre)
}
void Token::clear_lucre() {
  if (has_lucre()) {
    delete algorithm_.lucre_;
    clear_has_algorithm();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Token::kVersionFieldNumber;
const int Token::kTypeFieldNumber;
const int Token::kStateFieldNumber;
const int Token::kNotaryFieldNumber;
const int Token::kMintFieldNumber;
const int Token::kSeriesFieldNumber;
const int Token::kDenominationFieldNumber;
const int Token::kValidfromFieldNumber;
const int Token::kValidtoFieldNumber;
const int Token::kLucreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Token::Token()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Token_2eproto::InitDefaultsToken();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:opentxs.proto.Token)
}
Token::Token(const Token& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  notary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_notary()) {
    notary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.notary_);
  }
  mint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mint()) {
    mint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mint_);
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&version_)) + sizeof(state_));
  clear_has_algorithm();
  switch (from.algorithm_case()) {
    case kLucre: {
      mutable_lucre()->::opentxs::proto::LucreTokenData::MergeFrom(from.lucre());
      break;
    }
    case ALGORITHM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:opentxs.proto.Token)
}

void Token::SharedCtor() {
  _cached_size_ = 0;
  notary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&version_)) + sizeof(state_));
  clear_has_algorithm();
}

Token::~Token() {
  // @@protoc_insertion_point(destructor:opentxs.proto.Token)
  SharedDtor();
}

void Token::SharedDtor() {
  notary_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mint_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_algorithm()) {
    clear_algorithm();
  }
}

void Token::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Token& Token::default_instance() {
  ::protobuf_Token_2eproto::InitDefaultsToken();
  return *internal_default_instance();
}

Token* Token::New(::google::protobuf::Arena* arena) const {
  Token* n = new Token;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Token::clear_algorithm() {
// @@protoc_insertion_point(one_of_clear_start:opentxs.proto.Token)
  switch (algorithm_case()) {
    case kLucre: {
      delete algorithm_.lucre_;
      break;
    }
    case ALGORITHM_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ALGORITHM_NOT_SET;
}


void Token::Clear() {
// @@protoc_insertion_point(message_clear_start:opentxs.proto.Token)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!notary_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*notary_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!mint_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mint_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&validto_) -
        reinterpret_cast<char*>(&version_)) + sizeof(validto_));
  }
  state_ = 0;
  clear_algorithm();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Token::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:opentxs.proto.Token)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.CashType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::opentxs::proto::CashType_IsValid(value)) {
            set_type(static_cast< ::opentxs::proto::CashType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.TokenState state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::opentxs::proto::TokenState_IsValid(value)) {
            set_state(static_cast< ::opentxs::proto::TokenState >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string notary = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mint = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 series = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_series();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &series_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 denomination = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_denomination();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &denomination_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 validfrom = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_validfrom();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &validfrom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 validto = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_validto();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &validto_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.LucreTokenData lucre = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lucre()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opentxs.proto.Token)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opentxs.proto.Token)
  return false;
#undef DO_
}

void Token::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opentxs.proto.Token)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional .opentxs.proto.CashType type = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .opentxs.proto.TokenState state = 3;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->state(), output);
  }

  // optional string notary = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->notary(), output);
  }

  // optional string mint = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->mint(), output);
  }

  // optional uint64 series = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->series(), output);
  }

  // optional uint64 denomination = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->denomination(), output);
  }

  // optional int64 validfrom = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->validfrom(), output);
  }

  // optional int64 validto = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->validto(), output);
  }

  // optional .opentxs.proto.LucreTokenData lucre = 10;
  if (has_lucre()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, *algorithm_.lucre_, output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:opentxs.proto.Token)
}

size_t Token::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentxs.proto.Token)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional string notary = 4;
    if (has_notary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notary());
    }

    // optional string mint = 5;
    if (has_mint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mint());
    }

    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional .opentxs.proto.CashType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 series = 6;
    if (has_series()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->series());
    }

    // optional uint64 denomination = 7;
    if (has_denomination()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->denomination());
    }

    // optional int64 validfrom = 8;
    if (has_validfrom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->validfrom());
    }

    // optional int64 validto = 9;
    if (has_validto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->validto());
    }

  }
  // optional .opentxs.proto.TokenState state = 3;
  if (has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  switch (algorithm_case()) {
    // optional .opentxs.proto.LucreTokenData lucre = 10;
    case kLucre: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *algorithm_.lucre_);
      break;
    }
    case ALGORITHM_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Token::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Token*>(&from));
}

void Token::MergeFrom(const Token& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentxs.proto.Token)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_notary();
      notary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.notary_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_mint();
      mint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mint_);
    }
    if (cached_has_bits & 0x00000004u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      series_ = from.series_;
    }
    if (cached_has_bits & 0x00000020u) {
      denomination_ = from.denomination_;
    }
    if (cached_has_bits & 0x00000040u) {
      validfrom_ = from.validfrom_;
    }
    if (cached_has_bits & 0x00000080u) {
      validto_ = from.validto_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_state(from.state());
  }
  switch (from.algorithm_case()) {
    case kLucre: {
      mutable_lucre()->::opentxs::proto::LucreTokenData::MergeFrom(from.lucre());
      break;
    }
    case ALGORITHM_NOT_SET: {
      break;
    }
  }
}

void Token::CopyFrom(const Token& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentxs.proto.Token)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Token::IsInitialized() const {
  return true;
}

void Token::Swap(Token* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Token::InternalSwap(Token* other) {
  using std::swap;
  notary_.Swap(&other->notary_);
  mint_.Swap(&other->mint_);
  swap(version_, other->version_);
  swap(type_, other->type_);
  swap(series_, other->series_);
  swap(denomination_, other->denomination_);
  swap(validfrom_, other->validfrom_);
  swap(validto_, other->validto_);
  swap(state_, other->state_);
  swap(algorithm_, other->algorithm_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string Token::GetTypeName() const {
  return "opentxs.proto.Token";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace opentxs

// @@protoc_insertion_point(global_scope)
