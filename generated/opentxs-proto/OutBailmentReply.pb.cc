// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OutBailmentReply.proto

#include "OutBailmentReply.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace opentxs {
namespace proto {
class OutBailmentReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OutBailmentReply>
      _instance;
} _OutBailmentReply_default_instance_;
}  // namespace proto
}  // namespace opentxs
namespace protobuf_OutBailmentReply_2eproto {
void InitDefaultsOutBailmentReplyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::opentxs::proto::_OutBailmentReply_default_instance_;
    new (ptr) ::opentxs::proto::OutBailmentReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opentxs::proto::OutBailmentReply::InitAsDefaultInstance();
}

void InitDefaultsOutBailmentReply() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsOutBailmentReplyImpl);
}

}  // namespace protobuf_OutBailmentReply_2eproto
namespace opentxs {
namespace proto {

// ===================================================================

void OutBailmentReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OutBailmentReply::kVersionFieldNumber;
const int OutBailmentReply::kInstructionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OutBailmentReply::OutBailmentReply()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_OutBailmentReply_2eproto::InitDefaultsOutBailmentReply();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:opentxs.proto.OutBailmentReply)
}
OutBailmentReply::OutBailmentReply(const OutBailmentReply& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  instructions_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_instructions()) {
    instructions_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instructions_);
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:opentxs.proto.OutBailmentReply)
}

void OutBailmentReply::SharedCtor() {
  _cached_size_ = 0;
  instructions_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0u;
}

OutBailmentReply::~OutBailmentReply() {
  // @@protoc_insertion_point(destructor:opentxs.proto.OutBailmentReply)
  SharedDtor();
}

void OutBailmentReply::SharedDtor() {
  instructions_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OutBailmentReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OutBailmentReply& OutBailmentReply::default_instance() {
  ::protobuf_OutBailmentReply_2eproto::InitDefaultsOutBailmentReply();
  return *internal_default_instance();
}

OutBailmentReply* OutBailmentReply::New(::google::protobuf::Arena* arena) const {
  OutBailmentReply* n = new OutBailmentReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OutBailmentReply::Clear() {
// @@protoc_insertion_point(message_clear_start:opentxs.proto.OutBailmentReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!instructions_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*instructions_.UnsafeRawStringPointer())->clear();
  }
  version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OutBailmentReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:opentxs.proto.OutBailmentReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string instructions = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instructions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opentxs.proto.OutBailmentReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opentxs.proto.OutBailmentReply)
  return false;
#undef DO_
}

void OutBailmentReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opentxs.proto.OutBailmentReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional string instructions = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->instructions(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:opentxs.proto.OutBailmentReply)
}

size_t OutBailmentReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentxs.proto.OutBailmentReply)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional string instructions = 2;
    if (has_instructions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instructions());
    }

    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OutBailmentReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OutBailmentReply*>(&from));
}

void OutBailmentReply::MergeFrom(const OutBailmentReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentxs.proto.OutBailmentReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_instructions();
      instructions_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instructions_);
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OutBailmentReply::CopyFrom(const OutBailmentReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentxs.proto.OutBailmentReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutBailmentReply::IsInitialized() const {
  return true;
}

void OutBailmentReply::Swap(OutBailmentReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OutBailmentReply::InternalSwap(OutBailmentReply* other) {
  using std::swap;
  instructions_.Swap(&other->instructions_);
  swap(version_, other->version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string OutBailmentReply::GetTypeName() const {
  return "opentxs.proto.OutBailmentReply";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace opentxs

// @@protoc_insertion_point(global_scope)
