// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PurseExchange.proto

#ifndef PROTOBUF_PurseExchange_2eproto__INCLUDED
#define PROTOBUF_PurseExchange_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "Purse.pb.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace protobuf_PurseExchange_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsPurseExchangeImpl();
void InitDefaultsPurseExchange();
inline void InitDefaults() {
  InitDefaultsPurseExchange();
}
}  // namespace protobuf_PurseExchange_2eproto
namespace opentxs {
namespace proto {
class PurseExchange;
class PurseExchangeDefaultTypeInternal;
extern PurseExchangeDefaultTypeInternal _PurseExchange_default_instance_;
}  // namespace proto
}  // namespace opentxs
namespace opentxs {
namespace proto {

// ===================================================================

class PurseExchange : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:opentxs.proto.PurseExchange) */ {
 public:
  PurseExchange();
  virtual ~PurseExchange();

  PurseExchange(const PurseExchange& from);

  inline PurseExchange& operator=(const PurseExchange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PurseExchange(PurseExchange&& from) noexcept
    : PurseExchange() {
    *this = ::std::move(from);
  }

  inline PurseExchange& operator=(PurseExchange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PurseExchange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PurseExchange* internal_default_instance() {
    return reinterpret_cast<const PurseExchange*>(
               &_PurseExchange_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(PurseExchange* other);
  friend void swap(PurseExchange& a, PurseExchange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PurseExchange* New() const PROTOBUF_FINAL { return New(NULL); }

  PurseExchange* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const PurseExchange& from);
  void MergeFrom(const PurseExchange& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PurseExchange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .opentxs.proto.Purse exchange = 2;
  bool has_exchange() const;
  void clear_exchange();
  static const int kExchangeFieldNumber = 2;
  const ::opentxs::proto::Purse& exchange() const;
  ::opentxs::proto::Purse* release_exchange();
  ::opentxs::proto::Purse* mutable_exchange();
  void set_allocated_exchange(::opentxs::proto::Purse* exchange);

  // optional .opentxs.proto.Purse request = 3;
  bool has_request() const;
  void clear_request();
  static const int kRequestFieldNumber = 3;
  const ::opentxs::proto::Purse& request() const;
  ::opentxs::proto::Purse* release_request();
  ::opentxs::proto::Purse* mutable_request();
  void set_allocated_request(::opentxs::proto::Purse* request);

  // optional uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:opentxs.proto.PurseExchange)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_exchange();
  void clear_has_exchange();
  void set_has_request();
  void clear_has_request();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::opentxs::proto::Purse* exchange_;
  ::opentxs::proto::Purse* request_;
  ::google::protobuf::uint32 version_;
  friend struct ::protobuf_PurseExchange_2eproto::TableStruct;
  friend void ::protobuf_PurseExchange_2eproto::InitDefaultsPurseExchangeImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PurseExchange

// optional uint32 version = 1;
inline bool PurseExchange::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PurseExchange::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PurseExchange::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PurseExchange::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 PurseExchange::version() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.PurseExchange.version)
  return version_;
}
inline void PurseExchange::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.PurseExchange.version)
}

// optional .opentxs.proto.Purse exchange = 2;
inline bool PurseExchange::has_exchange() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PurseExchange::set_has_exchange() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PurseExchange::clear_has_exchange() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::opentxs::proto::Purse& PurseExchange::exchange() const {
  const ::opentxs::proto::Purse* p = exchange_;
  // @@protoc_insertion_point(field_get:opentxs.proto.PurseExchange.exchange)
  return p != NULL ? *p : *reinterpret_cast<const ::opentxs::proto::Purse*>(
      &::opentxs::proto::_Purse_default_instance_);
}
inline ::opentxs::proto::Purse* PurseExchange::release_exchange() {
  // @@protoc_insertion_point(field_release:opentxs.proto.PurseExchange.exchange)
  clear_has_exchange();
  ::opentxs::proto::Purse* temp = exchange_;
  exchange_ = NULL;
  return temp;
}
inline ::opentxs::proto::Purse* PurseExchange::mutable_exchange() {
  set_has_exchange();
  if (exchange_ == NULL) {
    exchange_ = new ::opentxs::proto::Purse;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.proto.PurseExchange.exchange)
  return exchange_;
}
inline void PurseExchange::set_allocated_exchange(::opentxs::proto::Purse* exchange) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(exchange_);
  }
  if (exchange) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      exchange = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, exchange, submessage_arena);
    }
    set_has_exchange();
  } else {
    clear_has_exchange();
  }
  exchange_ = exchange;
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.PurseExchange.exchange)
}

// optional .opentxs.proto.Purse request = 3;
inline bool PurseExchange::has_request() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PurseExchange::set_has_request() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PurseExchange::clear_has_request() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::opentxs::proto::Purse& PurseExchange::request() const {
  const ::opentxs::proto::Purse* p = request_;
  // @@protoc_insertion_point(field_get:opentxs.proto.PurseExchange.request)
  return p != NULL ? *p : *reinterpret_cast<const ::opentxs::proto::Purse*>(
      &::opentxs::proto::_Purse_default_instance_);
}
inline ::opentxs::proto::Purse* PurseExchange::release_request() {
  // @@protoc_insertion_point(field_release:opentxs.proto.PurseExchange.request)
  clear_has_request();
  ::opentxs::proto::Purse* temp = request_;
  request_ = NULL;
  return temp;
}
inline ::opentxs::proto::Purse* PurseExchange::mutable_request() {
  set_has_request();
  if (request_ == NULL) {
    request_ = new ::opentxs::proto::Purse;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.proto.PurseExchange.request)
  return request_;
}
inline void PurseExchange::set_allocated_request(::opentxs::proto::Purse* request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(request_);
  }
  if (request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    set_has_request();
  } else {
    clear_has_request();
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.PurseExchange.request)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace opentxs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PurseExchange_2eproto__INCLUDED
