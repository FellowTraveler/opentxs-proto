// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AsymmetricKey.proto

#include "AsymmetricKey.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace opentxs {
namespace proto {
class AsymmetricKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AsymmetricKey>
      _instance;
} _AsymmetricKey_default_instance_;
}  // namespace proto
}  // namespace opentxs
namespace protobuf_AsymmetricKey_2eproto {
void InitDefaultsAsymmetricKeyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_Ciphertext_2eproto::InitDefaultsCiphertext();
  protobuf_HDPath_2eproto::InitDefaultsHDPath();
  {
    void* ptr = &::opentxs::proto::_AsymmetricKey_default_instance_;
    new (ptr) ::opentxs::proto::AsymmetricKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opentxs::proto::AsymmetricKey::InitAsDefaultInstance();
}

void InitDefaultsAsymmetricKey() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAsymmetricKeyImpl);
}

}  // namespace protobuf_AsymmetricKey_2eproto
namespace opentxs {
namespace proto {

// ===================================================================

void AsymmetricKey::InitAsDefaultInstance() {
  ::opentxs::proto::_AsymmetricKey_default_instance_._instance.get_mutable()->encryptedkey_ = const_cast< ::opentxs::proto::Ciphertext*>(
      ::opentxs::proto::Ciphertext::internal_default_instance());
  ::opentxs::proto::_AsymmetricKey_default_instance_._instance.get_mutable()->chaincode_ = const_cast< ::opentxs::proto::Ciphertext*>(
      ::opentxs::proto::Ciphertext::internal_default_instance());
  ::opentxs::proto::_AsymmetricKey_default_instance_._instance.get_mutable()->path_ = const_cast< ::opentxs::proto::HDPath*>(
      ::opentxs::proto::HDPath::internal_default_instance());
}
void AsymmetricKey::clear_encryptedkey() {
  if (encryptedkey_ != NULL) encryptedkey_->Clear();
  clear_has_encryptedkey();
}
void AsymmetricKey::clear_chaincode() {
  if (chaincode_ != NULL) chaincode_->Clear();
  clear_has_chaincode();
}
void AsymmetricKey::clear_path() {
  if (path_ != NULL) path_->Clear();
  clear_has_path();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AsymmetricKey::kVersionFieldNumber;
const int AsymmetricKey::kTypeFieldNumber;
const int AsymmetricKey::kModeFieldNumber;
const int AsymmetricKey::kRoleFieldNumber;
const int AsymmetricKey::kKeyFieldNumber;
const int AsymmetricKey::kEncryptedKeyFieldNumber;
const int AsymmetricKey::kChaincodeFieldNumber;
const int AsymmetricKey::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AsymmetricKey::AsymmetricKey()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_AsymmetricKey_2eproto::InitDefaultsAsymmetricKey();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:opentxs.proto.AsymmetricKey)
}
AsymmetricKey::AsymmetricKey(const AsymmetricKey& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_encryptedkey()) {
    encryptedkey_ = new ::opentxs::proto::Ciphertext(*from.encryptedkey_);
  } else {
    encryptedkey_ = NULL;
  }
  if (from.has_chaincode()) {
    chaincode_ = new ::opentxs::proto::Ciphertext(*from.chaincode_);
  } else {
    chaincode_ = NULL;
  }
  if (from.has_path()) {
    path_ = new ::opentxs::proto::HDPath(*from.path_);
  } else {
    path_ = NULL;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&role_) -
    reinterpret_cast<char*>(&version_)) + sizeof(role_));
  // @@protoc_insertion_point(copy_constructor:opentxs.proto.AsymmetricKey)
}

void AsymmetricKey::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&encryptedkey_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&role_) -
      reinterpret_cast<char*>(&encryptedkey_)) + sizeof(role_));
}

AsymmetricKey::~AsymmetricKey() {
  // @@protoc_insertion_point(destructor:opentxs.proto.AsymmetricKey)
  SharedDtor();
}

void AsymmetricKey::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete encryptedkey_;
  if (this != internal_default_instance()) delete chaincode_;
  if (this != internal_default_instance()) delete path_;
}

void AsymmetricKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AsymmetricKey& AsymmetricKey::default_instance() {
  ::protobuf_AsymmetricKey_2eproto::InitDefaultsAsymmetricKey();
  return *internal_default_instance();
}

AsymmetricKey* AsymmetricKey::New(::google::protobuf::Arena* arena) const {
  AsymmetricKey* n = new AsymmetricKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AsymmetricKey::Clear() {
// @@protoc_insertion_point(message_clear_start:opentxs.proto.AsymmetricKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*key_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(encryptedkey_ != NULL);
      encryptedkey_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(chaincode_ != NULL);
      chaincode_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(path_ != NULL);
      path_->Clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&role_) -
        reinterpret_cast<char*>(&version_)) + sizeof(role_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AsymmetricKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:opentxs.proto.AsymmetricKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.AsymmetricKeyType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::opentxs::proto::AsymmetricKeyType_IsValid(value)) {
            set_type(static_cast< ::opentxs::proto::AsymmetricKeyType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.KeyMode mode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::opentxs::proto::KeyMode_IsValid(value)) {
            set_mode(static_cast< ::opentxs::proto::KeyMode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.KeyRole role = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::opentxs::proto::KeyRole_IsValid(value)) {
            set_role(static_cast< ::opentxs::proto::KeyRole >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes key = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.Ciphertext encryptedKey = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_encryptedkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.Ciphertext chaincode = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_chaincode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.HDPath path = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opentxs.proto.AsymmetricKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opentxs.proto.AsymmetricKey)
  return false;
#undef DO_
}

void AsymmetricKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opentxs.proto.AsymmetricKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional .opentxs.proto.AsymmetricKeyType type = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .opentxs.proto.KeyMode mode = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->mode(), output);
  }

  // optional .opentxs.proto.KeyRole role = 4;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->role(), output);
  }

  // optional bytes key = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->key(), output);
  }

  // optional .opentxs.proto.Ciphertext encryptedKey = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->encryptedkey_, output);
  }

  // optional .opentxs.proto.Ciphertext chaincode = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, *this->chaincode_, output);
  }

  // optional .opentxs.proto.HDPath path = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, *this->path_, output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:opentxs.proto.AsymmetricKey)
}

size_t AsymmetricKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentxs.proto.AsymmetricKey)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes key = 5;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional .opentxs.proto.Ciphertext encryptedKey = 6;
    if (has_encryptedkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->encryptedkey_);
    }

    // optional .opentxs.proto.Ciphertext chaincode = 7;
    if (has_chaincode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->chaincode_);
    }

    // optional .opentxs.proto.HDPath path = 8;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->path_);
    }

    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional .opentxs.proto.AsymmetricKeyType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .opentxs.proto.KeyMode mode = 3;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

    // optional .opentxs.proto.KeyRole role = 4;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->role());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AsymmetricKey::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AsymmetricKey*>(&from));
}

void AsymmetricKey::MergeFrom(const AsymmetricKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentxs.proto.AsymmetricKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_encryptedkey()->::opentxs::proto::Ciphertext::MergeFrom(from.encryptedkey());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_chaincode()->::opentxs::proto::Ciphertext::MergeFrom(from.chaincode());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_path()->::opentxs::proto::HDPath::MergeFrom(from.path());
    }
    if (cached_has_bits & 0x00000010u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000040u) {
      mode_ = from.mode_;
    }
    if (cached_has_bits & 0x00000080u) {
      role_ = from.role_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AsymmetricKey::CopyFrom(const AsymmetricKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentxs.proto.AsymmetricKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AsymmetricKey::IsInitialized() const {
  return true;
}

void AsymmetricKey::Swap(AsymmetricKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AsymmetricKey::InternalSwap(AsymmetricKey* other) {
  using std::swap;
  key_.Swap(&other->key_);
  swap(encryptedkey_, other->encryptedkey_);
  swap(chaincode_, other->chaincode_);
  swap(path_, other->path_);
  swap(version_, other->version_);
  swap(type_, other->type_);
  swap(mode_, other->mode_);
  swap(role_, other->role_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string AsymmetricKey::GetTypeName() const {
  return "opentxs.proto.AsymmetricKey";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace opentxs

// @@protoc_insertion_point(global_scope)
