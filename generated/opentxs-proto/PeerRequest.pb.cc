// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PeerRequest.proto

#include "PeerRequest.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace opentxs {
namespace proto {
class PeerRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PeerRequest>
      _instance;
  const ::opentxs::proto::Bailment* bailment_;
  const ::opentxs::proto::OutBailment* outbailment_;
  const ::opentxs::proto::PendingBailment* pendingbailment_;
  const ::opentxs::proto::ConnectionInfo* connectioninfo_;
  const ::opentxs::proto::StoreSecret* storesecret_;
  const ::opentxs::proto::VerificationOffer* verificationoffer_;
  const ::opentxs::proto::Faucet* faucet_;
} _PeerRequest_default_instance_;
}  // namespace proto
}  // namespace opentxs
namespace protobuf_PeerRequest_2eproto {
void InitDefaultsPeerRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_Signature_2eproto::InitDefaultsSignature();
  protobuf_Bailment_2eproto::InitDefaultsBailment();
  protobuf_OutBailment_2eproto::InitDefaultsOutBailment();
  protobuf_PendingBailment_2eproto::InitDefaultsPendingBailment();
  protobuf_ConnectionInfo_2eproto::InitDefaultsConnectionInfo();
  protobuf_StoreSecret_2eproto::InitDefaultsStoreSecret();
  protobuf_VerificationOffer_2eproto::InitDefaultsVerificationOffer();
  protobuf_Faucet_2eproto::InitDefaultsFaucet();
  {
    void* ptr = &::opentxs::proto::_PeerRequest_default_instance_;
    new (ptr) ::opentxs::proto::PeerRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opentxs::proto::PeerRequest::InitAsDefaultInstance();
}

void InitDefaultsPeerRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPeerRequestImpl);
}

}  // namespace protobuf_PeerRequest_2eproto
namespace opentxs {
namespace proto {

// ===================================================================

void PeerRequest::InitAsDefaultInstance() {
  ::opentxs::proto::_PeerRequest_default_instance_._instance.get_mutable()->signature_ = const_cast< ::opentxs::proto::Signature*>(
      ::opentxs::proto::Signature::internal_default_instance());
}
void PeerRequest::clear_signature() {
  if (signature_ != NULL) signature_->Clear();
  clear_has_signature();
}
void PeerRequest::set_allocated_bailment(::opentxs::proto::Bailment* bailment) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (bailment) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bailment = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bailment, submessage_arena);
    }
    set_has_bailment();
    request_.bailment_ = bailment;
  }
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.PeerRequest.bailment)
}
void PeerRequest::clear_bailment() {
  if (has_bailment()) {
    delete request_.bailment_;
    clear_has_request();
  }
}
void PeerRequest::set_allocated_outbailment(::opentxs::proto::OutBailment* outbailment) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (outbailment) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      outbailment = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, outbailment, submessage_arena);
    }
    set_has_outbailment();
    request_.outbailment_ = outbailment;
  }
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.PeerRequest.outbailment)
}
void PeerRequest::clear_outbailment() {
  if (has_outbailment()) {
    delete request_.outbailment_;
    clear_has_request();
  }
}
void PeerRequest::set_allocated_pendingbailment(::opentxs::proto::PendingBailment* pendingbailment) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (pendingbailment) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pendingbailment = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pendingbailment, submessage_arena);
    }
    set_has_pendingbailment();
    request_.pendingbailment_ = pendingbailment;
  }
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.PeerRequest.pendingbailment)
}
void PeerRequest::clear_pendingbailment() {
  if (has_pendingbailment()) {
    delete request_.pendingbailment_;
    clear_has_request();
  }
}
void PeerRequest::set_allocated_connectioninfo(::opentxs::proto::ConnectionInfo* connectioninfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (connectioninfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      connectioninfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, connectioninfo, submessage_arena);
    }
    set_has_connectioninfo();
    request_.connectioninfo_ = connectioninfo;
  }
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.PeerRequest.connectioninfo)
}
void PeerRequest::clear_connectioninfo() {
  if (has_connectioninfo()) {
    delete request_.connectioninfo_;
    clear_has_request();
  }
}
void PeerRequest::set_allocated_storesecret(::opentxs::proto::StoreSecret* storesecret) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (storesecret) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      storesecret = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, storesecret, submessage_arena);
    }
    set_has_storesecret();
    request_.storesecret_ = storesecret;
  }
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.PeerRequest.storesecret)
}
void PeerRequest::clear_storesecret() {
  if (has_storesecret()) {
    delete request_.storesecret_;
    clear_has_request();
  }
}
void PeerRequest::set_allocated_verificationoffer(::opentxs::proto::VerificationOffer* verificationoffer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (verificationoffer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      verificationoffer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, verificationoffer, submessage_arena);
    }
    set_has_verificationoffer();
    request_.verificationoffer_ = verificationoffer;
  }
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.PeerRequest.verificationoffer)
}
void PeerRequest::clear_verificationoffer() {
  if (has_verificationoffer()) {
    delete request_.verificationoffer_;
    clear_has_request();
  }
}
void PeerRequest::set_allocated_faucet(::opentxs::proto::Faucet* faucet) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (faucet) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      faucet = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, faucet, submessage_arena);
    }
    set_has_faucet();
    request_.faucet_ = faucet;
  }
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.PeerRequest.faucet)
}
void PeerRequest::clear_faucet() {
  if (has_faucet()) {
    delete request_.faucet_;
    clear_has_request();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PeerRequest::kVersionFieldNumber;
const int PeerRequest::kIdFieldNumber;
const int PeerRequest::kInitiatorFieldNumber;
const int PeerRequest::kRecipientFieldNumber;
const int PeerRequest::kTypeFieldNumber;
const int PeerRequest::kCookieFieldNumber;
const int PeerRequest::kSignatureFieldNumber;
const int PeerRequest::kBailmentFieldNumber;
const int PeerRequest::kOutbailmentFieldNumber;
const int PeerRequest::kPendingbailmentFieldNumber;
const int PeerRequest::kConnectioninfoFieldNumber;
const int PeerRequest::kStoresecretFieldNumber;
const int PeerRequest::kVerificationofferFieldNumber;
const int PeerRequest::kFaucetFieldNumber;
const int PeerRequest::kServerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PeerRequest::PeerRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_PeerRequest_2eproto::InitDefaultsPeerRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:opentxs.proto.PeerRequest)
}
PeerRequest::PeerRequest(const PeerRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  initiator_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_initiator()) {
    initiator_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.initiator_);
  }
  recipient_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_recipient()) {
    recipient_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.recipient_);
  }
  cookie_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cookie()) {
    cookie_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cookie_);
  }
  server_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_server()) {
    server_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_);
  }
  if (from.has_signature()) {
    signature_ = new ::opentxs::proto::Signature(*from.signature_);
  } else {
    signature_ = NULL;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&version_)) + sizeof(type_));
  clear_has_request();
  switch (from.request_case()) {
    case kBailment: {
      mutable_bailment()->::opentxs::proto::Bailment::MergeFrom(from.bailment());
      break;
    }
    case kOutbailment: {
      mutable_outbailment()->::opentxs::proto::OutBailment::MergeFrom(from.outbailment());
      break;
    }
    case kPendingbailment: {
      mutable_pendingbailment()->::opentxs::proto::PendingBailment::MergeFrom(from.pendingbailment());
      break;
    }
    case kConnectioninfo: {
      mutable_connectioninfo()->::opentxs::proto::ConnectionInfo::MergeFrom(from.connectioninfo());
      break;
    }
    case kStoresecret: {
      mutable_storesecret()->::opentxs::proto::StoreSecret::MergeFrom(from.storesecret());
      break;
    }
    case kVerificationoffer: {
      mutable_verificationoffer()->::opentxs::proto::VerificationOffer::MergeFrom(from.verificationoffer());
      break;
    }
    case kFaucet: {
      mutable_faucet()->::opentxs::proto::Faucet::MergeFrom(from.faucet());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:opentxs.proto.PeerRequest)
}

void PeerRequest::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  initiator_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recipient_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cookie_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&signature_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&signature_)) + sizeof(type_));
  clear_has_request();
}

PeerRequest::~PeerRequest() {
  // @@protoc_insertion_point(destructor:opentxs.proto.PeerRequest)
  SharedDtor();
}

void PeerRequest::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  initiator_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recipient_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cookie_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete signature_;
  if (has_request()) {
    clear_request();
  }
}

void PeerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PeerRequest& PeerRequest::default_instance() {
  ::protobuf_PeerRequest_2eproto::InitDefaultsPeerRequest();
  return *internal_default_instance();
}

PeerRequest* PeerRequest::New(::google::protobuf::Arena* arena) const {
  PeerRequest* n = new PeerRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PeerRequest::clear_request() {
// @@protoc_insertion_point(one_of_clear_start:opentxs.proto.PeerRequest)
  switch (request_case()) {
    case kBailment: {
      delete request_.bailment_;
      break;
    }
    case kOutbailment: {
      delete request_.outbailment_;
      break;
    }
    case kPendingbailment: {
      delete request_.pendingbailment_;
      break;
    }
    case kConnectioninfo: {
      delete request_.connectioninfo_;
      break;
    }
    case kStoresecret: {
      delete request_.storesecret_;
      break;
    }
    case kVerificationoffer: {
      delete request_.verificationoffer_;
      break;
    }
    case kFaucet: {
      delete request_.faucet_;
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUEST_NOT_SET;
}


void PeerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opentxs.proto.PeerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!initiator_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*initiator_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!recipient_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*recipient_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!cookie_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*cookie_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!server_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*server_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(signature_ != NULL);
      signature_->Clear();
    }
  }
  if (cached_has_bits & 192u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&version_)) + sizeof(type_));
  }
  clear_request();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PeerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:opentxs.proto.PeerRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string initiator = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_initiator()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string recipient = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recipient()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.PeerRequestType type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::opentxs::proto::PeerRequestType_IsValid(value)) {
            set_type(static_cast< ::opentxs::proto::PeerRequestType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(40u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string cookie = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cookie()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.Signature signature = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.Bailment bailment = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bailment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.OutBailment outbailment = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_outbailment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.PendingBailment pendingbailment = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pendingbailment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.ConnectionInfo connectioninfo = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_connectioninfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.StoreSecret storesecret = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_storesecret()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string server = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.VerificationOffer verificationoffer = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_verificationoffer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.Faucet faucet = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_faucet()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opentxs.proto.PeerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opentxs.proto.PeerRequest)
  return false;
#undef DO_
}

void PeerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opentxs.proto.PeerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional string id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // optional string initiator = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->initiator(), output);
  }

  // optional string recipient = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->recipient(), output);
  }

  // optional .opentxs.proto.PeerRequestType type = 5;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // optional string cookie = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->cookie(), output);
  }

  // optional .opentxs.proto.Signature signature = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, *this->signature_, output);
  }

  switch (request_case()) {
    case kBailment:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        8, *request_.bailment_, output);
      break;
    case kOutbailment:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        9, *request_.outbailment_, output);
      break;
    case kPendingbailment:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        10, *request_.pendingbailment_, output);
      break;
    case kConnectioninfo:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        11, *request_.connectioninfo_, output);
      break;
    case kStoresecret:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        12, *request_.storesecret_, output);
      break;
    default: ;
  }
  // optional string server = 13;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->server(), output);
  }

  switch (request_case()) {
    case kVerificationoffer:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        14, *request_.verificationoffer_, output);
      break;
    case kFaucet:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        15, *request_.faucet_, output);
      break;
    default: ;
  }
  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:opentxs.proto.PeerRequest)
}

size_t PeerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentxs.proto.PeerRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional string id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string initiator = 3;
    if (has_initiator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->initiator());
    }

    // optional string recipient = 4;
    if (has_recipient()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->recipient());
    }

    // optional string cookie = 6;
    if (has_cookie()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cookie());
    }

    // optional string server = 13;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server());
    }

    // optional .opentxs.proto.Signature signature = 7;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->signature_);
    }

    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional .opentxs.proto.PeerRequestType type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  switch (request_case()) {
    // optional .opentxs.proto.Bailment bailment = 8;
    case kBailment: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_.bailment_);
      break;
    }
    // optional .opentxs.proto.OutBailment outbailment = 9;
    case kOutbailment: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_.outbailment_);
      break;
    }
    // optional .opentxs.proto.PendingBailment pendingbailment = 10;
    case kPendingbailment: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_.pendingbailment_);
      break;
    }
    // optional .opentxs.proto.ConnectionInfo connectioninfo = 11;
    case kConnectioninfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_.connectioninfo_);
      break;
    }
    // optional .opentxs.proto.StoreSecret storesecret = 12;
    case kStoresecret: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_.storesecret_);
      break;
    }
    // optional .opentxs.proto.VerificationOffer verificationoffer = 14;
    case kVerificationoffer: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_.verificationoffer_);
      break;
    }
    // optional .opentxs.proto.Faucet faucet = 15;
    case kFaucet: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_.faucet_);
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PeerRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PeerRequest*>(&from));
}

void PeerRequest::MergeFrom(const PeerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentxs.proto.PeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_initiator();
      initiator_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.initiator_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_recipient();
      recipient_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.recipient_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_cookie();
      cookie_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cookie_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_server();
      server_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_);
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_signature()->::opentxs::proto::Signature::MergeFrom(from.signature());
    }
    if (cached_has_bits & 0x00000040u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000080u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.request_case()) {
    case kBailment: {
      mutable_bailment()->::opentxs::proto::Bailment::MergeFrom(from.bailment());
      break;
    }
    case kOutbailment: {
      mutable_outbailment()->::opentxs::proto::OutBailment::MergeFrom(from.outbailment());
      break;
    }
    case kPendingbailment: {
      mutable_pendingbailment()->::opentxs::proto::PendingBailment::MergeFrom(from.pendingbailment());
      break;
    }
    case kConnectioninfo: {
      mutable_connectioninfo()->::opentxs::proto::ConnectionInfo::MergeFrom(from.connectioninfo());
      break;
    }
    case kStoresecret: {
      mutable_storesecret()->::opentxs::proto::StoreSecret::MergeFrom(from.storesecret());
      break;
    }
    case kVerificationoffer: {
      mutable_verificationoffer()->::opentxs::proto::VerificationOffer::MergeFrom(from.verificationoffer());
      break;
    }
    case kFaucet: {
      mutable_faucet()->::opentxs::proto::Faucet::MergeFrom(from.faucet());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
}

void PeerRequest::CopyFrom(const PeerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentxs.proto.PeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerRequest::IsInitialized() const {
  return true;
}

void PeerRequest::Swap(PeerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeerRequest::InternalSwap(PeerRequest* other) {
  using std::swap;
  id_.Swap(&other->id_);
  initiator_.Swap(&other->initiator_);
  recipient_.Swap(&other->recipient_);
  cookie_.Swap(&other->cookie_);
  server_.Swap(&other->server_);
  swap(signature_, other->signature_);
  swap(version_, other->version_);
  swap(type_, other->type_);
  swap(request_, other->request_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string PeerRequest::GetTypeName() const {
  return "opentxs.proto.PeerRequest";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace opentxs

// @@protoc_insertion_point(global_scope)
