// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PeerObject.proto

#include "PeerObject.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace opentxs {
namespace proto {
class PeerObjectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PeerObject>
      _instance;
} _PeerObject_default_instance_;
}  // namespace proto
}  // namespace opentxs
namespace protobuf_PeerObject_2eproto {
void InitDefaultsPeerObjectImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_PeerRequest_2eproto::InitDefaultsPeerRequest();
  protobuf_PeerReply_2eproto::InitDefaultsPeerReply();
  protobuf_CredentialIndex_2eproto::InitDefaultsCredentialIndex();
  protobuf_Purse_2eproto::InitDefaultsPurse();
  {
    void* ptr = &::opentxs::proto::_PeerObject_default_instance_;
    new (ptr) ::opentxs::proto::PeerObject();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opentxs::proto::PeerObject::InitAsDefaultInstance();
}

void InitDefaultsPeerObject() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPeerObjectImpl);
}

}  // namespace protobuf_PeerObject_2eproto
namespace opentxs {
namespace proto {

// ===================================================================

void PeerObject::InitAsDefaultInstance() {
  ::opentxs::proto::_PeerObject_default_instance_._instance.get_mutable()->otrequest_ = const_cast< ::opentxs::proto::PeerRequest*>(
      ::opentxs::proto::PeerRequest::internal_default_instance());
  ::opentxs::proto::_PeerObject_default_instance_._instance.get_mutable()->otreply_ = const_cast< ::opentxs::proto::PeerReply*>(
      ::opentxs::proto::PeerReply::internal_default_instance());
  ::opentxs::proto::_PeerObject_default_instance_._instance.get_mutable()->nym_ = const_cast< ::opentxs::proto::CredentialIndex*>(
      ::opentxs::proto::CredentialIndex::internal_default_instance());
  ::opentxs::proto::_PeerObject_default_instance_._instance.get_mutable()->purse_ = const_cast< ::opentxs::proto::Purse*>(
      ::opentxs::proto::Purse::internal_default_instance());
}
void PeerObject::clear_otrequest() {
  if (otrequest_ != NULL) otrequest_->Clear();
  clear_has_otrequest();
}
void PeerObject::clear_otreply() {
  if (otreply_ != NULL) otreply_->Clear();
  clear_has_otreply();
}
void PeerObject::clear_nym() {
  if (nym_ != NULL) nym_->Clear();
  clear_has_nym();
}
void PeerObject::clear_purse() {
  if (purse_ != NULL) purse_->Clear();
  clear_has_purse();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PeerObject::kVersionFieldNumber;
const int PeerObject::kTypeFieldNumber;
const int PeerObject::kOtmessageFieldNumber;
const int PeerObject::kOtrequestFieldNumber;
const int PeerObject::kOtreplyFieldNumber;
const int PeerObject::kNymFieldNumber;
const int PeerObject::kOtpaymentFieldNumber;
const int PeerObject::kPurseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PeerObject::PeerObject()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_PeerObject_2eproto::InitDefaultsPeerObject();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:opentxs.proto.PeerObject)
}
PeerObject::PeerObject(const PeerObject& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  otmessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_otmessage()) {
    otmessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.otmessage_);
  }
  otpayment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_otpayment()) {
    otpayment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.otpayment_);
  }
  if (from.has_otrequest()) {
    otrequest_ = new ::opentxs::proto::PeerRequest(*from.otrequest_);
  } else {
    otrequest_ = NULL;
  }
  if (from.has_otreply()) {
    otreply_ = new ::opentxs::proto::PeerReply(*from.otreply_);
  } else {
    otreply_ = NULL;
  }
  if (from.has_nym()) {
    nym_ = new ::opentxs::proto::CredentialIndex(*from.nym_);
  } else {
    nym_ = NULL;
  }
  if (from.has_purse()) {
    purse_ = new ::opentxs::proto::Purse(*from.purse_);
  } else {
    purse_ = NULL;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&version_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:opentxs.proto.PeerObject)
}

void PeerObject::SharedCtor() {
  _cached_size_ = 0;
  otmessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  otpayment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&otrequest_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&otrequest_)) + sizeof(type_));
}

PeerObject::~PeerObject() {
  // @@protoc_insertion_point(destructor:opentxs.proto.PeerObject)
  SharedDtor();
}

void PeerObject::SharedDtor() {
  otmessage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  otpayment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete otrequest_;
  if (this != internal_default_instance()) delete otreply_;
  if (this != internal_default_instance()) delete nym_;
  if (this != internal_default_instance()) delete purse_;
}

void PeerObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PeerObject& PeerObject::default_instance() {
  ::protobuf_PeerObject_2eproto::InitDefaultsPeerObject();
  return *internal_default_instance();
}

PeerObject* PeerObject::New(::google::protobuf::Arena* arena) const {
  PeerObject* n = new PeerObject;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PeerObject::Clear() {
// @@protoc_insertion_point(message_clear_start:opentxs.proto.PeerObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!otmessage_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*otmessage_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!otpayment_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*otpayment_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(otrequest_ != NULL);
      otrequest_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(otreply_ != NULL);
      otreply_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(nym_ != NULL);
      nym_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(purse_ != NULL);
      purse_->Clear();
    }
  }
  if (cached_has_bits & 192u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&version_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PeerObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:opentxs.proto.PeerObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.PeerObjectType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::opentxs::proto::PeerObjectType_IsValid(value)) {
            set_type(static_cast< ::opentxs::proto::PeerObjectType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string otmessage = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_otmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.PeerRequest otrequest = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_otrequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.PeerReply otreply = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_otreply()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.CredentialIndex nym = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_nym()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string otpayment = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_otpayment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.Purse purse = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_purse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opentxs.proto.PeerObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opentxs.proto.PeerObject)
  return false;
#undef DO_
}

void PeerObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opentxs.proto.PeerObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional .opentxs.proto.PeerObjectType type = 2;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional string otmessage = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->otmessage(), output);
  }

  // optional .opentxs.proto.PeerRequest otrequest = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->otrequest_, output);
  }

  // optional .opentxs.proto.PeerReply otreply = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->otreply_, output);
  }

  // optional .opentxs.proto.CredentialIndex nym = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->nym_, output);
  }

  // optional string otpayment = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->otpayment(), output);
  }

  // optional .opentxs.proto.Purse purse = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, *this->purse_, output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:opentxs.proto.PeerObject)
}

size_t PeerObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentxs.proto.PeerObject)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional string otmessage = 3;
    if (has_otmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->otmessage());
    }

    // optional string otpayment = 7;
    if (has_otpayment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->otpayment());
    }

    // optional .opentxs.proto.PeerRequest otrequest = 4;
    if (has_otrequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->otrequest_);
    }

    // optional .opentxs.proto.PeerReply otreply = 5;
    if (has_otreply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->otreply_);
    }

    // optional .opentxs.proto.CredentialIndex nym = 6;
    if (has_nym()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->nym_);
    }

    // optional .opentxs.proto.Purse purse = 8;
    if (has_purse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->purse_);
    }

    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional .opentxs.proto.PeerObjectType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PeerObject::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PeerObject*>(&from));
}

void PeerObject::MergeFrom(const PeerObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentxs.proto.PeerObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_otmessage();
      otmessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.otmessage_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_otpayment();
      otpayment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.otpayment_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_otrequest()->::opentxs::proto::PeerRequest::MergeFrom(from.otrequest());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_otreply()->::opentxs::proto::PeerReply::MergeFrom(from.otreply());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_nym()->::opentxs::proto::CredentialIndex::MergeFrom(from.nym());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_purse()->::opentxs::proto::Purse::MergeFrom(from.purse());
    }
    if (cached_has_bits & 0x00000040u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000080u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PeerObject::CopyFrom(const PeerObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentxs.proto.PeerObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerObject::IsInitialized() const {
  return true;
}

void PeerObject::Swap(PeerObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeerObject::InternalSwap(PeerObject* other) {
  using std::swap;
  otmessage_.Swap(&other->otmessage_);
  otpayment_.Swap(&other->otpayment_);
  swap(otrequest_, other->otrequest_);
  swap(otreply_, other->otreply_);
  swap(nym_, other->nym_);
  swap(purse_, other->purse_);
  swap(version_, other->version_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string PeerObject::GetTypeName() const {
  return "opentxs.proto.PeerObject";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace opentxs

// @@protoc_insertion_point(global_scope)
