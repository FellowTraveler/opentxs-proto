// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StorageItems.proto

#ifndef PROTOBUF_StorageItems_2eproto__INCLUDED
#define PROTOBUF_StorageItems_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace protobuf_StorageItems_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsStorageItemsImpl();
void InitDefaultsStorageItems();
inline void InitDefaults() {
  InitDefaultsStorageItems();
}
}  // namespace protobuf_StorageItems_2eproto
namespace opentxs {
namespace proto {
class StorageItems;
class StorageItemsDefaultTypeInternal;
extern StorageItemsDefaultTypeInternal _StorageItems_default_instance_;
}  // namespace proto
}  // namespace opentxs
namespace opentxs {
namespace proto {

// ===================================================================

class StorageItems : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:opentxs.proto.StorageItems) */ {
 public:
  StorageItems();
  virtual ~StorageItems();

  StorageItems(const StorageItems& from);

  inline StorageItems& operator=(const StorageItems& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StorageItems(StorageItems&& from) noexcept
    : StorageItems() {
    *this = ::std::move(from);
  }

  inline StorageItems& operator=(StorageItems&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const StorageItems& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StorageItems* internal_default_instance() {
    return reinterpret_cast<const StorageItems*>(
               &_StorageItems_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(StorageItems* other);
  friend void swap(StorageItems& a, StorageItems& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StorageItems* New() const PROTOBUF_FINAL { return New(NULL); }

  StorageItems* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const StorageItems& from);
  void MergeFrom(const StorageItems& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StorageItems* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string creds = 2;
  bool has_creds() const;
  void clear_creds();
  static const int kCredsFieldNumber = 2;
  const ::std::string& creds() const;
  void set_creds(const ::std::string& value);
  #if LANG_CXX11
  void set_creds(::std::string&& value);
  #endif
  void set_creds(const char* value);
  void set_creds(const char* value, size_t size);
  ::std::string* mutable_creds();
  ::std::string* release_creds();
  void set_allocated_creds(::std::string* creds);

  // optional string nyms = 3;
  bool has_nyms() const;
  void clear_nyms();
  static const int kNymsFieldNumber = 3;
  const ::std::string& nyms() const;
  void set_nyms(const ::std::string& value);
  #if LANG_CXX11
  void set_nyms(::std::string&& value);
  #endif
  void set_nyms(const char* value);
  void set_nyms(const char* value, size_t size);
  ::std::string* mutable_nyms();
  ::std::string* release_nyms();
  void set_allocated_nyms(::std::string* nyms);

  // optional string servers = 4;
  bool has_servers() const;
  void clear_servers();
  static const int kServersFieldNumber = 4;
  const ::std::string& servers() const;
  void set_servers(const ::std::string& value);
  #if LANG_CXX11
  void set_servers(::std::string&& value);
  #endif
  void set_servers(const char* value);
  void set_servers(const char* value, size_t size);
  ::std::string* mutable_servers();
  ::std::string* release_servers();
  void set_allocated_servers(::std::string* servers);

  // optional string units = 5;
  bool has_units() const;
  void clear_units();
  static const int kUnitsFieldNumber = 5;
  const ::std::string& units() const;
  void set_units(const ::std::string& value);
  #if LANG_CXX11
  void set_units(::std::string&& value);
  #endif
  void set_units(const char* value);
  void set_units(const char* value, size_t size);
  ::std::string* mutable_units();
  ::std::string* release_units();
  void set_allocated_units(::std::string* units);

  // optional string seeds = 6;
  bool has_seeds() const;
  void clear_seeds();
  static const int kSeedsFieldNumber = 6;
  const ::std::string& seeds() const;
  void set_seeds(const ::std::string& value);
  #if LANG_CXX11
  void set_seeds(::std::string&& value);
  #endif
  void set_seeds(const char* value);
  void set_seeds(const char* value, size_t size);
  ::std::string* mutable_seeds();
  ::std::string* release_seeds();
  void set_allocated_seeds(::std::string* seeds);

  // optional string contacts = 7;
  bool has_contacts() const;
  void clear_contacts();
  static const int kContactsFieldNumber = 7;
  const ::std::string& contacts() const;
  void set_contacts(const ::std::string& value);
  #if LANG_CXX11
  void set_contacts(::std::string&& value);
  #endif
  void set_contacts(const char* value);
  void set_contacts(const char* value, size_t size);
  ::std::string* mutable_contacts();
  ::std::string* release_contacts();
  void set_allocated_contacts(::std::string* contacts);

  // optional string blockchaintransactions = 8;
  bool has_blockchaintransactions() const;
  void clear_blockchaintransactions();
  static const int kBlockchaintransactionsFieldNumber = 8;
  const ::std::string& blockchaintransactions() const;
  void set_blockchaintransactions(const ::std::string& value);
  #if LANG_CXX11
  void set_blockchaintransactions(::std::string&& value);
  #endif
  void set_blockchaintransactions(const char* value);
  void set_blockchaintransactions(const char* value, size_t size);
  ::std::string* mutable_blockchaintransactions();
  ::std::string* release_blockchaintransactions();
  void set_allocated_blockchaintransactions(::std::string* blockchaintransactions);

  // optional string accounts = 9;
  bool has_accounts() const;
  void clear_accounts();
  static const int kAccountsFieldNumber = 9;
  const ::std::string& accounts() const;
  void set_accounts(const ::std::string& value);
  #if LANG_CXX11
  void set_accounts(::std::string&& value);
  #endif
  void set_accounts(const char* value);
  void set_accounts(const char* value, size_t size);
  ::std::string* mutable_accounts();
  ::std::string* release_accounts();
  void set_allocated_accounts(::std::string* accounts);

  // optional uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:opentxs.proto.StorageItems)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_creds();
  void clear_has_creds();
  void set_has_nyms();
  void clear_has_nyms();
  void set_has_servers();
  void clear_has_servers();
  void set_has_units();
  void clear_has_units();
  void set_has_seeds();
  void clear_has_seeds();
  void set_has_contacts();
  void clear_has_contacts();
  void set_has_blockchaintransactions();
  void clear_has_blockchaintransactions();
  void set_has_accounts();
  void clear_has_accounts();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr creds_;
  ::google::protobuf::internal::ArenaStringPtr nyms_;
  ::google::protobuf::internal::ArenaStringPtr servers_;
  ::google::protobuf::internal::ArenaStringPtr units_;
  ::google::protobuf::internal::ArenaStringPtr seeds_;
  ::google::protobuf::internal::ArenaStringPtr contacts_;
  ::google::protobuf::internal::ArenaStringPtr blockchaintransactions_;
  ::google::protobuf::internal::ArenaStringPtr accounts_;
  ::google::protobuf::uint32 version_;
  friend struct ::protobuf_StorageItems_2eproto::TableStruct;
  friend void ::protobuf_StorageItems_2eproto::InitDefaultsStorageItemsImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StorageItems

// optional uint32 version = 1;
inline bool StorageItems::has_version() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void StorageItems::set_has_version() {
  _has_bits_[0] |= 0x00000100u;
}
inline void StorageItems::clear_has_version() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void StorageItems::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 StorageItems::version() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.StorageItems.version)
  return version_;
}
inline void StorageItems::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.StorageItems.version)
}

// optional string creds = 2;
inline bool StorageItems::has_creds() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StorageItems::set_has_creds() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StorageItems::clear_has_creds() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StorageItems::clear_creds() {
  creds_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_creds();
}
inline const ::std::string& StorageItems::creds() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.StorageItems.creds)
  return creds_.GetNoArena();
}
inline void StorageItems::set_creds(const ::std::string& value) {
  set_has_creds();
  creds_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.StorageItems.creds)
}
#if LANG_CXX11
inline void StorageItems::set_creds(::std::string&& value) {
  set_has_creds();
  creds_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.StorageItems.creds)
}
#endif
inline void StorageItems::set_creds(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_creds();
  creds_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.StorageItems.creds)
}
inline void StorageItems::set_creds(const char* value, size_t size) {
  set_has_creds();
  creds_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.StorageItems.creds)
}
inline ::std::string* StorageItems::mutable_creds() {
  set_has_creds();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.StorageItems.creds)
  return creds_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageItems::release_creds() {
  // @@protoc_insertion_point(field_release:opentxs.proto.StorageItems.creds)
  clear_has_creds();
  return creds_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageItems::set_allocated_creds(::std::string* creds) {
  if (creds != NULL) {
    set_has_creds();
  } else {
    clear_has_creds();
  }
  creds_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), creds);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.StorageItems.creds)
}

// optional string nyms = 3;
inline bool StorageItems::has_nyms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StorageItems::set_has_nyms() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StorageItems::clear_has_nyms() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StorageItems::clear_nyms() {
  nyms_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nyms();
}
inline const ::std::string& StorageItems::nyms() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.StorageItems.nyms)
  return nyms_.GetNoArena();
}
inline void StorageItems::set_nyms(const ::std::string& value) {
  set_has_nyms();
  nyms_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.StorageItems.nyms)
}
#if LANG_CXX11
inline void StorageItems::set_nyms(::std::string&& value) {
  set_has_nyms();
  nyms_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.StorageItems.nyms)
}
#endif
inline void StorageItems::set_nyms(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nyms();
  nyms_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.StorageItems.nyms)
}
inline void StorageItems::set_nyms(const char* value, size_t size) {
  set_has_nyms();
  nyms_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.StorageItems.nyms)
}
inline ::std::string* StorageItems::mutable_nyms() {
  set_has_nyms();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.StorageItems.nyms)
  return nyms_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageItems::release_nyms() {
  // @@protoc_insertion_point(field_release:opentxs.proto.StorageItems.nyms)
  clear_has_nyms();
  return nyms_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageItems::set_allocated_nyms(::std::string* nyms) {
  if (nyms != NULL) {
    set_has_nyms();
  } else {
    clear_has_nyms();
  }
  nyms_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nyms);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.StorageItems.nyms)
}

// optional string servers = 4;
inline bool StorageItems::has_servers() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StorageItems::set_has_servers() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StorageItems::clear_has_servers() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StorageItems::clear_servers() {
  servers_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_servers();
}
inline const ::std::string& StorageItems::servers() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.StorageItems.servers)
  return servers_.GetNoArena();
}
inline void StorageItems::set_servers(const ::std::string& value) {
  set_has_servers();
  servers_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.StorageItems.servers)
}
#if LANG_CXX11
inline void StorageItems::set_servers(::std::string&& value) {
  set_has_servers();
  servers_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.StorageItems.servers)
}
#endif
inline void StorageItems::set_servers(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_servers();
  servers_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.StorageItems.servers)
}
inline void StorageItems::set_servers(const char* value, size_t size) {
  set_has_servers();
  servers_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.StorageItems.servers)
}
inline ::std::string* StorageItems::mutable_servers() {
  set_has_servers();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.StorageItems.servers)
  return servers_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageItems::release_servers() {
  // @@protoc_insertion_point(field_release:opentxs.proto.StorageItems.servers)
  clear_has_servers();
  return servers_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageItems::set_allocated_servers(::std::string* servers) {
  if (servers != NULL) {
    set_has_servers();
  } else {
    clear_has_servers();
  }
  servers_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servers);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.StorageItems.servers)
}

// optional string units = 5;
inline bool StorageItems::has_units() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StorageItems::set_has_units() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StorageItems::clear_has_units() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StorageItems::clear_units() {
  units_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_units();
}
inline const ::std::string& StorageItems::units() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.StorageItems.units)
  return units_.GetNoArena();
}
inline void StorageItems::set_units(const ::std::string& value) {
  set_has_units();
  units_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.StorageItems.units)
}
#if LANG_CXX11
inline void StorageItems::set_units(::std::string&& value) {
  set_has_units();
  units_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.StorageItems.units)
}
#endif
inline void StorageItems::set_units(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_units();
  units_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.StorageItems.units)
}
inline void StorageItems::set_units(const char* value, size_t size) {
  set_has_units();
  units_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.StorageItems.units)
}
inline ::std::string* StorageItems::mutable_units() {
  set_has_units();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.StorageItems.units)
  return units_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageItems::release_units() {
  // @@protoc_insertion_point(field_release:opentxs.proto.StorageItems.units)
  clear_has_units();
  return units_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageItems::set_allocated_units(::std::string* units) {
  if (units != NULL) {
    set_has_units();
  } else {
    clear_has_units();
  }
  units_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), units);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.StorageItems.units)
}

// optional string seeds = 6;
inline bool StorageItems::has_seeds() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StorageItems::set_has_seeds() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StorageItems::clear_has_seeds() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StorageItems::clear_seeds() {
  seeds_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_seeds();
}
inline const ::std::string& StorageItems::seeds() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.StorageItems.seeds)
  return seeds_.GetNoArena();
}
inline void StorageItems::set_seeds(const ::std::string& value) {
  set_has_seeds();
  seeds_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.StorageItems.seeds)
}
#if LANG_CXX11
inline void StorageItems::set_seeds(::std::string&& value) {
  set_has_seeds();
  seeds_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.StorageItems.seeds)
}
#endif
inline void StorageItems::set_seeds(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_seeds();
  seeds_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.StorageItems.seeds)
}
inline void StorageItems::set_seeds(const char* value, size_t size) {
  set_has_seeds();
  seeds_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.StorageItems.seeds)
}
inline ::std::string* StorageItems::mutable_seeds() {
  set_has_seeds();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.StorageItems.seeds)
  return seeds_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageItems::release_seeds() {
  // @@protoc_insertion_point(field_release:opentxs.proto.StorageItems.seeds)
  clear_has_seeds();
  return seeds_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageItems::set_allocated_seeds(::std::string* seeds) {
  if (seeds != NULL) {
    set_has_seeds();
  } else {
    clear_has_seeds();
  }
  seeds_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), seeds);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.StorageItems.seeds)
}

// optional string contacts = 7;
inline bool StorageItems::has_contacts() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StorageItems::set_has_contacts() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StorageItems::clear_has_contacts() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StorageItems::clear_contacts() {
  contacts_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_contacts();
}
inline const ::std::string& StorageItems::contacts() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.StorageItems.contacts)
  return contacts_.GetNoArena();
}
inline void StorageItems::set_contacts(const ::std::string& value) {
  set_has_contacts();
  contacts_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.StorageItems.contacts)
}
#if LANG_CXX11
inline void StorageItems::set_contacts(::std::string&& value) {
  set_has_contacts();
  contacts_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.StorageItems.contacts)
}
#endif
inline void StorageItems::set_contacts(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_contacts();
  contacts_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.StorageItems.contacts)
}
inline void StorageItems::set_contacts(const char* value, size_t size) {
  set_has_contacts();
  contacts_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.StorageItems.contacts)
}
inline ::std::string* StorageItems::mutable_contacts() {
  set_has_contacts();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.StorageItems.contacts)
  return contacts_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageItems::release_contacts() {
  // @@protoc_insertion_point(field_release:opentxs.proto.StorageItems.contacts)
  clear_has_contacts();
  return contacts_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageItems::set_allocated_contacts(::std::string* contacts) {
  if (contacts != NULL) {
    set_has_contacts();
  } else {
    clear_has_contacts();
  }
  contacts_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contacts);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.StorageItems.contacts)
}

// optional string blockchaintransactions = 8;
inline bool StorageItems::has_blockchaintransactions() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StorageItems::set_has_blockchaintransactions() {
  _has_bits_[0] |= 0x00000040u;
}
inline void StorageItems::clear_has_blockchaintransactions() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void StorageItems::clear_blockchaintransactions() {
  blockchaintransactions_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_blockchaintransactions();
}
inline const ::std::string& StorageItems::blockchaintransactions() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.StorageItems.blockchaintransactions)
  return blockchaintransactions_.GetNoArena();
}
inline void StorageItems::set_blockchaintransactions(const ::std::string& value) {
  set_has_blockchaintransactions();
  blockchaintransactions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.StorageItems.blockchaintransactions)
}
#if LANG_CXX11
inline void StorageItems::set_blockchaintransactions(::std::string&& value) {
  set_has_blockchaintransactions();
  blockchaintransactions_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.StorageItems.blockchaintransactions)
}
#endif
inline void StorageItems::set_blockchaintransactions(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_blockchaintransactions();
  blockchaintransactions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.StorageItems.blockchaintransactions)
}
inline void StorageItems::set_blockchaintransactions(const char* value, size_t size) {
  set_has_blockchaintransactions();
  blockchaintransactions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.StorageItems.blockchaintransactions)
}
inline ::std::string* StorageItems::mutable_blockchaintransactions() {
  set_has_blockchaintransactions();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.StorageItems.blockchaintransactions)
  return blockchaintransactions_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageItems::release_blockchaintransactions() {
  // @@protoc_insertion_point(field_release:opentxs.proto.StorageItems.blockchaintransactions)
  clear_has_blockchaintransactions();
  return blockchaintransactions_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageItems::set_allocated_blockchaintransactions(::std::string* blockchaintransactions) {
  if (blockchaintransactions != NULL) {
    set_has_blockchaintransactions();
  } else {
    clear_has_blockchaintransactions();
  }
  blockchaintransactions_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), blockchaintransactions);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.StorageItems.blockchaintransactions)
}

// optional string accounts = 9;
inline bool StorageItems::has_accounts() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void StorageItems::set_has_accounts() {
  _has_bits_[0] |= 0x00000080u;
}
inline void StorageItems::clear_has_accounts() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void StorageItems::clear_accounts() {
  accounts_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_accounts();
}
inline const ::std::string& StorageItems::accounts() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.StorageItems.accounts)
  return accounts_.GetNoArena();
}
inline void StorageItems::set_accounts(const ::std::string& value) {
  set_has_accounts();
  accounts_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.StorageItems.accounts)
}
#if LANG_CXX11
inline void StorageItems::set_accounts(::std::string&& value) {
  set_has_accounts();
  accounts_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.StorageItems.accounts)
}
#endif
inline void StorageItems::set_accounts(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_accounts();
  accounts_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.StorageItems.accounts)
}
inline void StorageItems::set_accounts(const char* value, size_t size) {
  set_has_accounts();
  accounts_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.StorageItems.accounts)
}
inline ::std::string* StorageItems::mutable_accounts() {
  set_has_accounts();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.StorageItems.accounts)
  return accounts_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageItems::release_accounts() {
  // @@protoc_insertion_point(field_release:opentxs.proto.StorageItems.accounts)
  clear_has_accounts();
  return accounts_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageItems::set_allocated_accounts(::std::string* accounts) {
  if (accounts != NULL) {
    set_has_accounts();
  } else {
    clear_has_accounts();
  }
  accounts_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), accounts);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.StorageItems.accounts)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace opentxs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_StorageItems_2eproto__INCLUDED
