// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Contact.proto

#ifndef PROTOBUF_Contact_2eproto__INCLUDED
#define PROTOBUF_Contact_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "ContactData.pb.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace protobuf_Contact_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsContactImpl();
void InitDefaultsContact();
inline void InitDefaults() {
  InitDefaultsContact();
}
}  // namespace protobuf_Contact_2eproto
namespace opentxs {
namespace proto {
class Contact;
class ContactDefaultTypeInternal;
extern ContactDefaultTypeInternal _Contact_default_instance_;
}  // namespace proto
}  // namespace opentxs
namespace opentxs {
namespace proto {

// ===================================================================

class Contact : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:opentxs.proto.Contact) */ {
 public:
  Contact();
  virtual ~Contact();

  Contact(const Contact& from);

  inline Contact& operator=(const Contact& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Contact(Contact&& from) noexcept
    : Contact() {
    *this = ::std::move(from);
  }

  inline Contact& operator=(Contact&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Contact& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Contact* internal_default_instance() {
    return reinterpret_cast<const Contact*>(
               &_Contact_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Contact* other);
  friend void swap(Contact& a, Contact& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Contact* New() const PROTOBUF_FINAL { return New(NULL); }

  Contact* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Contact& from);
  void MergeFrom(const Contact& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Contact* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string merged = 7;
  int merged_size() const;
  void clear_merged();
  static const int kMergedFieldNumber = 7;
  const ::std::string& merged(int index) const;
  ::std::string* mutable_merged(int index);
  void set_merged(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_merged(int index, ::std::string&& value);
  #endif
  void set_merged(int index, const char* value);
  void set_merged(int index, const char* value, size_t size);
  ::std::string* add_merged();
  void add_merged(const ::std::string& value);
  #if LANG_CXX11
  void add_merged(::std::string&& value);
  #endif
  void add_merged(const char* value);
  void add_merged(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& merged() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_merged();

  // optional string id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string label = 4;
  bool has_label() const;
  void clear_label();
  static const int kLabelFieldNumber = 4;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  #if LANG_CXX11
  void set_label(::std::string&& value);
  #endif
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // optional string mergedto = 6;
  bool has_mergedto() const;
  void clear_mergedto();
  static const int kMergedtoFieldNumber = 6;
  const ::std::string& mergedto() const;
  void set_mergedto(const ::std::string& value);
  #if LANG_CXX11
  void set_mergedto(::std::string&& value);
  #endif
  void set_mergedto(const char* value);
  void set_mergedto(const char* value, size_t size);
  ::std::string* mutable_mergedto();
  ::std::string* release_mergedto();
  void set_allocated_mergedto(::std::string* mergedto);

  // optional .opentxs.proto.ContactData contactData = 5;
  bool has_contactdata() const;
  void clear_contactdata();
  static const int kContactDataFieldNumber = 5;
  const ::opentxs::proto::ContactData& contactdata() const;
  ::opentxs::proto::ContactData* release_contactdata();
  ::opentxs::proto::ContactData* mutable_contactdata();
  void set_allocated_contactdata(::opentxs::proto::ContactData* contactdata);

  // optional uint64 revision = 3;
  bool has_revision() const;
  void clear_revision();
  static const int kRevisionFieldNumber = 3;
  ::google::protobuf::uint64 revision() const;
  void set_revision(::google::protobuf::uint64 value);

  // optional uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:opentxs.proto.Contact)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_id();
  void clear_has_id();
  void set_has_revision();
  void clear_has_revision();
  void set_has_label();
  void clear_has_label();
  void set_has_contactdata();
  void clear_has_contactdata();
  void set_has_mergedto();
  void clear_has_mergedto();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> merged_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  ::google::protobuf::internal::ArenaStringPtr mergedto_;
  ::opentxs::proto::ContactData* contactdata_;
  ::google::protobuf::uint64 revision_;
  ::google::protobuf::uint32 version_;
  friend struct ::protobuf_Contact_2eproto::TableStruct;
  friend void ::protobuf_Contact_2eproto::InitDefaultsContactImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Contact

// optional uint32 version = 1;
inline bool Contact::has_version() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Contact::set_has_version() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Contact::clear_has_version() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Contact::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 Contact::version() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.Contact.version)
  return version_;
}
inline void Contact::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.Contact.version)
}

// optional string id = 2;
inline bool Contact::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Contact::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Contact::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Contact::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& Contact::id() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.Contact.id)
  return id_.GetNoArena();
}
inline void Contact::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.Contact.id)
}
#if LANG_CXX11
inline void Contact::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.Contact.id)
}
#endif
inline void Contact::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.Contact.id)
}
inline void Contact::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.Contact.id)
}
inline ::std::string* Contact::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.Contact.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Contact::release_id() {
  // @@protoc_insertion_point(field_release:opentxs.proto.Contact.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Contact::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.Contact.id)
}

// optional uint64 revision = 3;
inline bool Contact::has_revision() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Contact::set_has_revision() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Contact::clear_has_revision() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Contact::clear_revision() {
  revision_ = GOOGLE_ULONGLONG(0);
  clear_has_revision();
}
inline ::google::protobuf::uint64 Contact::revision() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.Contact.revision)
  return revision_;
}
inline void Contact::set_revision(::google::protobuf::uint64 value) {
  set_has_revision();
  revision_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.Contact.revision)
}

// optional string label = 4;
inline bool Contact::has_label() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Contact::set_has_label() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Contact::clear_has_label() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Contact::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label();
}
inline const ::std::string& Contact::label() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.Contact.label)
  return label_.GetNoArena();
}
inline void Contact::set_label(const ::std::string& value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.Contact.label)
}
#if LANG_CXX11
inline void Contact::set_label(::std::string&& value) {
  set_has_label();
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.Contact.label)
}
#endif
inline void Contact::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.Contact.label)
}
inline void Contact::set_label(const char* value, size_t size) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.Contact.label)
}
inline ::std::string* Contact::mutable_label() {
  set_has_label();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.Contact.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Contact::release_label() {
  // @@protoc_insertion_point(field_release:opentxs.proto.Contact.label)
  clear_has_label();
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Contact::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    set_has_label();
  } else {
    clear_has_label();
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.Contact.label)
}

// optional .opentxs.proto.ContactData contactData = 5;
inline bool Contact::has_contactdata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Contact::set_has_contactdata() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Contact::clear_has_contactdata() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::opentxs::proto::ContactData& Contact::contactdata() const {
  const ::opentxs::proto::ContactData* p = contactdata_;
  // @@protoc_insertion_point(field_get:opentxs.proto.Contact.contactData)
  return p != NULL ? *p : *reinterpret_cast<const ::opentxs::proto::ContactData*>(
      &::opentxs::proto::_ContactData_default_instance_);
}
inline ::opentxs::proto::ContactData* Contact::release_contactdata() {
  // @@protoc_insertion_point(field_release:opentxs.proto.Contact.contactData)
  clear_has_contactdata();
  ::opentxs::proto::ContactData* temp = contactdata_;
  contactdata_ = NULL;
  return temp;
}
inline ::opentxs::proto::ContactData* Contact::mutable_contactdata() {
  set_has_contactdata();
  if (contactdata_ == NULL) {
    contactdata_ = new ::opentxs::proto::ContactData;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.proto.Contact.contactData)
  return contactdata_;
}
inline void Contact::set_allocated_contactdata(::opentxs::proto::ContactData* contactdata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(contactdata_);
  }
  if (contactdata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      contactdata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, contactdata, submessage_arena);
    }
    set_has_contactdata();
  } else {
    clear_has_contactdata();
  }
  contactdata_ = contactdata;
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.Contact.contactData)
}

// optional string mergedto = 6;
inline bool Contact::has_mergedto() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Contact::set_has_mergedto() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Contact::clear_has_mergedto() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Contact::clear_mergedto() {
  mergedto_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mergedto();
}
inline const ::std::string& Contact::mergedto() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.Contact.mergedto)
  return mergedto_.GetNoArena();
}
inline void Contact::set_mergedto(const ::std::string& value) {
  set_has_mergedto();
  mergedto_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.Contact.mergedto)
}
#if LANG_CXX11
inline void Contact::set_mergedto(::std::string&& value) {
  set_has_mergedto();
  mergedto_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.Contact.mergedto)
}
#endif
inline void Contact::set_mergedto(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mergedto();
  mergedto_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.Contact.mergedto)
}
inline void Contact::set_mergedto(const char* value, size_t size) {
  set_has_mergedto();
  mergedto_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.Contact.mergedto)
}
inline ::std::string* Contact::mutable_mergedto() {
  set_has_mergedto();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.Contact.mergedto)
  return mergedto_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Contact::release_mergedto() {
  // @@protoc_insertion_point(field_release:opentxs.proto.Contact.mergedto)
  clear_has_mergedto();
  return mergedto_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Contact::set_allocated_mergedto(::std::string* mergedto) {
  if (mergedto != NULL) {
    set_has_mergedto();
  } else {
    clear_has_mergedto();
  }
  mergedto_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mergedto);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.Contact.mergedto)
}

// repeated string merged = 7;
inline int Contact::merged_size() const {
  return merged_.size();
}
inline void Contact::clear_merged() {
  merged_.Clear();
}
inline const ::std::string& Contact::merged(int index) const {
  // @@protoc_insertion_point(field_get:opentxs.proto.Contact.merged)
  return merged_.Get(index);
}
inline ::std::string* Contact::mutable_merged(int index) {
  // @@protoc_insertion_point(field_mutable:opentxs.proto.Contact.merged)
  return merged_.Mutable(index);
}
inline void Contact::set_merged(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:opentxs.proto.Contact.merged)
  merged_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Contact::set_merged(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:opentxs.proto.Contact.merged)
  merged_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Contact::set_merged(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  merged_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opentxs.proto.Contact.merged)
}
inline void Contact::set_merged(int index, const char* value, size_t size) {
  merged_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.Contact.merged)
}
inline ::std::string* Contact::add_merged() {
  // @@protoc_insertion_point(field_add_mutable:opentxs.proto.Contact.merged)
  return merged_.Add();
}
inline void Contact::add_merged(const ::std::string& value) {
  merged_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:opentxs.proto.Contact.merged)
}
#if LANG_CXX11
inline void Contact::add_merged(::std::string&& value) {
  merged_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:opentxs.proto.Contact.merged)
}
#endif
inline void Contact::add_merged(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  merged_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opentxs.proto.Contact.merged)
}
inline void Contact::add_merged(const char* value, size_t size) {
  merged_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opentxs.proto.Contact.merged)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Contact::merged() const {
  // @@protoc_insertion_point(field_list:opentxs.proto.Contact.merged)
  return merged_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Contact::mutable_merged() {
  // @@protoc_insertion_point(field_mutable_list:opentxs.proto.Contact.merged)
  return &merged_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace opentxs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Contact_2eproto__INCLUDED
