// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BlockchainWalletKey.proto

#ifndef PROTOBUF_BlockchainWalletKey_2eproto__INCLUDED
#define PROTOBUF_BlockchainWalletKey_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "ContactEnums.pb.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace protobuf_BlockchainWalletKey_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsBlockchainWalletKeyImpl();
void InitDefaultsBlockchainWalletKey();
inline void InitDefaults() {
  InitDefaultsBlockchainWalletKey();
}
}  // namespace protobuf_BlockchainWalletKey_2eproto
namespace opentxs {
namespace proto {
class BlockchainWalletKey;
class BlockchainWalletKeyDefaultTypeInternal;
extern BlockchainWalletKeyDefaultTypeInternal _BlockchainWalletKey_default_instance_;
}  // namespace proto
}  // namespace opentxs
namespace opentxs {
namespace proto {

// ===================================================================

class BlockchainWalletKey : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:opentxs.proto.BlockchainWalletKey) */ {
 public:
  BlockchainWalletKey();
  virtual ~BlockchainWalletKey();

  BlockchainWalletKey(const BlockchainWalletKey& from);

  inline BlockchainWalletKey& operator=(const BlockchainWalletKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BlockchainWalletKey(BlockchainWalletKey&& from) noexcept
    : BlockchainWalletKey() {
    *this = ::std::move(from);
  }

  inline BlockchainWalletKey& operator=(BlockchainWalletKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BlockchainWalletKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockchainWalletKey* internal_default_instance() {
    return reinterpret_cast<const BlockchainWalletKey*>(
               &_BlockchainWalletKey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(BlockchainWalletKey* other);
  friend void swap(BlockchainWalletKey& a, BlockchainWalletKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BlockchainWalletKey* New() const PROTOBUF_FINAL { return New(NULL); }

  BlockchainWalletKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const BlockchainWalletKey& from);
  void MergeFrom(const BlockchainWalletKey& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BlockchainWalletKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string nym = 3;
  bool has_nym() const;
  void clear_nym();
  static const int kNymFieldNumber = 3;
  const ::std::string& nym() const;
  void set_nym(const ::std::string& value);
  #if LANG_CXX11
  void set_nym(::std::string&& value);
  #endif
  void set_nym(const char* value);
  void set_nym(const char* value, size_t size);
  ::std::string* mutable_nym();
  ::std::string* release_nym();
  void set_allocated_nym(::std::string* nym);

  // optional string subaccount = 4;
  bool has_subaccount() const;
  void clear_subaccount();
  static const int kSubaccountFieldNumber = 4;
  const ::std::string& subaccount() const;
  void set_subaccount(const ::std::string& value);
  #if LANG_CXX11
  void set_subaccount(::std::string&& value);
  #endif
  void set_subaccount(const char* value);
  void set_subaccount(const char* value, size_t size);
  ::std::string* mutable_subaccount();
  ::std::string* release_subaccount();
  void set_allocated_subaccount(::std::string* subaccount);

  // optional uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // optional .opentxs.proto.ContactItemType chain = 2;
  bool has_chain() const;
  void clear_chain();
  static const int kChainFieldNumber = 2;
  ::opentxs::proto::ContactItemType chain() const;
  void set_chain(::opentxs::proto::ContactItemType value);

  // optional uint32 subchain = 5;
  bool has_subchain() const;
  void clear_subchain();
  static const int kSubchainFieldNumber = 5;
  ::google::protobuf::uint32 subchain() const;
  void set_subchain(::google::protobuf::uint32 value);

  // optional uint32 index = 6;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 6;
  ::google::protobuf::uint32 index() const;
  void set_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:opentxs.proto.BlockchainWalletKey)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_chain();
  void clear_has_chain();
  void set_has_nym();
  void clear_has_nym();
  void set_has_subaccount();
  void clear_has_subaccount();
  void set_has_subchain();
  void clear_has_subchain();
  void set_has_index();
  void clear_has_index();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr nym_;
  ::google::protobuf::internal::ArenaStringPtr subaccount_;
  ::google::protobuf::uint32 version_;
  int chain_;
  ::google::protobuf::uint32 subchain_;
  ::google::protobuf::uint32 index_;
  friend struct ::protobuf_BlockchainWalletKey_2eproto::TableStruct;
  friend void ::protobuf_BlockchainWalletKey_2eproto::InitDefaultsBlockchainWalletKeyImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BlockchainWalletKey

// optional uint32 version = 1;
inline bool BlockchainWalletKey::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlockchainWalletKey::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlockchainWalletKey::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlockchainWalletKey::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 BlockchainWalletKey::version() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.BlockchainWalletKey.version)
  return version_;
}
inline void BlockchainWalletKey::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.BlockchainWalletKey.version)
}

// optional .opentxs.proto.ContactItemType chain = 2;
inline bool BlockchainWalletKey::has_chain() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlockchainWalletKey::set_has_chain() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BlockchainWalletKey::clear_has_chain() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BlockchainWalletKey::clear_chain() {
  chain_ = 0;
  clear_has_chain();
}
inline ::opentxs::proto::ContactItemType BlockchainWalletKey::chain() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.BlockchainWalletKey.chain)
  return static_cast< ::opentxs::proto::ContactItemType >(chain_);
}
inline void BlockchainWalletKey::set_chain(::opentxs::proto::ContactItemType value) {
  assert(::opentxs::proto::ContactItemType_IsValid(value));
  set_has_chain();
  chain_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.BlockchainWalletKey.chain)
}

// optional string nym = 3;
inline bool BlockchainWalletKey::has_nym() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockchainWalletKey::set_has_nym() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlockchainWalletKey::clear_has_nym() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlockchainWalletKey::clear_nym() {
  nym_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nym();
}
inline const ::std::string& BlockchainWalletKey::nym() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.BlockchainWalletKey.nym)
  return nym_.GetNoArena();
}
inline void BlockchainWalletKey::set_nym(const ::std::string& value) {
  set_has_nym();
  nym_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.BlockchainWalletKey.nym)
}
#if LANG_CXX11
inline void BlockchainWalletKey::set_nym(::std::string&& value) {
  set_has_nym();
  nym_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.BlockchainWalletKey.nym)
}
#endif
inline void BlockchainWalletKey::set_nym(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nym();
  nym_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.BlockchainWalletKey.nym)
}
inline void BlockchainWalletKey::set_nym(const char* value, size_t size) {
  set_has_nym();
  nym_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.BlockchainWalletKey.nym)
}
inline ::std::string* BlockchainWalletKey::mutable_nym() {
  set_has_nym();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.BlockchainWalletKey.nym)
  return nym_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockchainWalletKey::release_nym() {
  // @@protoc_insertion_point(field_release:opentxs.proto.BlockchainWalletKey.nym)
  clear_has_nym();
  return nym_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockchainWalletKey::set_allocated_nym(::std::string* nym) {
  if (nym != NULL) {
    set_has_nym();
  } else {
    clear_has_nym();
  }
  nym_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nym);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.BlockchainWalletKey.nym)
}

// optional string subaccount = 4;
inline bool BlockchainWalletKey::has_subaccount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlockchainWalletKey::set_has_subaccount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlockchainWalletKey::clear_has_subaccount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlockchainWalletKey::clear_subaccount() {
  subaccount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_subaccount();
}
inline const ::std::string& BlockchainWalletKey::subaccount() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.BlockchainWalletKey.subaccount)
  return subaccount_.GetNoArena();
}
inline void BlockchainWalletKey::set_subaccount(const ::std::string& value) {
  set_has_subaccount();
  subaccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.BlockchainWalletKey.subaccount)
}
#if LANG_CXX11
inline void BlockchainWalletKey::set_subaccount(::std::string&& value) {
  set_has_subaccount();
  subaccount_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.BlockchainWalletKey.subaccount)
}
#endif
inline void BlockchainWalletKey::set_subaccount(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_subaccount();
  subaccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.BlockchainWalletKey.subaccount)
}
inline void BlockchainWalletKey::set_subaccount(const char* value, size_t size) {
  set_has_subaccount();
  subaccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.BlockchainWalletKey.subaccount)
}
inline ::std::string* BlockchainWalletKey::mutable_subaccount() {
  set_has_subaccount();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.BlockchainWalletKey.subaccount)
  return subaccount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockchainWalletKey::release_subaccount() {
  // @@protoc_insertion_point(field_release:opentxs.proto.BlockchainWalletKey.subaccount)
  clear_has_subaccount();
  return subaccount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockchainWalletKey::set_allocated_subaccount(::std::string* subaccount) {
  if (subaccount != NULL) {
    set_has_subaccount();
  } else {
    clear_has_subaccount();
  }
  subaccount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subaccount);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.BlockchainWalletKey.subaccount)
}

// optional uint32 subchain = 5;
inline bool BlockchainWalletKey::has_subchain() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlockchainWalletKey::set_has_subchain() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BlockchainWalletKey::clear_has_subchain() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BlockchainWalletKey::clear_subchain() {
  subchain_ = 0u;
  clear_has_subchain();
}
inline ::google::protobuf::uint32 BlockchainWalletKey::subchain() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.BlockchainWalletKey.subchain)
  return subchain_;
}
inline void BlockchainWalletKey::set_subchain(::google::protobuf::uint32 value) {
  set_has_subchain();
  subchain_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.BlockchainWalletKey.subchain)
}

// optional uint32 index = 6;
inline bool BlockchainWalletKey::has_index() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BlockchainWalletKey::set_has_index() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BlockchainWalletKey::clear_has_index() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BlockchainWalletKey::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 BlockchainWalletKey::index() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.BlockchainWalletKey.index)
  return index_;
}
inline void BlockchainWalletKey::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.BlockchainWalletKey.index)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace opentxs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BlockchainWalletKey_2eproto__INCLUDED
