// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NymIDSource.proto

#ifndef PROTOBUF_NymIDSource_2eproto__INCLUDED
#define PROTOBUF_NymIDSource_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "Enums.pb.h"  // IWYU pragma: export
#include "AsymmetricKey.pb.h"  // IWYU pragma: export
#include "PaymentCode.pb.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace protobuf_NymIDSource_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsNymIDSourceImpl();
void InitDefaultsNymIDSource();
inline void InitDefaults() {
  InitDefaultsNymIDSource();
}
}  // namespace protobuf_NymIDSource_2eproto
namespace opentxs {
namespace proto {
class NymIDSource;
class NymIDSourceDefaultTypeInternal;
extern NymIDSourceDefaultTypeInternal _NymIDSource_default_instance_;
}  // namespace proto
}  // namespace opentxs
namespace opentxs {
namespace proto {

// ===================================================================

class NymIDSource : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:opentxs.proto.NymIDSource) */ {
 public:
  NymIDSource();
  virtual ~NymIDSource();

  NymIDSource(const NymIDSource& from);

  inline NymIDSource& operator=(const NymIDSource& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NymIDSource(NymIDSource&& from) noexcept
    : NymIDSource() {
    *this = ::std::move(from);
  }

  inline NymIDSource& operator=(NymIDSource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const NymIDSource& default_instance();

  enum SourceCase {
    kKey = 3,
    kPaymentcode = 4,
    SOURCE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NymIDSource* internal_default_instance() {
    return reinterpret_cast<const NymIDSource*>(
               &_NymIDSource_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(NymIDSource* other);
  friend void swap(NymIDSource& a, NymIDSource& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NymIDSource* New() const PROTOBUF_FINAL { return New(NULL); }

  NymIDSource* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const NymIDSource& from);
  void MergeFrom(const NymIDSource& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NymIDSource* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // optional .opentxs.proto.SourceType type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::opentxs::proto::SourceType type() const;
  void set_type(::opentxs::proto::SourceType value);

  // optional .opentxs.proto.AsymmetricKey key = 3;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 3;
  const ::opentxs::proto::AsymmetricKey& key() const;
  ::opentxs::proto::AsymmetricKey* release_key();
  ::opentxs::proto::AsymmetricKey* mutable_key();
  void set_allocated_key(::opentxs::proto::AsymmetricKey* key);

  // optional .opentxs.proto.PaymentCode paymentcode = 4;
  bool has_paymentcode() const;
  void clear_paymentcode();
  static const int kPaymentcodeFieldNumber = 4;
  const ::opentxs::proto::PaymentCode& paymentcode() const;
  ::opentxs::proto::PaymentCode* release_paymentcode();
  ::opentxs::proto::PaymentCode* mutable_paymentcode();
  void set_allocated_paymentcode(::opentxs::proto::PaymentCode* paymentcode);

  SourceCase source_case() const;
  // @@protoc_insertion_point(class_scope:opentxs.proto.NymIDSource)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_type();
  void clear_has_type();
  void set_has_key();
  void set_has_paymentcode();

  inline bool has_source() const;
  void clear_source();
  inline void clear_has_source();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 version_;
  int type_;
  union SourceUnion {
    SourceUnion() {}
    ::opentxs::proto::AsymmetricKey* key_;
    ::opentxs::proto::PaymentCode* paymentcode_;
  } source_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_NymIDSource_2eproto::TableStruct;
  friend void ::protobuf_NymIDSource_2eproto::InitDefaultsNymIDSourceImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NymIDSource

// optional uint32 version = 1;
inline bool NymIDSource::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NymIDSource::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NymIDSource::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NymIDSource::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 NymIDSource::version() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.NymIDSource.version)
  return version_;
}
inline void NymIDSource::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.NymIDSource.version)
}

// optional .opentxs.proto.SourceType type = 2;
inline bool NymIDSource::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NymIDSource::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NymIDSource::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NymIDSource::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::opentxs::proto::SourceType NymIDSource::type() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.NymIDSource.type)
  return static_cast< ::opentxs::proto::SourceType >(type_);
}
inline void NymIDSource::set_type(::opentxs::proto::SourceType value) {
  assert(::opentxs::proto::SourceType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.NymIDSource.type)
}

// optional .opentxs.proto.AsymmetricKey key = 3;
inline bool NymIDSource::has_key() const {
  return source_case() == kKey;
}
inline void NymIDSource::set_has_key() {
  _oneof_case_[0] = kKey;
}
inline ::opentxs::proto::AsymmetricKey* NymIDSource::release_key() {
  // @@protoc_insertion_point(field_release:opentxs.proto.NymIDSource.key)
  if (has_key()) {
    clear_has_source();
      ::opentxs::proto::AsymmetricKey* temp = source_.key_;
    source_.key_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::opentxs::proto::AsymmetricKey& NymIDSource::key() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.NymIDSource.key)
  return has_key()
      ? *source_.key_
      : *reinterpret_cast< ::opentxs::proto::AsymmetricKey*>(&::opentxs::proto::_AsymmetricKey_default_instance_);
}
inline ::opentxs::proto::AsymmetricKey* NymIDSource::mutable_key() {
  if (!has_key()) {
    clear_source();
    set_has_key();
    source_.key_ = new ::opentxs::proto::AsymmetricKey;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.proto.NymIDSource.key)
  return source_.key_;
}

// optional .opentxs.proto.PaymentCode paymentcode = 4;
inline bool NymIDSource::has_paymentcode() const {
  return source_case() == kPaymentcode;
}
inline void NymIDSource::set_has_paymentcode() {
  _oneof_case_[0] = kPaymentcode;
}
inline ::opentxs::proto::PaymentCode* NymIDSource::release_paymentcode() {
  // @@protoc_insertion_point(field_release:opentxs.proto.NymIDSource.paymentcode)
  if (has_paymentcode()) {
    clear_has_source();
      ::opentxs::proto::PaymentCode* temp = source_.paymentcode_;
    source_.paymentcode_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::opentxs::proto::PaymentCode& NymIDSource::paymentcode() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.NymIDSource.paymentcode)
  return has_paymentcode()
      ? *source_.paymentcode_
      : *reinterpret_cast< ::opentxs::proto::PaymentCode*>(&::opentxs::proto::_PaymentCode_default_instance_);
}
inline ::opentxs::proto::PaymentCode* NymIDSource::mutable_paymentcode() {
  if (!has_paymentcode()) {
    clear_source();
    set_has_paymentcode();
    source_.paymentcode_ = new ::opentxs::proto::PaymentCode;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.proto.NymIDSource.paymentcode)
  return source_.paymentcode_;
}

inline bool NymIDSource::has_source() const {
  return source_case() != SOURCE_NOT_SET;
}
inline void NymIDSource::clear_has_source() {
  _oneof_case_[0] = SOURCE_NOT_SET;
}
inline NymIDSource::SourceCase NymIDSource::source_case() const {
  return NymIDSource::SourceCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace opentxs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_NymIDSource_2eproto__INCLUDED
