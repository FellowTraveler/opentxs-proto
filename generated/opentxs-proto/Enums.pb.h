// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Enums.proto

#ifndef PROTOBUF_Enums_2eproto__INCLUDED
#define PROTOBUF_Enums_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)

namespace protobuf_Enums_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
inline void InitDefaults() {
}
}  // namespace protobuf_Enums_2eproto
namespace opentxs {
namespace proto {
}  // namespace proto
}  // namespace opentxs
namespace opentxs {
namespace proto {

enum SignatureRole {
  SIGROLE_ERROR = 0,
  SIGROLE_PUBCREDENTIAL = 1,
  SIGROLE_PRIVCREDENTIAL = 2,
  SIGROLE_NYMIDSOURCE = 3,
  SIGROLE_CLAIM = 4,
  SIGROLE_SERVERCONTRACT = 5,
  SIGROLE_UNITDEFINITION = 6,
  SIGROLE_PEERREQUEST = 7,
  SIGROLE_PEERREPLY = 8,
  SIGROLE_CONTEXT = 9,
  SIGROLE_ACCOUNT = 10,
  SIGROLE_SERVERREQUEST = 11,
  SIGROLE_SERVERREPLY = 12
};
bool SignatureRole_IsValid(int value);
const SignatureRole SignatureRole_MIN = SIGROLE_ERROR;
const SignatureRole SignatureRole_MAX = SIGROLE_SERVERREPLY;
const int SignatureRole_ARRAYSIZE = SignatureRole_MAX + 1;

enum CredentialType {
  CREDTYPE_ERROR = 0,
  CREDTYPE_LEGACY = 1,
  CREDTYPE_HD = 2
};
bool CredentialType_IsValid(int value);
const CredentialType CredentialType_MIN = CREDTYPE_ERROR;
const CredentialType CredentialType_MAX = CREDTYPE_HD;
const int CredentialType_ARRAYSIZE = CredentialType_MAX + 1;

enum CredentialRole {
  CREDROLE_ERROR = 0,
  CREDROLE_MASTERKEY = 1,
  CREDROLE_CHILDKEY = 2,
  CREDROLE_CONTACT = 3,
  CREDROLE_VERIFY = 4
};
bool CredentialRole_IsValid(int value);
const CredentialRole CredentialRole_MIN = CREDROLE_ERROR;
const CredentialRole CredentialRole_MAX = CREDROLE_VERIFY;
const int CredentialRole_ARRAYSIZE = CredentialRole_MAX + 1;

enum AsymmetricKeyType {
  AKEYTYPE_ERROR = 0,
  AKEYTYPE_NULL = 1,
  AKEYTYPE_LEGACY = 2,
  AKEYTYPE_SECP256K1 = 3,
  AKEYTYPE_ED25519 = 4
};
bool AsymmetricKeyType_IsValid(int value);
const AsymmetricKeyType AsymmetricKeyType_MIN = AKEYTYPE_ERROR;
const AsymmetricKeyType AsymmetricKeyType_MAX = AKEYTYPE_ED25519;
const int AsymmetricKeyType_ARRAYSIZE = AsymmetricKeyType_MAX + 1;

enum SymmetricKeyType {
  SKEYTYPE_ERROR = 0,
  SKEYTYPE_RAW = 1,
  SKEYTYPE_ECDH = 2,
  SKEYTYPE_ARGON2 = 3
};
bool SymmetricKeyType_IsValid(int value);
const SymmetricKeyType SymmetricKeyType_MIN = SKEYTYPE_ERROR;
const SymmetricKeyType SymmetricKeyType_MAX = SKEYTYPE_ARGON2;
const int SymmetricKeyType_ARRAYSIZE = SymmetricKeyType_MAX + 1;

enum SymmetricMode {
  SMODE_ERROR = 0,
  SMODE_CHACHA20POLY1305 = 1
};
bool SymmetricMode_IsValid(int value);
const SymmetricMode SymmetricMode_MIN = SMODE_ERROR;
const SymmetricMode SymmetricMode_MAX = SMODE_CHACHA20POLY1305;
const int SymmetricMode_ARRAYSIZE = SymmetricMode_MAX + 1;

enum KeyMode {
  KEYMODE_ERROR = 0,
  KEYMODE_NULL = 1,
  KEYMODE_PUBLIC = 2,
  KEYMODE_PRIVATE = 3
};
bool KeyMode_IsValid(int value);
const KeyMode KeyMode_MIN = KEYMODE_ERROR;
const KeyMode KeyMode_MAX = KEYMODE_PRIVATE;
const int KeyMode_ARRAYSIZE = KeyMode_MAX + 1;

enum KeyRole {
  KEYROLE_ERROR = 0,
  KEYROLE_AUTH = 1,
  KEYROLE_ENCRYPT = 2,
  KEYROLE_SIGN = 3
};
bool KeyRole_IsValid(int value);
const KeyRole KeyRole_MIN = KEYROLE_ERROR;
const KeyRole KeyRole_MAX = KEYROLE_SIGN;
const int KeyRole_ARRAYSIZE = KeyRole_MAX + 1;

enum SourceType {
  SOURCETYPE_ERROR = 0,
  SOURCETYPE_PUBKEY = 1,
  SOURCETYPE_BIP47 = 2
};
bool SourceType_IsValid(int value);
const SourceType SourceType_MIN = SOURCETYPE_ERROR;
const SourceType SourceType_MAX = SOURCETYPE_BIP47;
const int SourceType_ARRAYSIZE = SourceType_MAX + 1;

enum SourceProofType {
  SOURCEPROOFTYPE_ERROR = 0,
  SOURCEPROOFTYPE_SELF_SIGNATURE = 1,
  SOURCEPROOFTYPE_SIGNATURE = 2
};
bool SourceProofType_IsValid(int value);
const SourceProofType SourceProofType_MIN = SOURCEPROOFTYPE_ERROR;
const SourceProofType SourceProofType_MAX = SOURCEPROOFTYPE_SIGNATURE;
const int SourceProofType_ARRAYSIZE = SourceProofType_MAX + 1;

enum HashType {
  HASHTYPE_ERROR = 0,
  HASHTYPE_NONE = 1,
  HASHTYPE_SHA256 = 2,
  HASHTYPE_SHA512 = 3,
  HASHTYPE_BLAKE2B160 = 4,
  HASHTYPE_BLAKE2B256 = 5,
  HASHTYPE_BLAKE2B512 = 6,
  HASHTYPE_RIMEMD160 = 7
};
bool HashType_IsValid(int value);
const HashType HashType_MIN = HASHTYPE_ERROR;
const HashType HashType_MAX = HASHTYPE_RIMEMD160;
const int HashType_ARRAYSIZE = HashType_MAX + 1;

enum CredentialIndexMode {
  CREDINDEX_ERROR = 0,
  CREDINDEX_PRIVATE = 1,
  CREDINDEX_PUBLIC = 2
};
bool CredentialIndexMode_IsValid(int value);
const CredentialIndexMode CredentialIndexMode_MIN = CREDINDEX_ERROR;
const CredentialIndexMode CredentialIndexMode_MAX = CREDINDEX_PUBLIC;
const int CredentialIndexMode_ARRAYSIZE = CredentialIndexMode_MAX + 1;

enum CredentialSetMode {
  CREDSETMODE_ERROR = 0,
  CREDSETMODE_INDEX = 1,
  CREDSETMODE_FULL = 2
};
bool CredentialSetMode_IsValid(int value);
const CredentialSetMode CredentialSetMode_MIN = CREDSETMODE_ERROR;
const CredentialSetMode CredentialSetMode_MAX = CREDSETMODE_FULL;
const int CredentialSetMode_ARRAYSIZE = CredentialSetMode_MAX + 1;

// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace opentxs

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::opentxs::proto::SignatureRole> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::opentxs::proto::CredentialType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::opentxs::proto::CredentialRole> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::opentxs::proto::AsymmetricKeyType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::opentxs::proto::SymmetricKeyType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::opentxs::proto::SymmetricMode> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::opentxs::proto::KeyMode> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::opentxs::proto::KeyRole> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::opentxs::proto::SourceType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::opentxs::proto::SourceProofType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::opentxs::proto::HashType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::opentxs::proto::CredentialIndexMode> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::opentxs::proto::CredentialSetMode> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Enums_2eproto__INCLUDED
