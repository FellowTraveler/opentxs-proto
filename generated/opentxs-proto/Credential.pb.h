// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Credential.proto

#ifndef PROTOBUF_Credential_2eproto__INCLUDED
#define PROTOBUF_Credential_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "Enums.pb.h"  // IWYU pragma: export
#include "ChildCredentialParameters.pb.h"  // IWYU pragma: export
#include "MasterCredentialParameters.pb.h"  // IWYU pragma: export
#include "KeyCredential.pb.h"  // IWYU pragma: export
#include "ContactData.pb.h"  // IWYU pragma: export
#include "Signature.pb.h"  // IWYU pragma: export
#include "VerificationSet.pb.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace protobuf_Credential_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsCredentialImpl();
void InitDefaultsCredential();
inline void InitDefaults() {
  InitDefaultsCredential();
}
}  // namespace protobuf_Credential_2eproto
namespace opentxs {
namespace proto {
class Credential;
class CredentialDefaultTypeInternal;
extern CredentialDefaultTypeInternal _Credential_default_instance_;
}  // namespace proto
}  // namespace opentxs
namespace opentxs {
namespace proto {

// ===================================================================

class Credential : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:opentxs.proto.Credential) */ {
 public:
  Credential();
  virtual ~Credential();

  Credential(const Credential& from);

  inline Credential& operator=(const Credential& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Credential(Credential&& from) noexcept
    : Credential() {
    *this = ::std::move(from);
  }

  inline Credential& operator=(Credential&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Credential& default_instance();

  enum PublicDataCase {
    kPublicCredential = 9,
    kContactData = 11,
    kVerification = 12,
    PUBLICDATA_NOT_SET = 0,
  };

  enum PrivateDataCase {
    kPrivateCredential = 10,
    PRIVATEDATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Credential* internal_default_instance() {
    return reinterpret_cast<const Credential*>(
               &_Credential_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Credential* other);
  friend void swap(Credential& a, Credential& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Credential* New() const PROTOBUF_FINAL { return New(NULL); }

  Credential* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Credential& from);
  void MergeFrom(const Credential& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Credential* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .opentxs.proto.Signature signature = 15;
  int signature_size() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 15;
  const ::opentxs::proto::Signature& signature(int index) const;
  ::opentxs::proto::Signature* mutable_signature(int index);
  ::opentxs::proto::Signature* add_signature();
  ::google::protobuf::RepeatedPtrField< ::opentxs::proto::Signature >*
      mutable_signature();
  const ::google::protobuf::RepeatedPtrField< ::opentxs::proto::Signature >&
      signature() const;

  // optional string id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string nymID = 6;
  bool has_nymid() const;
  void clear_nymid();
  static const int kNymIDFieldNumber = 6;
  const ::std::string& nymid() const;
  void set_nymid(const ::std::string& value);
  #if LANG_CXX11
  void set_nymid(::std::string&& value);
  #endif
  void set_nymid(const char* value);
  void set_nymid(const char* value, size_t size);
  ::std::string* mutable_nymid();
  ::std::string* release_nymid();
  void set_allocated_nymid(::std::string* nymid);

  // optional .opentxs.proto.ChildCredentialParameters childData = 7;
  bool has_childdata() const;
  void clear_childdata();
  static const int kChildDataFieldNumber = 7;
  const ::opentxs::proto::ChildCredentialParameters& childdata() const;
  ::opentxs::proto::ChildCredentialParameters* release_childdata();
  ::opentxs::proto::ChildCredentialParameters* mutable_childdata();
  void set_allocated_childdata(::opentxs::proto::ChildCredentialParameters* childdata);

  // optional .opentxs.proto.MasterCredentialParameters masterData = 8;
  bool has_masterdata() const;
  void clear_masterdata();
  static const int kMasterDataFieldNumber = 8;
  const ::opentxs::proto::MasterCredentialParameters& masterdata() const;
  ::opentxs::proto::MasterCredentialParameters* release_masterdata();
  ::opentxs::proto::MasterCredentialParameters* mutable_masterdata();
  void set_allocated_masterdata(::opentxs::proto::MasterCredentialParameters* masterdata);

  // optional uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // optional .opentxs.proto.CredentialType type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::opentxs::proto::CredentialType type() const;
  void set_type(::opentxs::proto::CredentialType value);

  // optional .opentxs.proto.CredentialRole role = 4;
  bool has_role() const;
  void clear_role();
  static const int kRoleFieldNumber = 4;
  ::opentxs::proto::CredentialRole role() const;
  void set_role(::opentxs::proto::CredentialRole value);

  // optional .opentxs.proto.KeyMode mode = 5;
  bool has_mode() const;
  void clear_mode();
  static const int kModeFieldNumber = 5;
  ::opentxs::proto::KeyMode mode() const;
  void set_mode(::opentxs::proto::KeyMode value);

  // optional .opentxs.proto.KeyCredential publicCredential = 9;
  bool has_publiccredential() const;
  void clear_publiccredential();
  static const int kPublicCredentialFieldNumber = 9;
  const ::opentxs::proto::KeyCredential& publiccredential() const;
  ::opentxs::proto::KeyCredential* release_publiccredential();
  ::opentxs::proto::KeyCredential* mutable_publiccredential();
  void set_allocated_publiccredential(::opentxs::proto::KeyCredential* publiccredential);

  // optional .opentxs.proto.ContactData contactData = 11;
  bool has_contactdata() const;
  void clear_contactdata();
  static const int kContactDataFieldNumber = 11;
  const ::opentxs::proto::ContactData& contactdata() const;
  ::opentxs::proto::ContactData* release_contactdata();
  ::opentxs::proto::ContactData* mutable_contactdata();
  void set_allocated_contactdata(::opentxs::proto::ContactData* contactdata);

  // optional .opentxs.proto.VerificationSet verification = 12;
  bool has_verification() const;
  void clear_verification();
  static const int kVerificationFieldNumber = 12;
  const ::opentxs::proto::VerificationSet& verification() const;
  ::opentxs::proto::VerificationSet* release_verification();
  ::opentxs::proto::VerificationSet* mutable_verification();
  void set_allocated_verification(::opentxs::proto::VerificationSet* verification);

  // optional .opentxs.proto.KeyCredential privateCredential = 10;
  bool has_privatecredential() const;
  void clear_privatecredential();
  static const int kPrivateCredentialFieldNumber = 10;
  const ::opentxs::proto::KeyCredential& privatecredential() const;
  ::opentxs::proto::KeyCredential* release_privatecredential();
  ::opentxs::proto::KeyCredential* mutable_privatecredential();
  void set_allocated_privatecredential(::opentxs::proto::KeyCredential* privatecredential);

  PublicDataCase publicData_case() const;
  PrivateDataCase privateData_case() const;
  // @@protoc_insertion_point(class_scope:opentxs.proto.Credential)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_id();
  void clear_has_id();
  void set_has_type();
  void clear_has_type();
  void set_has_role();
  void clear_has_role();
  void set_has_mode();
  void clear_has_mode();
  void set_has_nymid();
  void clear_has_nymid();
  void set_has_childdata();
  void clear_has_childdata();
  void set_has_masterdata();
  void clear_has_masterdata();
  void set_has_publiccredential();
  void set_has_contactdata();
  void set_has_verification();
  void set_has_privatecredential();

  inline bool has_publicData() const;
  void clear_publicData();
  inline void clear_has_publicData();

  inline bool has_privateData() const;
  void clear_privateData();
  inline void clear_has_privateData();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::opentxs::proto::Signature > signature_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr nymid_;
  ::opentxs::proto::ChildCredentialParameters* childdata_;
  ::opentxs::proto::MasterCredentialParameters* masterdata_;
  ::google::protobuf::uint32 version_;
  int type_;
  int role_;
  int mode_;
  union PublicDataUnion {
    PublicDataUnion() {}
    ::opentxs::proto::KeyCredential* publiccredential_;
    ::opentxs::proto::ContactData* contactdata_;
    ::opentxs::proto::VerificationSet* verification_;
  } publicData_;
  union PrivateDataUnion {
    PrivateDataUnion() {}
    ::opentxs::proto::KeyCredential* privatecredential_;
  } privateData_;
  ::google::protobuf::uint32 _oneof_case_[2];

  friend struct ::protobuf_Credential_2eproto::TableStruct;
  friend void ::protobuf_Credential_2eproto::InitDefaultsCredentialImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Credential

// optional uint32 version = 1;
inline bool Credential::has_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Credential::set_has_version() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Credential::clear_has_version() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Credential::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 Credential::version() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.Credential.version)
  return version_;
}
inline void Credential::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.Credential.version)
}

// optional string id = 2;
inline bool Credential::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Credential::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Credential::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Credential::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& Credential::id() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.Credential.id)
  return id_.GetNoArena();
}
inline void Credential::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.Credential.id)
}
#if LANG_CXX11
inline void Credential::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.Credential.id)
}
#endif
inline void Credential::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.Credential.id)
}
inline void Credential::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.Credential.id)
}
inline ::std::string* Credential::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.Credential.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Credential::release_id() {
  // @@protoc_insertion_point(field_release:opentxs.proto.Credential.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Credential::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.Credential.id)
}

// optional .opentxs.proto.CredentialType type = 3;
inline bool Credential::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Credential::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Credential::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Credential::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::opentxs::proto::CredentialType Credential::type() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.Credential.type)
  return static_cast< ::opentxs::proto::CredentialType >(type_);
}
inline void Credential::set_type(::opentxs::proto::CredentialType value) {
  assert(::opentxs::proto::CredentialType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.Credential.type)
}

// optional .opentxs.proto.CredentialRole role = 4;
inline bool Credential::has_role() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Credential::set_has_role() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Credential::clear_has_role() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Credential::clear_role() {
  role_ = 0;
  clear_has_role();
}
inline ::opentxs::proto::CredentialRole Credential::role() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.Credential.role)
  return static_cast< ::opentxs::proto::CredentialRole >(role_);
}
inline void Credential::set_role(::opentxs::proto::CredentialRole value) {
  assert(::opentxs::proto::CredentialRole_IsValid(value));
  set_has_role();
  role_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.Credential.role)
}

// optional .opentxs.proto.KeyMode mode = 5;
inline bool Credential::has_mode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Credential::set_has_mode() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Credential::clear_has_mode() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Credential::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
inline ::opentxs::proto::KeyMode Credential::mode() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.Credential.mode)
  return static_cast< ::opentxs::proto::KeyMode >(mode_);
}
inline void Credential::set_mode(::opentxs::proto::KeyMode value) {
  assert(::opentxs::proto::KeyMode_IsValid(value));
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.Credential.mode)
}

// optional string nymID = 6;
inline bool Credential::has_nymid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Credential::set_has_nymid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Credential::clear_has_nymid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Credential::clear_nymid() {
  nymid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nymid();
}
inline const ::std::string& Credential::nymid() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.Credential.nymID)
  return nymid_.GetNoArena();
}
inline void Credential::set_nymid(const ::std::string& value) {
  set_has_nymid();
  nymid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.Credential.nymID)
}
#if LANG_CXX11
inline void Credential::set_nymid(::std::string&& value) {
  set_has_nymid();
  nymid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.Credential.nymID)
}
#endif
inline void Credential::set_nymid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nymid();
  nymid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.Credential.nymID)
}
inline void Credential::set_nymid(const char* value, size_t size) {
  set_has_nymid();
  nymid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.Credential.nymID)
}
inline ::std::string* Credential::mutable_nymid() {
  set_has_nymid();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.Credential.nymID)
  return nymid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Credential::release_nymid() {
  // @@protoc_insertion_point(field_release:opentxs.proto.Credential.nymID)
  clear_has_nymid();
  return nymid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Credential::set_allocated_nymid(::std::string* nymid) {
  if (nymid != NULL) {
    set_has_nymid();
  } else {
    clear_has_nymid();
  }
  nymid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nymid);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.Credential.nymID)
}

// optional .opentxs.proto.ChildCredentialParameters childData = 7;
inline bool Credential::has_childdata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Credential::set_has_childdata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Credential::clear_has_childdata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::opentxs::proto::ChildCredentialParameters& Credential::childdata() const {
  const ::opentxs::proto::ChildCredentialParameters* p = childdata_;
  // @@protoc_insertion_point(field_get:opentxs.proto.Credential.childData)
  return p != NULL ? *p : *reinterpret_cast<const ::opentxs::proto::ChildCredentialParameters*>(
      &::opentxs::proto::_ChildCredentialParameters_default_instance_);
}
inline ::opentxs::proto::ChildCredentialParameters* Credential::release_childdata() {
  // @@protoc_insertion_point(field_release:opentxs.proto.Credential.childData)
  clear_has_childdata();
  ::opentxs::proto::ChildCredentialParameters* temp = childdata_;
  childdata_ = NULL;
  return temp;
}
inline ::opentxs::proto::ChildCredentialParameters* Credential::mutable_childdata() {
  set_has_childdata();
  if (childdata_ == NULL) {
    childdata_ = new ::opentxs::proto::ChildCredentialParameters;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.proto.Credential.childData)
  return childdata_;
}
inline void Credential::set_allocated_childdata(::opentxs::proto::ChildCredentialParameters* childdata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(childdata_);
  }
  if (childdata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      childdata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, childdata, submessage_arena);
    }
    set_has_childdata();
  } else {
    clear_has_childdata();
  }
  childdata_ = childdata;
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.Credential.childData)
}

// optional .opentxs.proto.MasterCredentialParameters masterData = 8;
inline bool Credential::has_masterdata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Credential::set_has_masterdata() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Credential::clear_has_masterdata() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::opentxs::proto::MasterCredentialParameters& Credential::masterdata() const {
  const ::opentxs::proto::MasterCredentialParameters* p = masterdata_;
  // @@protoc_insertion_point(field_get:opentxs.proto.Credential.masterData)
  return p != NULL ? *p : *reinterpret_cast<const ::opentxs::proto::MasterCredentialParameters*>(
      &::opentxs::proto::_MasterCredentialParameters_default_instance_);
}
inline ::opentxs::proto::MasterCredentialParameters* Credential::release_masterdata() {
  // @@protoc_insertion_point(field_release:opentxs.proto.Credential.masterData)
  clear_has_masterdata();
  ::opentxs::proto::MasterCredentialParameters* temp = masterdata_;
  masterdata_ = NULL;
  return temp;
}
inline ::opentxs::proto::MasterCredentialParameters* Credential::mutable_masterdata() {
  set_has_masterdata();
  if (masterdata_ == NULL) {
    masterdata_ = new ::opentxs::proto::MasterCredentialParameters;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.proto.Credential.masterData)
  return masterdata_;
}
inline void Credential::set_allocated_masterdata(::opentxs::proto::MasterCredentialParameters* masterdata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(masterdata_);
  }
  if (masterdata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      masterdata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, masterdata, submessage_arena);
    }
    set_has_masterdata();
  } else {
    clear_has_masterdata();
  }
  masterdata_ = masterdata;
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.Credential.masterData)
}

// optional .opentxs.proto.KeyCredential publicCredential = 9;
inline bool Credential::has_publiccredential() const {
  return publicData_case() == kPublicCredential;
}
inline void Credential::set_has_publiccredential() {
  _oneof_case_[0] = kPublicCredential;
}
inline ::opentxs::proto::KeyCredential* Credential::release_publiccredential() {
  // @@protoc_insertion_point(field_release:opentxs.proto.Credential.publicCredential)
  if (has_publiccredential()) {
    clear_has_publicData();
      ::opentxs::proto::KeyCredential* temp = publicData_.publiccredential_;
    publicData_.publiccredential_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::opentxs::proto::KeyCredential& Credential::publiccredential() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.Credential.publicCredential)
  return has_publiccredential()
      ? *publicData_.publiccredential_
      : *reinterpret_cast< ::opentxs::proto::KeyCredential*>(&::opentxs::proto::_KeyCredential_default_instance_);
}
inline ::opentxs::proto::KeyCredential* Credential::mutable_publiccredential() {
  if (!has_publiccredential()) {
    clear_publicData();
    set_has_publiccredential();
    publicData_.publiccredential_ = new ::opentxs::proto::KeyCredential;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.proto.Credential.publicCredential)
  return publicData_.publiccredential_;
}

// optional .opentxs.proto.ContactData contactData = 11;
inline bool Credential::has_contactdata() const {
  return publicData_case() == kContactData;
}
inline void Credential::set_has_contactdata() {
  _oneof_case_[0] = kContactData;
}
inline ::opentxs::proto::ContactData* Credential::release_contactdata() {
  // @@protoc_insertion_point(field_release:opentxs.proto.Credential.contactData)
  if (has_contactdata()) {
    clear_has_publicData();
      ::opentxs::proto::ContactData* temp = publicData_.contactdata_;
    publicData_.contactdata_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::opentxs::proto::ContactData& Credential::contactdata() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.Credential.contactData)
  return has_contactdata()
      ? *publicData_.contactdata_
      : *reinterpret_cast< ::opentxs::proto::ContactData*>(&::opentxs::proto::_ContactData_default_instance_);
}
inline ::opentxs::proto::ContactData* Credential::mutable_contactdata() {
  if (!has_contactdata()) {
    clear_publicData();
    set_has_contactdata();
    publicData_.contactdata_ = new ::opentxs::proto::ContactData;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.proto.Credential.contactData)
  return publicData_.contactdata_;
}

// optional .opentxs.proto.VerificationSet verification = 12;
inline bool Credential::has_verification() const {
  return publicData_case() == kVerification;
}
inline void Credential::set_has_verification() {
  _oneof_case_[0] = kVerification;
}
inline ::opentxs::proto::VerificationSet* Credential::release_verification() {
  // @@protoc_insertion_point(field_release:opentxs.proto.Credential.verification)
  if (has_verification()) {
    clear_has_publicData();
      ::opentxs::proto::VerificationSet* temp = publicData_.verification_;
    publicData_.verification_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::opentxs::proto::VerificationSet& Credential::verification() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.Credential.verification)
  return has_verification()
      ? *publicData_.verification_
      : *reinterpret_cast< ::opentxs::proto::VerificationSet*>(&::opentxs::proto::_VerificationSet_default_instance_);
}
inline ::opentxs::proto::VerificationSet* Credential::mutable_verification() {
  if (!has_verification()) {
    clear_publicData();
    set_has_verification();
    publicData_.verification_ = new ::opentxs::proto::VerificationSet;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.proto.Credential.verification)
  return publicData_.verification_;
}

// optional .opentxs.proto.KeyCredential privateCredential = 10;
inline bool Credential::has_privatecredential() const {
  return privateData_case() == kPrivateCredential;
}
inline void Credential::set_has_privatecredential() {
  _oneof_case_[1] = kPrivateCredential;
}
inline ::opentxs::proto::KeyCredential* Credential::release_privatecredential() {
  // @@protoc_insertion_point(field_release:opentxs.proto.Credential.privateCredential)
  if (has_privatecredential()) {
    clear_has_privateData();
      ::opentxs::proto::KeyCredential* temp = privateData_.privatecredential_;
    privateData_.privatecredential_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::opentxs::proto::KeyCredential& Credential::privatecredential() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.Credential.privateCredential)
  return has_privatecredential()
      ? *privateData_.privatecredential_
      : *reinterpret_cast< ::opentxs::proto::KeyCredential*>(&::opentxs::proto::_KeyCredential_default_instance_);
}
inline ::opentxs::proto::KeyCredential* Credential::mutable_privatecredential() {
  if (!has_privatecredential()) {
    clear_privateData();
    set_has_privatecredential();
    privateData_.privatecredential_ = new ::opentxs::proto::KeyCredential;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.proto.Credential.privateCredential)
  return privateData_.privatecredential_;
}

// repeated .opentxs.proto.Signature signature = 15;
inline int Credential::signature_size() const {
  return signature_.size();
}
inline const ::opentxs::proto::Signature& Credential::signature(int index) const {
  // @@protoc_insertion_point(field_get:opentxs.proto.Credential.signature)
  return signature_.Get(index);
}
inline ::opentxs::proto::Signature* Credential::mutable_signature(int index) {
  // @@protoc_insertion_point(field_mutable:opentxs.proto.Credential.signature)
  return signature_.Mutable(index);
}
inline ::opentxs::proto::Signature* Credential::add_signature() {
  // @@protoc_insertion_point(field_add:opentxs.proto.Credential.signature)
  return signature_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::opentxs::proto::Signature >*
Credential::mutable_signature() {
  // @@protoc_insertion_point(field_mutable_list:opentxs.proto.Credential.signature)
  return &signature_;
}
inline const ::google::protobuf::RepeatedPtrField< ::opentxs::proto::Signature >&
Credential::signature() const {
  // @@protoc_insertion_point(field_list:opentxs.proto.Credential.signature)
  return signature_;
}

inline bool Credential::has_publicData() const {
  return publicData_case() != PUBLICDATA_NOT_SET;
}
inline void Credential::clear_has_publicData() {
  _oneof_case_[0] = PUBLICDATA_NOT_SET;
}
inline bool Credential::has_privateData() const {
  return privateData_case() != PRIVATEDATA_NOT_SET;
}
inline void Credential::clear_has_privateData() {
  _oneof_case_[1] = PRIVATEDATA_NOT_SET;
}
inline Credential::PublicDataCase Credential::publicData_case() const {
  return Credential::PublicDataCase(_oneof_case_[0]);
}
inline Credential::PrivateDataCase Credential::privateData_case() const {
  return Credential::PrivateDataCase(_oneof_case_[1]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace opentxs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Credential_2eproto__INCLUDED
