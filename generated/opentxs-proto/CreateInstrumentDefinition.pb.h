// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CreateInstrumentDefinition.proto

#ifndef PROTOBUF_CreateInstrumentDefinition_2eproto__INCLUDED
#define PROTOBUF_CreateInstrumentDefinition_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "ContactEnums.pb.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace protobuf_CreateInstrumentDefinition_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsCreateInstrumentDefinitionImpl();
void InitDefaultsCreateInstrumentDefinition();
inline void InitDefaults() {
  InitDefaultsCreateInstrumentDefinition();
}
}  // namespace protobuf_CreateInstrumentDefinition_2eproto
namespace opentxs {
namespace proto {
class CreateInstrumentDefinition;
class CreateInstrumentDefinitionDefaultTypeInternal;
extern CreateInstrumentDefinitionDefaultTypeInternal _CreateInstrumentDefinition_default_instance_;
}  // namespace proto
}  // namespace opentxs
namespace opentxs {
namespace proto {

// ===================================================================

class CreateInstrumentDefinition : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:opentxs.proto.CreateInstrumentDefinition) */ {
 public:
  CreateInstrumentDefinition();
  virtual ~CreateInstrumentDefinition();

  CreateInstrumentDefinition(const CreateInstrumentDefinition& from);

  inline CreateInstrumentDefinition& operator=(const CreateInstrumentDefinition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateInstrumentDefinition(CreateInstrumentDefinition&& from) noexcept
    : CreateInstrumentDefinition() {
    *this = ::std::move(from);
  }

  inline CreateInstrumentDefinition& operator=(CreateInstrumentDefinition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CreateInstrumentDefinition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateInstrumentDefinition* internal_default_instance() {
    return reinterpret_cast<const CreateInstrumentDefinition*>(
               &_CreateInstrumentDefinition_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CreateInstrumentDefinition* other);
  friend void swap(CreateInstrumentDefinition& a, CreateInstrumentDefinition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateInstrumentDefinition* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateInstrumentDefinition* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const CreateInstrumentDefinition& from);
  void MergeFrom(const CreateInstrumentDefinition& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CreateInstrumentDefinition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string symbol = 3;
  bool has_symbol() const;
  void clear_symbol();
  static const int kSymbolFieldNumber = 3;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  #if LANG_CXX11
  void set_symbol(::std::string&& value);
  #endif
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);

  // optional string primaryunitname = 4;
  bool has_primaryunitname() const;
  void clear_primaryunitname();
  static const int kPrimaryunitnameFieldNumber = 4;
  const ::std::string& primaryunitname() const;
  void set_primaryunitname(const ::std::string& value);
  #if LANG_CXX11
  void set_primaryunitname(::std::string&& value);
  #endif
  void set_primaryunitname(const char* value);
  void set_primaryunitname(const char* value, size_t size);
  ::std::string* mutable_primaryunitname();
  ::std::string* release_primaryunitname();
  void set_allocated_primaryunitname(::std::string* primaryunitname);

  // optional string fractionalunitname = 5;
  bool has_fractionalunitname() const;
  void clear_fractionalunitname();
  static const int kFractionalunitnameFieldNumber = 5;
  const ::std::string& fractionalunitname() const;
  void set_fractionalunitname(const ::std::string& value);
  #if LANG_CXX11
  void set_fractionalunitname(::std::string&& value);
  #endif
  void set_fractionalunitname(const char* value);
  void set_fractionalunitname(const char* value, size_t size);
  ::std::string* mutable_fractionalunitname();
  ::std::string* release_fractionalunitname();
  void set_allocated_fractionalunitname(::std::string* fractionalunitname);

  // optional string tla = 6;
  bool has_tla() const;
  void clear_tla();
  static const int kTlaFieldNumber = 6;
  const ::std::string& tla() const;
  void set_tla(const ::std::string& value);
  #if LANG_CXX11
  void set_tla(::std::string&& value);
  #endif
  void set_tla(const char* value);
  void set_tla(const char* value, size_t size);
  ::std::string* mutable_tla();
  ::std::string* release_tla();
  void set_allocated_tla(::std::string* tla);

  // optional string terms = 8;
  bool has_terms() const;
  void clear_terms();
  static const int kTermsFieldNumber = 8;
  const ::std::string& terms() const;
  void set_terms(const ::std::string& value);
  #if LANG_CXX11
  void set_terms(::std::string&& value);
  #endif
  void set_terms(const char* value);
  void set_terms(const char* value, size_t size);
  ::std::string* mutable_terms();
  ::std::string* release_terms();
  void set_allocated_terms(::std::string* terms);

  // optional uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // optional uint32 power = 7;
  bool has_power() const;
  void clear_power();
  static const int kPowerFieldNumber = 7;
  ::google::protobuf::uint32 power() const;
  void set_power(::google::protobuf::uint32 value);

  // optional .opentxs.proto.ContactItemType unitofaccount = 9;
  bool has_unitofaccount() const;
  void clear_unitofaccount();
  static const int kUnitofaccountFieldNumber = 9;
  ::opentxs::proto::ContactItemType unitofaccount() const;
  void set_unitofaccount(::opentxs::proto::ContactItemType value);

  // @@protoc_insertion_point(class_scope:opentxs.proto.CreateInstrumentDefinition)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_name();
  void clear_has_name();
  void set_has_symbol();
  void clear_has_symbol();
  void set_has_primaryunitname();
  void clear_has_primaryunitname();
  void set_has_fractionalunitname();
  void clear_has_fractionalunitname();
  void set_has_tla();
  void clear_has_tla();
  void set_has_power();
  void clear_has_power();
  void set_has_terms();
  void clear_has_terms();
  void set_has_unitofaccount();
  void clear_has_unitofaccount();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::internal::ArenaStringPtr primaryunitname_;
  ::google::protobuf::internal::ArenaStringPtr fractionalunitname_;
  ::google::protobuf::internal::ArenaStringPtr tla_;
  ::google::protobuf::internal::ArenaStringPtr terms_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::uint32 power_;
  int unitofaccount_;
  friend struct ::protobuf_CreateInstrumentDefinition_2eproto::TableStruct;
  friend void ::protobuf_CreateInstrumentDefinition_2eproto::InitDefaultsCreateInstrumentDefinitionImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateInstrumentDefinition

// optional uint32 version = 1;
inline bool CreateInstrumentDefinition::has_version() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CreateInstrumentDefinition::set_has_version() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CreateInstrumentDefinition::clear_has_version() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CreateInstrumentDefinition::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 CreateInstrumentDefinition::version() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.CreateInstrumentDefinition.version)
  return version_;
}
inline void CreateInstrumentDefinition::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.CreateInstrumentDefinition.version)
}

// optional string name = 2;
inline bool CreateInstrumentDefinition::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateInstrumentDefinition::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateInstrumentDefinition::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateInstrumentDefinition::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& CreateInstrumentDefinition::name() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.CreateInstrumentDefinition.name)
  return name_.GetNoArena();
}
inline void CreateInstrumentDefinition::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.CreateInstrumentDefinition.name)
}
#if LANG_CXX11
inline void CreateInstrumentDefinition::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.CreateInstrumentDefinition.name)
}
#endif
inline void CreateInstrumentDefinition::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.CreateInstrumentDefinition.name)
}
inline void CreateInstrumentDefinition::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.CreateInstrumentDefinition.name)
}
inline ::std::string* CreateInstrumentDefinition::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.CreateInstrumentDefinition.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateInstrumentDefinition::release_name() {
  // @@protoc_insertion_point(field_release:opentxs.proto.CreateInstrumentDefinition.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateInstrumentDefinition::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.CreateInstrumentDefinition.name)
}

// optional string symbol = 3;
inline bool CreateInstrumentDefinition::has_symbol() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateInstrumentDefinition::set_has_symbol() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateInstrumentDefinition::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateInstrumentDefinition::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_symbol();
}
inline const ::std::string& CreateInstrumentDefinition::symbol() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.CreateInstrumentDefinition.symbol)
  return symbol_.GetNoArena();
}
inline void CreateInstrumentDefinition::set_symbol(const ::std::string& value) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.CreateInstrumentDefinition.symbol)
}
#if LANG_CXX11
inline void CreateInstrumentDefinition::set_symbol(::std::string&& value) {
  set_has_symbol();
  symbol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.CreateInstrumentDefinition.symbol)
}
#endif
inline void CreateInstrumentDefinition::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.CreateInstrumentDefinition.symbol)
}
inline void CreateInstrumentDefinition::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.CreateInstrumentDefinition.symbol)
}
inline ::std::string* CreateInstrumentDefinition::mutable_symbol() {
  set_has_symbol();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.CreateInstrumentDefinition.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateInstrumentDefinition::release_symbol() {
  // @@protoc_insertion_point(field_release:opentxs.proto.CreateInstrumentDefinition.symbol)
  clear_has_symbol();
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateInstrumentDefinition::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    set_has_symbol();
  } else {
    clear_has_symbol();
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.CreateInstrumentDefinition.symbol)
}

// optional string primaryunitname = 4;
inline bool CreateInstrumentDefinition::has_primaryunitname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreateInstrumentDefinition::set_has_primaryunitname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CreateInstrumentDefinition::clear_has_primaryunitname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CreateInstrumentDefinition::clear_primaryunitname() {
  primaryunitname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_primaryunitname();
}
inline const ::std::string& CreateInstrumentDefinition::primaryunitname() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.CreateInstrumentDefinition.primaryunitname)
  return primaryunitname_.GetNoArena();
}
inline void CreateInstrumentDefinition::set_primaryunitname(const ::std::string& value) {
  set_has_primaryunitname();
  primaryunitname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.CreateInstrumentDefinition.primaryunitname)
}
#if LANG_CXX11
inline void CreateInstrumentDefinition::set_primaryunitname(::std::string&& value) {
  set_has_primaryunitname();
  primaryunitname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.CreateInstrumentDefinition.primaryunitname)
}
#endif
inline void CreateInstrumentDefinition::set_primaryunitname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_primaryunitname();
  primaryunitname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.CreateInstrumentDefinition.primaryunitname)
}
inline void CreateInstrumentDefinition::set_primaryunitname(const char* value, size_t size) {
  set_has_primaryunitname();
  primaryunitname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.CreateInstrumentDefinition.primaryunitname)
}
inline ::std::string* CreateInstrumentDefinition::mutable_primaryunitname() {
  set_has_primaryunitname();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.CreateInstrumentDefinition.primaryunitname)
  return primaryunitname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateInstrumentDefinition::release_primaryunitname() {
  // @@protoc_insertion_point(field_release:opentxs.proto.CreateInstrumentDefinition.primaryunitname)
  clear_has_primaryunitname();
  return primaryunitname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateInstrumentDefinition::set_allocated_primaryunitname(::std::string* primaryunitname) {
  if (primaryunitname != NULL) {
    set_has_primaryunitname();
  } else {
    clear_has_primaryunitname();
  }
  primaryunitname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), primaryunitname);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.CreateInstrumentDefinition.primaryunitname)
}

// optional string fractionalunitname = 5;
inline bool CreateInstrumentDefinition::has_fractionalunitname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CreateInstrumentDefinition::set_has_fractionalunitname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CreateInstrumentDefinition::clear_has_fractionalunitname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CreateInstrumentDefinition::clear_fractionalunitname() {
  fractionalunitname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fractionalunitname();
}
inline const ::std::string& CreateInstrumentDefinition::fractionalunitname() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.CreateInstrumentDefinition.fractionalunitname)
  return fractionalunitname_.GetNoArena();
}
inline void CreateInstrumentDefinition::set_fractionalunitname(const ::std::string& value) {
  set_has_fractionalunitname();
  fractionalunitname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.CreateInstrumentDefinition.fractionalunitname)
}
#if LANG_CXX11
inline void CreateInstrumentDefinition::set_fractionalunitname(::std::string&& value) {
  set_has_fractionalunitname();
  fractionalunitname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.CreateInstrumentDefinition.fractionalunitname)
}
#endif
inline void CreateInstrumentDefinition::set_fractionalunitname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fractionalunitname();
  fractionalunitname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.CreateInstrumentDefinition.fractionalunitname)
}
inline void CreateInstrumentDefinition::set_fractionalunitname(const char* value, size_t size) {
  set_has_fractionalunitname();
  fractionalunitname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.CreateInstrumentDefinition.fractionalunitname)
}
inline ::std::string* CreateInstrumentDefinition::mutable_fractionalunitname() {
  set_has_fractionalunitname();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.CreateInstrumentDefinition.fractionalunitname)
  return fractionalunitname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateInstrumentDefinition::release_fractionalunitname() {
  // @@protoc_insertion_point(field_release:opentxs.proto.CreateInstrumentDefinition.fractionalunitname)
  clear_has_fractionalunitname();
  return fractionalunitname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateInstrumentDefinition::set_allocated_fractionalunitname(::std::string* fractionalunitname) {
  if (fractionalunitname != NULL) {
    set_has_fractionalunitname();
  } else {
    clear_has_fractionalunitname();
  }
  fractionalunitname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fractionalunitname);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.CreateInstrumentDefinition.fractionalunitname)
}

// optional string tla = 6;
inline bool CreateInstrumentDefinition::has_tla() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CreateInstrumentDefinition::set_has_tla() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CreateInstrumentDefinition::clear_has_tla() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CreateInstrumentDefinition::clear_tla() {
  tla_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tla();
}
inline const ::std::string& CreateInstrumentDefinition::tla() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.CreateInstrumentDefinition.tla)
  return tla_.GetNoArena();
}
inline void CreateInstrumentDefinition::set_tla(const ::std::string& value) {
  set_has_tla();
  tla_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.CreateInstrumentDefinition.tla)
}
#if LANG_CXX11
inline void CreateInstrumentDefinition::set_tla(::std::string&& value) {
  set_has_tla();
  tla_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.CreateInstrumentDefinition.tla)
}
#endif
inline void CreateInstrumentDefinition::set_tla(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tla();
  tla_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.CreateInstrumentDefinition.tla)
}
inline void CreateInstrumentDefinition::set_tla(const char* value, size_t size) {
  set_has_tla();
  tla_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.CreateInstrumentDefinition.tla)
}
inline ::std::string* CreateInstrumentDefinition::mutable_tla() {
  set_has_tla();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.CreateInstrumentDefinition.tla)
  return tla_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateInstrumentDefinition::release_tla() {
  // @@protoc_insertion_point(field_release:opentxs.proto.CreateInstrumentDefinition.tla)
  clear_has_tla();
  return tla_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateInstrumentDefinition::set_allocated_tla(::std::string* tla) {
  if (tla != NULL) {
    set_has_tla();
  } else {
    clear_has_tla();
  }
  tla_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tla);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.CreateInstrumentDefinition.tla)
}

// optional uint32 power = 7;
inline bool CreateInstrumentDefinition::has_power() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CreateInstrumentDefinition::set_has_power() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CreateInstrumentDefinition::clear_has_power() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CreateInstrumentDefinition::clear_power() {
  power_ = 0u;
  clear_has_power();
}
inline ::google::protobuf::uint32 CreateInstrumentDefinition::power() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.CreateInstrumentDefinition.power)
  return power_;
}
inline void CreateInstrumentDefinition::set_power(::google::protobuf::uint32 value) {
  set_has_power();
  power_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.CreateInstrumentDefinition.power)
}

// optional string terms = 8;
inline bool CreateInstrumentDefinition::has_terms() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CreateInstrumentDefinition::set_has_terms() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CreateInstrumentDefinition::clear_has_terms() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CreateInstrumentDefinition::clear_terms() {
  terms_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_terms();
}
inline const ::std::string& CreateInstrumentDefinition::terms() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.CreateInstrumentDefinition.terms)
  return terms_.GetNoArena();
}
inline void CreateInstrumentDefinition::set_terms(const ::std::string& value) {
  set_has_terms();
  terms_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.CreateInstrumentDefinition.terms)
}
#if LANG_CXX11
inline void CreateInstrumentDefinition::set_terms(::std::string&& value) {
  set_has_terms();
  terms_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.CreateInstrumentDefinition.terms)
}
#endif
inline void CreateInstrumentDefinition::set_terms(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_terms();
  terms_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.CreateInstrumentDefinition.terms)
}
inline void CreateInstrumentDefinition::set_terms(const char* value, size_t size) {
  set_has_terms();
  terms_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.CreateInstrumentDefinition.terms)
}
inline ::std::string* CreateInstrumentDefinition::mutable_terms() {
  set_has_terms();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.CreateInstrumentDefinition.terms)
  return terms_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateInstrumentDefinition::release_terms() {
  // @@protoc_insertion_point(field_release:opentxs.proto.CreateInstrumentDefinition.terms)
  clear_has_terms();
  return terms_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateInstrumentDefinition::set_allocated_terms(::std::string* terms) {
  if (terms != NULL) {
    set_has_terms();
  } else {
    clear_has_terms();
  }
  terms_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), terms);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.CreateInstrumentDefinition.terms)
}

// optional .opentxs.proto.ContactItemType unitofaccount = 9;
inline bool CreateInstrumentDefinition::has_unitofaccount() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CreateInstrumentDefinition::set_has_unitofaccount() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CreateInstrumentDefinition::clear_has_unitofaccount() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CreateInstrumentDefinition::clear_unitofaccount() {
  unitofaccount_ = 0;
  clear_has_unitofaccount();
}
inline ::opentxs::proto::ContactItemType CreateInstrumentDefinition::unitofaccount() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.CreateInstrumentDefinition.unitofaccount)
  return static_cast< ::opentxs::proto::ContactItemType >(unitofaccount_);
}
inline void CreateInstrumentDefinition::set_unitofaccount(::opentxs::proto::ContactItemType value) {
  assert(::opentxs::proto::ContactItemType_IsValid(value));
  set_has_unitofaccount();
  unitofaccount_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.CreateInstrumentDefinition.unitofaccount)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace opentxs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CreateInstrumentDefinition_2eproto__INCLUDED
