// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StorageItemHash.proto

#ifndef PROTOBUF_StorageItemHash_2eproto__INCLUDED
#define PROTOBUF_StorageItemHash_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "StorageEnums.pb.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace protobuf_StorageItemHash_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsStorageItemHashImpl();
void InitDefaultsStorageItemHash();
inline void InitDefaults() {
  InitDefaultsStorageItemHash();
}
}  // namespace protobuf_StorageItemHash_2eproto
namespace opentxs {
namespace proto {
class StorageItemHash;
class StorageItemHashDefaultTypeInternal;
extern StorageItemHashDefaultTypeInternal _StorageItemHash_default_instance_;
}  // namespace proto
}  // namespace opentxs
namespace opentxs {
namespace proto {

// ===================================================================

class StorageItemHash : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:opentxs.proto.StorageItemHash) */ {
 public:
  StorageItemHash();
  virtual ~StorageItemHash();

  StorageItemHash(const StorageItemHash& from);

  inline StorageItemHash& operator=(const StorageItemHash& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StorageItemHash(StorageItemHash&& from) noexcept
    : StorageItemHash() {
    *this = ::std::move(from);
  }

  inline StorageItemHash& operator=(StorageItemHash&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const StorageItemHash& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StorageItemHash* internal_default_instance() {
    return reinterpret_cast<const StorageItemHash*>(
               &_StorageItemHash_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(StorageItemHash* other);
  friend void swap(StorageItemHash& a, StorageItemHash& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StorageItemHash* New() const PROTOBUF_FINAL { return New(NULL); }

  StorageItemHash* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const StorageItemHash& from);
  void MergeFrom(const StorageItemHash& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StorageItemHash* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string itemID = 2;
  bool has_itemid() const;
  void clear_itemid();
  static const int kItemIDFieldNumber = 2;
  const ::std::string& itemid() const;
  void set_itemid(const ::std::string& value);
  #if LANG_CXX11
  void set_itemid(::std::string&& value);
  #endif
  void set_itemid(const char* value);
  void set_itemid(const char* value, size_t size);
  ::std::string* mutable_itemid();
  ::std::string* release_itemid();
  void set_allocated_itemid(::std::string* itemid);

  // optional string hash = 3;
  bool has_hash() const;
  void clear_hash();
  static const int kHashFieldNumber = 3;
  const ::std::string& hash() const;
  void set_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_hash(::std::string&& value);
  #endif
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  ::std::string* mutable_hash();
  ::std::string* release_hash();
  void set_allocated_hash(::std::string* hash);

  // optional string alias = 4;
  bool has_alias() const;
  void clear_alias();
  static const int kAliasFieldNumber = 4;
  const ::std::string& alias() const;
  void set_alias(const ::std::string& value);
  #if LANG_CXX11
  void set_alias(::std::string&& value);
  #endif
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  ::std::string* mutable_alias();
  ::std::string* release_alias();
  void set_allocated_alias(::std::string* alias);

  // optional uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // optional .opentxs.proto.StorageHashType type = 5;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::opentxs::proto::StorageHashType type() const;
  void set_type(::opentxs::proto::StorageHashType value);

  // @@protoc_insertion_point(class_scope:opentxs.proto.StorageItemHash)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_itemid();
  void clear_has_itemid();
  void set_has_hash();
  void clear_has_hash();
  void set_has_alias();
  void clear_has_alias();
  void set_has_type();
  void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr itemid_;
  ::google::protobuf::internal::ArenaStringPtr hash_;
  ::google::protobuf::internal::ArenaStringPtr alias_;
  ::google::protobuf::uint32 version_;
  int type_;
  friend struct ::protobuf_StorageItemHash_2eproto::TableStruct;
  friend void ::protobuf_StorageItemHash_2eproto::InitDefaultsStorageItemHashImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StorageItemHash

// optional uint32 version = 1;
inline bool StorageItemHash::has_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StorageItemHash::set_has_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StorageItemHash::clear_has_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StorageItemHash::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 StorageItemHash::version() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.StorageItemHash.version)
  return version_;
}
inline void StorageItemHash::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.StorageItemHash.version)
}

// optional string itemID = 2;
inline bool StorageItemHash::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StorageItemHash::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StorageItemHash::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StorageItemHash::clear_itemid() {
  itemid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_itemid();
}
inline const ::std::string& StorageItemHash::itemid() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.StorageItemHash.itemID)
  return itemid_.GetNoArena();
}
inline void StorageItemHash::set_itemid(const ::std::string& value) {
  set_has_itemid();
  itemid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.StorageItemHash.itemID)
}
#if LANG_CXX11
inline void StorageItemHash::set_itemid(::std::string&& value) {
  set_has_itemid();
  itemid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.StorageItemHash.itemID)
}
#endif
inline void StorageItemHash::set_itemid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_itemid();
  itemid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.StorageItemHash.itemID)
}
inline void StorageItemHash::set_itemid(const char* value, size_t size) {
  set_has_itemid();
  itemid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.StorageItemHash.itemID)
}
inline ::std::string* StorageItemHash::mutable_itemid() {
  set_has_itemid();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.StorageItemHash.itemID)
  return itemid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageItemHash::release_itemid() {
  // @@protoc_insertion_point(field_release:opentxs.proto.StorageItemHash.itemID)
  clear_has_itemid();
  return itemid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageItemHash::set_allocated_itemid(::std::string* itemid) {
  if (itemid != NULL) {
    set_has_itemid();
  } else {
    clear_has_itemid();
  }
  itemid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), itemid);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.StorageItemHash.itemID)
}

// optional string hash = 3;
inline bool StorageItemHash::has_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StorageItemHash::set_has_hash() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StorageItemHash::clear_has_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StorageItemHash::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hash();
}
inline const ::std::string& StorageItemHash::hash() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.StorageItemHash.hash)
  return hash_.GetNoArena();
}
inline void StorageItemHash::set_hash(const ::std::string& value) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.StorageItemHash.hash)
}
#if LANG_CXX11
inline void StorageItemHash::set_hash(::std::string&& value) {
  set_has_hash();
  hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.StorageItemHash.hash)
}
#endif
inline void StorageItemHash::set_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.StorageItemHash.hash)
}
inline void StorageItemHash::set_hash(const char* value, size_t size) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.StorageItemHash.hash)
}
inline ::std::string* StorageItemHash::mutable_hash() {
  set_has_hash();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.StorageItemHash.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageItemHash::release_hash() {
  // @@protoc_insertion_point(field_release:opentxs.proto.StorageItemHash.hash)
  clear_has_hash();
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageItemHash::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    set_has_hash();
  } else {
    clear_has_hash();
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.StorageItemHash.hash)
}

// optional string alias = 4;
inline bool StorageItemHash::has_alias() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StorageItemHash::set_has_alias() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StorageItemHash::clear_has_alias() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StorageItemHash::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_alias();
}
inline const ::std::string& StorageItemHash::alias() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.StorageItemHash.alias)
  return alias_.GetNoArena();
}
inline void StorageItemHash::set_alias(const ::std::string& value) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.StorageItemHash.alias)
}
#if LANG_CXX11
inline void StorageItemHash::set_alias(::std::string&& value) {
  set_has_alias();
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.StorageItemHash.alias)
}
#endif
inline void StorageItemHash::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.StorageItemHash.alias)
}
inline void StorageItemHash::set_alias(const char* value, size_t size) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.StorageItemHash.alias)
}
inline ::std::string* StorageItemHash::mutable_alias() {
  set_has_alias();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.StorageItemHash.alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageItemHash::release_alias() {
  // @@protoc_insertion_point(field_release:opentxs.proto.StorageItemHash.alias)
  clear_has_alias();
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageItemHash::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    set_has_alias();
  } else {
    clear_has_alias();
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.StorageItemHash.alias)
}

// optional .opentxs.proto.StorageHashType type = 5;
inline bool StorageItemHash::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StorageItemHash::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StorageItemHash::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StorageItemHash::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::opentxs::proto::StorageHashType StorageItemHash::type() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.StorageItemHash.type)
  return static_cast< ::opentxs::proto::StorageHashType >(type_);
}
inline void StorageItemHash::set_type(::opentxs::proto::StorageHashType value) {
  assert(::opentxs::proto::StorageHashType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.StorageItemHash.type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace opentxs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_StorageItemHash_2eproto__INCLUDED
