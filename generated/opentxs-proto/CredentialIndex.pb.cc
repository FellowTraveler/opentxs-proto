// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CredentialIndex.proto

#include "CredentialIndex.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace opentxs {
namespace proto {
class CredentialIndexDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CredentialIndex>
      _instance;
} _CredentialIndex_default_instance_;
}  // namespace proto
}  // namespace opentxs
namespace protobuf_CredentialIndex_2eproto {
void InitDefaultsCredentialIndexImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_NymIDSource_2eproto::InitDefaultsNymIDSource();
  protobuf_CredentialSet_2eproto::InitDefaultsCredentialSet();
  {
    void* ptr = &::opentxs::proto::_CredentialIndex_default_instance_;
    new (ptr) ::opentxs::proto::CredentialIndex();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opentxs::proto::CredentialIndex::InitAsDefaultInstance();
}

void InitDefaultsCredentialIndex() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCredentialIndexImpl);
}

}  // namespace protobuf_CredentialIndex_2eproto
namespace opentxs {
namespace proto {

// ===================================================================

void CredentialIndex::InitAsDefaultInstance() {
  ::opentxs::proto::_CredentialIndex_default_instance_._instance.get_mutable()->source_ = const_cast< ::opentxs::proto::NymIDSource*>(
      ::opentxs::proto::NymIDSource::internal_default_instance());
}
void CredentialIndex::clear_source() {
  if (source_ != NULL) source_->Clear();
  clear_has_source();
}
void CredentialIndex::clear_activecredentials() {
  activecredentials_.Clear();
}
void CredentialIndex::clear_revokedcredentials() {
  revokedcredentials_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CredentialIndex::kVersionFieldNumber;
const int CredentialIndex::kNymIDFieldNumber;
const int CredentialIndex::kModeFieldNumber;
const int CredentialIndex::kIndexFieldNumber;
const int CredentialIndex::kRevisionFieldNumber;
const int CredentialIndex::kSourceFieldNumber;
const int CredentialIndex::kActiveCredentialsFieldNumber;
const int CredentialIndex::kRevokedCredentialsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CredentialIndex::CredentialIndex()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_CredentialIndex_2eproto::InitDefaultsCredentialIndex();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:opentxs.proto.CredentialIndex)
}
CredentialIndex::CredentialIndex(const CredentialIndex& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      activecredentials_(from.activecredentials_),
      revokedcredentials_(from.revokedcredentials_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nymid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nymid()) {
    nymid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nymid_);
  }
  if (from.has_source()) {
    source_ = new ::opentxs::proto::NymIDSource(*from.source_);
  } else {
    source_ = NULL;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&version_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:opentxs.proto.CredentialIndex)
}

void CredentialIndex::SharedCtor() {
  _cached_size_ = 0;
  nymid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&source_)) + sizeof(index_));
}

CredentialIndex::~CredentialIndex() {
  // @@protoc_insertion_point(destructor:opentxs.proto.CredentialIndex)
  SharedDtor();
}

void CredentialIndex::SharedDtor() {
  nymid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete source_;
}

void CredentialIndex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CredentialIndex& CredentialIndex::default_instance() {
  ::protobuf_CredentialIndex_2eproto::InitDefaultsCredentialIndex();
  return *internal_default_instance();
}

CredentialIndex* CredentialIndex::New(::google::protobuf::Arena* arena) const {
  CredentialIndex* n = new CredentialIndex;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CredentialIndex::Clear() {
// @@protoc_insertion_point(message_clear_start:opentxs.proto.CredentialIndex)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  activecredentials_.Clear();
  revokedcredentials_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!nymid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*nymid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(source_ != NULL);
      source_->Clear();
    }
  }
  if (cached_has_bits & 60u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&index_) -
        reinterpret_cast<char*>(&version_)) + sizeof(index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CredentialIndex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:opentxs.proto.CredentialIndex)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string nymID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nymid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.CredentialIndexMode mode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::opentxs::proto::CredentialIndexMode_IsValid(value)) {
            set_mode(static_cast< ::opentxs::proto::CredentialIndexMode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 index = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 revision = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_revision();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &revision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.NymIDSource source = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_source()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .opentxs.proto.CredentialSet activeCredentials = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_activecredentials()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .opentxs.proto.CredentialSet revokedCredentials = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_revokedcredentials()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opentxs.proto.CredentialIndex)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opentxs.proto.CredentialIndex)
  return false;
#undef DO_
}

void CredentialIndex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opentxs.proto.CredentialIndex)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional string nymID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nymid(), output);
  }

  // optional .opentxs.proto.CredentialIndexMode mode = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->mode(), output);
  }

  // optional uint32 index = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->index(), output);
  }

  // optional uint64 revision = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->revision(), output);
  }

  // optional .opentxs.proto.NymIDSource source = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->source_, output);
  }

  // repeated .opentxs.proto.CredentialSet activeCredentials = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->activecredentials_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->activecredentials(static_cast<int>(i)), output);
  }

  // repeated .opentxs.proto.CredentialSet revokedCredentials = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->revokedcredentials_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->revokedcredentials(static_cast<int>(i)), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:opentxs.proto.CredentialIndex)
}

size_t CredentialIndex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentxs.proto.CredentialIndex)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated .opentxs.proto.CredentialSet activeCredentials = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->activecredentials_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->activecredentials(static_cast<int>(i)));
    }
  }

  // repeated .opentxs.proto.CredentialSet revokedCredentials = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->revokedcredentials_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->revokedcredentials(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional string nymID = 2;
    if (has_nymid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nymid());
    }

    // optional .opentxs.proto.NymIDSource source = 6;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->source_);
    }

    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional .opentxs.proto.CredentialIndexMode mode = 3;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

    // optional uint64 revision = 5;
    if (has_revision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->revision());
    }

    // optional uint32 index = 4;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CredentialIndex::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CredentialIndex*>(&from));
}

void CredentialIndex::MergeFrom(const CredentialIndex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentxs.proto.CredentialIndex)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  activecredentials_.MergeFrom(from.activecredentials_);
  revokedcredentials_.MergeFrom(from.revokedcredentials_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_nymid();
      nymid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nymid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_source()->::opentxs::proto::NymIDSource::MergeFrom(from.source());
    }
    if (cached_has_bits & 0x00000004u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000008u) {
      mode_ = from.mode_;
    }
    if (cached_has_bits & 0x00000010u) {
      revision_ = from.revision_;
    }
    if (cached_has_bits & 0x00000020u) {
      index_ = from.index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CredentialIndex::CopyFrom(const CredentialIndex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentxs.proto.CredentialIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CredentialIndex::IsInitialized() const {
  return true;
}

void CredentialIndex::Swap(CredentialIndex* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CredentialIndex::InternalSwap(CredentialIndex* other) {
  using std::swap;
  activecredentials_.InternalSwap(&other->activecredentials_);
  revokedcredentials_.InternalSwap(&other->revokedcredentials_);
  nymid_.Swap(&other->nymid_);
  swap(source_, other->source_);
  swap(version_, other->version_);
  swap(mode_, other->mode_);
  swap(revision_, other->revision_);
  swap(index_, other->index_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string CredentialIndex::GetTypeName() const {
  return "opentxs.proto.CredentialIndex";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace opentxs

// @@protoc_insertion_point(global_scope)
