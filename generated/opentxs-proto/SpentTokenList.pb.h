// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SpentTokenList.proto

#ifndef PROTOBUF_SpentTokenList_2eproto__INCLUDED
#define PROTOBUF_SpentTokenList_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace protobuf_SpentTokenList_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsSpentTokenListImpl();
void InitDefaultsSpentTokenList();
inline void InitDefaults() {
  InitDefaultsSpentTokenList();
}
}  // namespace protobuf_SpentTokenList_2eproto
namespace opentxs {
namespace proto {
class SpentTokenList;
class SpentTokenListDefaultTypeInternal;
extern SpentTokenListDefaultTypeInternal _SpentTokenList_default_instance_;
}  // namespace proto
}  // namespace opentxs
namespace opentxs {
namespace proto {

// ===================================================================

class SpentTokenList : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:opentxs.proto.SpentTokenList) */ {
 public:
  SpentTokenList();
  virtual ~SpentTokenList();

  SpentTokenList(const SpentTokenList& from);

  inline SpentTokenList& operator=(const SpentTokenList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SpentTokenList(SpentTokenList&& from) noexcept
    : SpentTokenList() {
    *this = ::std::move(from);
  }

  inline SpentTokenList& operator=(SpentTokenList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SpentTokenList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpentTokenList* internal_default_instance() {
    return reinterpret_cast<const SpentTokenList*>(
               &_SpentTokenList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SpentTokenList* other);
  friend void swap(SpentTokenList& a, SpentTokenList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SpentTokenList* New() const PROTOBUF_FINAL { return New(NULL); }

  SpentTokenList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const SpentTokenList& from);
  void MergeFrom(const SpentTokenList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SpentTokenList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string spent = 5;
  int spent_size() const;
  void clear_spent();
  static const int kSpentFieldNumber = 5;
  const ::std::string& spent(int index) const;
  ::std::string* mutable_spent(int index);
  void set_spent(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_spent(int index, ::std::string&& value);
  #endif
  void set_spent(int index, const char* value);
  void set_spent(int index, const char* value, size_t size);
  ::std::string* add_spent();
  void add_spent(const ::std::string& value);
  #if LANG_CXX11
  void add_spent(::std::string&& value);
  #endif
  void add_spent(const char* value);
  void add_spent(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& spent() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_spent();

  // optional string notary = 2;
  bool has_notary() const;
  void clear_notary();
  static const int kNotaryFieldNumber = 2;
  const ::std::string& notary() const;
  void set_notary(const ::std::string& value);
  #if LANG_CXX11
  void set_notary(::std::string&& value);
  #endif
  void set_notary(const char* value);
  void set_notary(const char* value, size_t size);
  ::std::string* mutable_notary();
  ::std::string* release_notary();
  void set_allocated_notary(::std::string* notary);

  // optional string unit = 3;
  bool has_unit() const;
  void clear_unit();
  static const int kUnitFieldNumber = 3;
  const ::std::string& unit() const;
  void set_unit(const ::std::string& value);
  #if LANG_CXX11
  void set_unit(::std::string&& value);
  #endif
  void set_unit(const char* value);
  void set_unit(const char* value, size_t size);
  ::std::string* mutable_unit();
  ::std::string* release_unit();
  void set_allocated_unit(::std::string* unit);

  // optional uint64 series = 4;
  bool has_series() const;
  void clear_series();
  static const int kSeriesFieldNumber = 4;
  ::google::protobuf::uint64 series() const;
  void set_series(::google::protobuf::uint64 value);

  // optional uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:opentxs.proto.SpentTokenList)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_notary();
  void clear_has_notary();
  void set_has_unit();
  void clear_has_unit();
  void set_has_series();
  void clear_has_series();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> spent_;
  ::google::protobuf::internal::ArenaStringPtr notary_;
  ::google::protobuf::internal::ArenaStringPtr unit_;
  ::google::protobuf::uint64 series_;
  ::google::protobuf::uint32 version_;
  friend struct ::protobuf_SpentTokenList_2eproto::TableStruct;
  friend void ::protobuf_SpentTokenList_2eproto::InitDefaultsSpentTokenListImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SpentTokenList

// optional uint32 version = 1;
inline bool SpentTokenList::has_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SpentTokenList::set_has_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SpentTokenList::clear_has_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SpentTokenList::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 SpentTokenList::version() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.SpentTokenList.version)
  return version_;
}
inline void SpentTokenList::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.SpentTokenList.version)
}

// optional string notary = 2;
inline bool SpentTokenList::has_notary() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpentTokenList::set_has_notary() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpentTokenList::clear_has_notary() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpentTokenList::clear_notary() {
  notary_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_notary();
}
inline const ::std::string& SpentTokenList::notary() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.SpentTokenList.notary)
  return notary_.GetNoArena();
}
inline void SpentTokenList::set_notary(const ::std::string& value) {
  set_has_notary();
  notary_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.SpentTokenList.notary)
}
#if LANG_CXX11
inline void SpentTokenList::set_notary(::std::string&& value) {
  set_has_notary();
  notary_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.SpentTokenList.notary)
}
#endif
inline void SpentTokenList::set_notary(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_notary();
  notary_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.SpentTokenList.notary)
}
inline void SpentTokenList::set_notary(const char* value, size_t size) {
  set_has_notary();
  notary_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.SpentTokenList.notary)
}
inline ::std::string* SpentTokenList::mutable_notary() {
  set_has_notary();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.SpentTokenList.notary)
  return notary_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SpentTokenList::release_notary() {
  // @@protoc_insertion_point(field_release:opentxs.proto.SpentTokenList.notary)
  clear_has_notary();
  return notary_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SpentTokenList::set_allocated_notary(::std::string* notary) {
  if (notary != NULL) {
    set_has_notary();
  } else {
    clear_has_notary();
  }
  notary_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), notary);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.SpentTokenList.notary)
}

// optional string unit = 3;
inline bool SpentTokenList::has_unit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpentTokenList::set_has_unit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpentTokenList::clear_has_unit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpentTokenList::clear_unit() {
  unit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_unit();
}
inline const ::std::string& SpentTokenList::unit() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.SpentTokenList.unit)
  return unit_.GetNoArena();
}
inline void SpentTokenList::set_unit(const ::std::string& value) {
  set_has_unit();
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.SpentTokenList.unit)
}
#if LANG_CXX11
inline void SpentTokenList::set_unit(::std::string&& value) {
  set_has_unit();
  unit_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.SpentTokenList.unit)
}
#endif
inline void SpentTokenList::set_unit(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_unit();
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.SpentTokenList.unit)
}
inline void SpentTokenList::set_unit(const char* value, size_t size) {
  set_has_unit();
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.SpentTokenList.unit)
}
inline ::std::string* SpentTokenList::mutable_unit() {
  set_has_unit();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.SpentTokenList.unit)
  return unit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SpentTokenList::release_unit() {
  // @@protoc_insertion_point(field_release:opentxs.proto.SpentTokenList.unit)
  clear_has_unit();
  return unit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SpentTokenList::set_allocated_unit(::std::string* unit) {
  if (unit != NULL) {
    set_has_unit();
  } else {
    clear_has_unit();
  }
  unit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unit);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.SpentTokenList.unit)
}

// optional uint64 series = 4;
inline bool SpentTokenList::has_series() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SpentTokenList::set_has_series() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SpentTokenList::clear_has_series() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SpentTokenList::clear_series() {
  series_ = GOOGLE_ULONGLONG(0);
  clear_has_series();
}
inline ::google::protobuf::uint64 SpentTokenList::series() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.SpentTokenList.series)
  return series_;
}
inline void SpentTokenList::set_series(::google::protobuf::uint64 value) {
  set_has_series();
  series_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.SpentTokenList.series)
}

// repeated string spent = 5;
inline int SpentTokenList::spent_size() const {
  return spent_.size();
}
inline void SpentTokenList::clear_spent() {
  spent_.Clear();
}
inline const ::std::string& SpentTokenList::spent(int index) const {
  // @@protoc_insertion_point(field_get:opentxs.proto.SpentTokenList.spent)
  return spent_.Get(index);
}
inline ::std::string* SpentTokenList::mutable_spent(int index) {
  // @@protoc_insertion_point(field_mutable:opentxs.proto.SpentTokenList.spent)
  return spent_.Mutable(index);
}
inline void SpentTokenList::set_spent(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:opentxs.proto.SpentTokenList.spent)
  spent_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SpentTokenList::set_spent(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:opentxs.proto.SpentTokenList.spent)
  spent_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SpentTokenList::set_spent(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  spent_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opentxs.proto.SpentTokenList.spent)
}
inline void SpentTokenList::set_spent(int index, const char* value, size_t size) {
  spent_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.SpentTokenList.spent)
}
inline ::std::string* SpentTokenList::add_spent() {
  // @@protoc_insertion_point(field_add_mutable:opentxs.proto.SpentTokenList.spent)
  return spent_.Add();
}
inline void SpentTokenList::add_spent(const ::std::string& value) {
  spent_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:opentxs.proto.SpentTokenList.spent)
}
#if LANG_CXX11
inline void SpentTokenList::add_spent(::std::string&& value) {
  spent_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:opentxs.proto.SpentTokenList.spent)
}
#endif
inline void SpentTokenList::add_spent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  spent_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opentxs.proto.SpentTokenList.spent)
}
inline void SpentTokenList::add_spent(const char* value, size_t size) {
  spent_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opentxs.proto.SpentTokenList.spent)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SpentTokenList::spent() const {
  // @@protoc_insertion_point(field_list:opentxs.proto.SpentTokenList.spent)
  return spent_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SpentTokenList::mutable_spent() {
  // @@protoc_insertion_point(field_mutable_list:opentxs.proto.SpentTokenList.spent)
  return &spent_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace opentxs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SpentTokenList_2eproto__INCLUDED
