// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Envelope.proto

#include "Envelope.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace opentxs {
namespace proto {
class EnvelopeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Envelope>
      _instance;
} _Envelope_default_instance_;
}  // namespace proto
}  // namespace opentxs
namespace protobuf_Envelope_2eproto {
void InitDefaultsEnvelopeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_AsymmetricKey_2eproto::InitDefaultsAsymmetricKey();
  protobuf_Ciphertext_2eproto::InitDefaultsCiphertext();
  {
    void* ptr = &::opentxs::proto::_Envelope_default_instance_;
    new (ptr) ::opentxs::proto::Envelope();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opentxs::proto::Envelope::InitAsDefaultInstance();
}

void InitDefaultsEnvelope() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEnvelopeImpl);
}

}  // namespace protobuf_Envelope_2eproto
namespace opentxs {
namespace proto {

// ===================================================================

void Envelope::InitAsDefaultInstance() {
  ::opentxs::proto::_Envelope_default_instance_._instance.get_mutable()->ciphertext_ = const_cast< ::opentxs::proto::Ciphertext*>(
      ::opentxs::proto::Ciphertext::internal_default_instance());
}
void Envelope::clear_dhkey() {
  dhkey_.Clear();
}
void Envelope::clear_sessionkey() {
  sessionkey_.Clear();
}
void Envelope::clear_ciphertext() {
  if (ciphertext_ != NULL) ciphertext_->Clear();
  clear_has_ciphertext();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Envelope::kVersionFieldNumber;
const int Envelope::kDhkeyFieldNumber;
const int Envelope::kRsakeyFieldNumber;
const int Envelope::kSessionkeyFieldNumber;
const int Envelope::kCiphertextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Envelope::Envelope()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Envelope_2eproto::InitDefaultsEnvelope();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:opentxs.proto.Envelope)
}
Envelope::Envelope(const Envelope& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      dhkey_(from.dhkey_),
      sessionkey_(from.sessionkey_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rsakey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rsakey()) {
    rsakey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rsakey_);
  }
  if (from.has_ciphertext()) {
    ciphertext_ = new ::opentxs::proto::Ciphertext(*from.ciphertext_);
  } else {
    ciphertext_ = NULL;
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:opentxs.proto.Envelope)
}

void Envelope::SharedCtor() {
  _cached_size_ = 0;
  rsakey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ciphertext_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&ciphertext_)) + sizeof(version_));
}

Envelope::~Envelope() {
  // @@protoc_insertion_point(destructor:opentxs.proto.Envelope)
  SharedDtor();
}

void Envelope::SharedDtor() {
  rsakey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ciphertext_;
}

void Envelope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Envelope& Envelope::default_instance() {
  ::protobuf_Envelope_2eproto::InitDefaultsEnvelope();
  return *internal_default_instance();
}

Envelope* Envelope::New(::google::protobuf::Arena* arena) const {
  Envelope* n = new Envelope;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Envelope::Clear() {
// @@protoc_insertion_point(message_clear_start:opentxs.proto.Envelope)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dhkey_.Clear();
  sessionkey_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!rsakey_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*rsakey_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ciphertext_ != NULL);
      ciphertext_->Clear();
    }
  }
  version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Envelope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:opentxs.proto.Envelope)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .opentxs.proto.AsymmetricKey dhkey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_dhkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes rsakey = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rsakey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .opentxs.proto.SymmetricKey sessionkey = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_sessionkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.Ciphertext ciphertext = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ciphertext()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opentxs.proto.Envelope)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opentxs.proto.Envelope)
  return false;
#undef DO_
}

void Envelope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opentxs.proto.Envelope)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // repeated .opentxs.proto.AsymmetricKey dhkey = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dhkey_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->dhkey(static_cast<int>(i)), output);
  }

  // optional bytes rsakey = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->rsakey(), output);
  }

  // repeated .opentxs.proto.SymmetricKey sessionkey = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sessionkey_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->sessionkey(static_cast<int>(i)), output);
  }

  // optional .opentxs.proto.Ciphertext ciphertext = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->ciphertext_, output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:opentxs.proto.Envelope)
}

size_t Envelope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentxs.proto.Envelope)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated .opentxs.proto.AsymmetricKey dhkey = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->dhkey_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->dhkey(static_cast<int>(i)));
    }
  }

  // repeated .opentxs.proto.SymmetricKey sessionkey = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->sessionkey_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sessionkey(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes rsakey = 3;
    if (has_rsakey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rsakey());
    }

    // optional .opentxs.proto.Ciphertext ciphertext = 5;
    if (has_ciphertext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->ciphertext_);
    }

    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Envelope::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Envelope*>(&from));
}

void Envelope::MergeFrom(const Envelope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentxs.proto.Envelope)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dhkey_.MergeFrom(from.dhkey_);
  sessionkey_.MergeFrom(from.sessionkey_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_rsakey();
      rsakey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rsakey_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_ciphertext()->::opentxs::proto::Ciphertext::MergeFrom(from.ciphertext());
    }
    if (cached_has_bits & 0x00000004u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Envelope::CopyFrom(const Envelope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentxs.proto.Envelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Envelope::IsInitialized() const {
  return true;
}

void Envelope::Swap(Envelope* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Envelope::InternalSwap(Envelope* other) {
  using std::swap;
  dhkey_.InternalSwap(&other->dhkey_);
  sessionkey_.InternalSwap(&other->sessionkey_);
  rsakey_.Swap(&other->rsakey_);
  swap(ciphertext_, other->ciphertext_);
  swap(version_, other->version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string Envelope::GetTypeName() const {
  return "opentxs.proto.Envelope";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace opentxs

// @@protoc_insertion_point(global_scope)
