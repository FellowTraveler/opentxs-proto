// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ConnectionInfoReply.proto

#ifndef PROTOBUF_ConnectionInfoReply_2eproto__INCLUDED
#define PROTOBUF_ConnectionInfoReply_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace protobuf_ConnectionInfoReply_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsConnectionInfoReplyImpl();
void InitDefaultsConnectionInfoReply();
inline void InitDefaults() {
  InitDefaultsConnectionInfoReply();
}
}  // namespace protobuf_ConnectionInfoReply_2eproto
namespace opentxs {
namespace proto {
class ConnectionInfoReply;
class ConnectionInfoReplyDefaultTypeInternal;
extern ConnectionInfoReplyDefaultTypeInternal _ConnectionInfoReply_default_instance_;
}  // namespace proto
}  // namespace opentxs
namespace opentxs {
namespace proto {

// ===================================================================

class ConnectionInfoReply : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:opentxs.proto.ConnectionInfoReply) */ {
 public:
  ConnectionInfoReply();
  virtual ~ConnectionInfoReply();

  ConnectionInfoReply(const ConnectionInfoReply& from);

  inline ConnectionInfoReply& operator=(const ConnectionInfoReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConnectionInfoReply(ConnectionInfoReply&& from) noexcept
    : ConnectionInfoReply() {
    *this = ::std::move(from);
  }

  inline ConnectionInfoReply& operator=(ConnectionInfoReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ConnectionInfoReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectionInfoReply* internal_default_instance() {
    return reinterpret_cast<const ConnectionInfoReply*>(
               &_ConnectionInfoReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ConnectionInfoReply* other);
  friend void swap(ConnectionInfoReply& a, ConnectionInfoReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConnectionInfoReply* New() const PROTOBUF_FINAL { return New(NULL); }

  ConnectionInfoReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const ConnectionInfoReply& from);
  void MergeFrom(const ConnectionInfoReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConnectionInfoReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string url = 3;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 3;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional string login = 4;
  bool has_login() const;
  void clear_login();
  static const int kLoginFieldNumber = 4;
  const ::std::string& login() const;
  void set_login(const ::std::string& value);
  #if LANG_CXX11
  void set_login(::std::string&& value);
  #endif
  void set_login(const char* value);
  void set_login(const char* value, size_t size);
  ::std::string* mutable_login();
  ::std::string* release_login();
  void set_allocated_login(::std::string* login);

  // optional string password = 5;
  bool has_password() const;
  void clear_password();
  static const int kPasswordFieldNumber = 5;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // optional bytes key = 6;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 6;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // optional bool success = 2;
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 2;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:opentxs.proto.ConnectionInfoReply)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_success();
  void clear_has_success();
  void set_has_url();
  void clear_has_url();
  void set_has_login();
  void clear_has_login();
  void set_has_password();
  void clear_has_password();
  void set_has_key();
  void clear_has_key();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr login_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::uint32 version_;
  bool success_;
  friend struct ::protobuf_ConnectionInfoReply_2eproto::TableStruct;
  friend void ::protobuf_ConnectionInfoReply_2eproto::InitDefaultsConnectionInfoReplyImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConnectionInfoReply

// optional uint32 version = 1;
inline bool ConnectionInfoReply::has_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConnectionInfoReply::set_has_version() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConnectionInfoReply::clear_has_version() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConnectionInfoReply::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 ConnectionInfoReply::version() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.ConnectionInfoReply.version)
  return version_;
}
inline void ConnectionInfoReply::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.ConnectionInfoReply.version)
}

// optional bool success = 2;
inline bool ConnectionInfoReply::has_success() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConnectionInfoReply::set_has_success() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConnectionInfoReply::clear_has_success() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConnectionInfoReply::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool ConnectionInfoReply::success() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.ConnectionInfoReply.success)
  return success_;
}
inline void ConnectionInfoReply::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.ConnectionInfoReply.success)
}

// optional string url = 3;
inline bool ConnectionInfoReply::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConnectionInfoReply::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConnectionInfoReply::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConnectionInfoReply::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& ConnectionInfoReply::url() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.ConnectionInfoReply.url)
  return url_.GetNoArena();
}
inline void ConnectionInfoReply::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.ConnectionInfoReply.url)
}
#if LANG_CXX11
inline void ConnectionInfoReply::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.ConnectionInfoReply.url)
}
#endif
inline void ConnectionInfoReply::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.ConnectionInfoReply.url)
}
inline void ConnectionInfoReply::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.ConnectionInfoReply.url)
}
inline ::std::string* ConnectionInfoReply::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.ConnectionInfoReply.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectionInfoReply::release_url() {
  // @@protoc_insertion_point(field_release:opentxs.proto.ConnectionInfoReply.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectionInfoReply::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.ConnectionInfoReply.url)
}

// optional string login = 4;
inline bool ConnectionInfoReply::has_login() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConnectionInfoReply::set_has_login() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConnectionInfoReply::clear_has_login() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConnectionInfoReply::clear_login() {
  login_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_login();
}
inline const ::std::string& ConnectionInfoReply::login() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.ConnectionInfoReply.login)
  return login_.GetNoArena();
}
inline void ConnectionInfoReply::set_login(const ::std::string& value) {
  set_has_login();
  login_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.ConnectionInfoReply.login)
}
#if LANG_CXX11
inline void ConnectionInfoReply::set_login(::std::string&& value) {
  set_has_login();
  login_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.ConnectionInfoReply.login)
}
#endif
inline void ConnectionInfoReply::set_login(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_login();
  login_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.ConnectionInfoReply.login)
}
inline void ConnectionInfoReply::set_login(const char* value, size_t size) {
  set_has_login();
  login_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.ConnectionInfoReply.login)
}
inline ::std::string* ConnectionInfoReply::mutable_login() {
  set_has_login();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.ConnectionInfoReply.login)
  return login_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectionInfoReply::release_login() {
  // @@protoc_insertion_point(field_release:opentxs.proto.ConnectionInfoReply.login)
  clear_has_login();
  return login_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectionInfoReply::set_allocated_login(::std::string* login) {
  if (login != NULL) {
    set_has_login();
  } else {
    clear_has_login();
  }
  login_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), login);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.ConnectionInfoReply.login)
}

// optional string password = 5;
inline bool ConnectionInfoReply::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConnectionInfoReply::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConnectionInfoReply::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConnectionInfoReply::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
inline const ::std::string& ConnectionInfoReply::password() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.ConnectionInfoReply.password)
  return password_.GetNoArena();
}
inline void ConnectionInfoReply::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.ConnectionInfoReply.password)
}
#if LANG_CXX11
inline void ConnectionInfoReply::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.ConnectionInfoReply.password)
}
#endif
inline void ConnectionInfoReply::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.ConnectionInfoReply.password)
}
inline void ConnectionInfoReply::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.ConnectionInfoReply.password)
}
inline ::std::string* ConnectionInfoReply::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.ConnectionInfoReply.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectionInfoReply::release_password() {
  // @@protoc_insertion_point(field_release:opentxs.proto.ConnectionInfoReply.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectionInfoReply::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.ConnectionInfoReply.password)
}

// optional bytes key = 6;
inline bool ConnectionInfoReply::has_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConnectionInfoReply::set_has_key() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConnectionInfoReply::clear_has_key() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConnectionInfoReply::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& ConnectionInfoReply::key() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.ConnectionInfoReply.key)
  return key_.GetNoArena();
}
inline void ConnectionInfoReply::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.ConnectionInfoReply.key)
}
#if LANG_CXX11
inline void ConnectionInfoReply::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.ConnectionInfoReply.key)
}
#endif
inline void ConnectionInfoReply::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.ConnectionInfoReply.key)
}
inline void ConnectionInfoReply::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.ConnectionInfoReply.key)
}
inline ::std::string* ConnectionInfoReply::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.ConnectionInfoReply.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectionInfoReply::release_key() {
  // @@protoc_insertion_point(field_release:opentxs.proto.ConnectionInfoReply.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectionInfoReply::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.ConnectionInfoReply.key)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace opentxs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ConnectionInfoReply_2eproto__INCLUDED
