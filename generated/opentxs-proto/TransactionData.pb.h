// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TransactionData.proto

#ifndef PROTOBUF_TransactionData_2eproto__INCLUDED
#define PROTOBUF_TransactionData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "RPCEnums.pb.h"  // IWYU pragma: export
#include "PaymentWorkflowEnums.pb.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace protobuf_TransactionData_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsTransactionDataImpl();
void InitDefaultsTransactionData();
inline void InitDefaults() {
  InitDefaultsTransactionData();
}
}  // namespace protobuf_TransactionData_2eproto
namespace opentxs {
namespace proto {
class TransactionData;
class TransactionDataDefaultTypeInternal;
extern TransactionDataDefaultTypeInternal _TransactionData_default_instance_;
}  // namespace proto
}  // namespace opentxs
namespace opentxs {
namespace proto {

// ===================================================================

class TransactionData : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:opentxs.proto.TransactionData) */ {
 public:
  TransactionData();
  virtual ~TransactionData();

  TransactionData(const TransactionData& from);

  inline TransactionData& operator=(const TransactionData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransactionData(TransactionData&& from) noexcept
    : TransactionData() {
    *this = ::std::move(from);
  }

  inline TransactionData& operator=(TransactionData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TransactionData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactionData* internal_default_instance() {
    return reinterpret_cast<const TransactionData*>(
               &_TransactionData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(TransactionData* other);
  friend void swap(TransactionData& a, TransactionData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransactionData* New() const PROTOBUF_FINAL { return New(NULL); }

  TransactionData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const TransactionData& from);
  void MergeFrom(const TransactionData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TransactionData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string sourceaccounts = 4;
  int sourceaccounts_size() const;
  void clear_sourceaccounts();
  static const int kSourceaccountsFieldNumber = 4;
  const ::std::string& sourceaccounts(int index) const;
  ::std::string* mutable_sourceaccounts(int index);
  void set_sourceaccounts(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_sourceaccounts(int index, ::std::string&& value);
  #endif
  void set_sourceaccounts(int index, const char* value);
  void set_sourceaccounts(int index, const char* value, size_t size);
  ::std::string* add_sourceaccounts();
  void add_sourceaccounts(const ::std::string& value);
  #if LANG_CXX11
  void add_sourceaccounts(::std::string&& value);
  #endif
  void add_sourceaccounts(const char* value);
  void add_sourceaccounts(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& sourceaccounts() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_sourceaccounts();

  // repeated string destinationaccounts = 5;
  int destinationaccounts_size() const;
  void clear_destinationaccounts();
  static const int kDestinationaccountsFieldNumber = 5;
  const ::std::string& destinationaccounts(int index) const;
  ::std::string* mutable_destinationaccounts(int index);
  void set_destinationaccounts(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_destinationaccounts(int index, ::std::string&& value);
  #endif
  void set_destinationaccounts(int index, const char* value);
  void set_destinationaccounts(int index, const char* value, size_t size);
  ::std::string* add_destinationaccounts();
  void add_destinationaccounts(const ::std::string& value);
  #if LANG_CXX11
  void add_destinationaccounts(::std::string&& value);
  #endif
  void add_destinationaccounts(const char* value);
  void add_destinationaccounts(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& destinationaccounts() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_destinationaccounts();

  // optional string uuid = 2;
  bool has_uuid() const;
  void clear_uuid();
  static const int kUuidFieldNumber = 2;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // optional uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // optional .opentxs.proto.PaymentWorkflowType type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::opentxs::proto::PaymentWorkflowType type() const;
  void set_type(::opentxs::proto::PaymentWorkflowType value);

  // optional int64 amount = 6;
  bool has_amount() const;
  void clear_amount();
  static const int kAmountFieldNumber = 6;
  ::google::protobuf::int64 amount() const;
  void set_amount(::google::protobuf::int64 value);

  // optional .opentxs.proto.PaymentWorkflowState state = 7;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 7;
  ::opentxs::proto::PaymentWorkflowState state() const;
  void set_state(::opentxs::proto::PaymentWorkflowState value);

  // @@protoc_insertion_point(class_scope:opentxs.proto.TransactionData)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_uuid();
  void clear_has_uuid();
  void set_has_type();
  void clear_has_type();
  void set_has_amount();
  void clear_has_amount();
  void set_has_state();
  void clear_has_state();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> sourceaccounts_;
  ::google::protobuf::RepeatedPtrField< ::std::string> destinationaccounts_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::uint32 version_;
  int type_;
  ::google::protobuf::int64 amount_;
  int state_;
  friend struct ::protobuf_TransactionData_2eproto::TableStruct;
  friend void ::protobuf_TransactionData_2eproto::InitDefaultsTransactionDataImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TransactionData

// optional uint32 version = 1;
inline bool TransactionData::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransactionData::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TransactionData::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TransactionData::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 TransactionData::version() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.TransactionData.version)
  return version_;
}
inline void TransactionData::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.TransactionData.version)
}

// optional string uuid = 2;
inline bool TransactionData::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransactionData::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransactionData::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransactionData::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuid();
}
inline const ::std::string& TransactionData::uuid() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.TransactionData.uuid)
  return uuid_.GetNoArena();
}
inline void TransactionData::set_uuid(const ::std::string& value) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.TransactionData.uuid)
}
#if LANG_CXX11
inline void TransactionData::set_uuid(::std::string&& value) {
  set_has_uuid();
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.TransactionData.uuid)
}
#endif
inline void TransactionData::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.TransactionData.uuid)
}
inline void TransactionData::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.TransactionData.uuid)
}
inline ::std::string* TransactionData::mutable_uuid() {
  set_has_uuid();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.TransactionData.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransactionData::release_uuid() {
  // @@protoc_insertion_point(field_release:opentxs.proto.TransactionData.uuid)
  clear_has_uuid();
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionData::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    set_has_uuid();
  } else {
    clear_has_uuid();
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.TransactionData.uuid)
}

// optional .opentxs.proto.PaymentWorkflowType type = 3;
inline bool TransactionData::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TransactionData::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TransactionData::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TransactionData::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::opentxs::proto::PaymentWorkflowType TransactionData::type() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.TransactionData.type)
  return static_cast< ::opentxs::proto::PaymentWorkflowType >(type_);
}
inline void TransactionData::set_type(::opentxs::proto::PaymentWorkflowType value) {
  assert(::opentxs::proto::PaymentWorkflowType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.TransactionData.type)
}

// repeated string sourceaccounts = 4;
inline int TransactionData::sourceaccounts_size() const {
  return sourceaccounts_.size();
}
inline void TransactionData::clear_sourceaccounts() {
  sourceaccounts_.Clear();
}
inline const ::std::string& TransactionData::sourceaccounts(int index) const {
  // @@protoc_insertion_point(field_get:opentxs.proto.TransactionData.sourceaccounts)
  return sourceaccounts_.Get(index);
}
inline ::std::string* TransactionData::mutable_sourceaccounts(int index) {
  // @@protoc_insertion_point(field_mutable:opentxs.proto.TransactionData.sourceaccounts)
  return sourceaccounts_.Mutable(index);
}
inline void TransactionData::set_sourceaccounts(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:opentxs.proto.TransactionData.sourceaccounts)
  sourceaccounts_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TransactionData::set_sourceaccounts(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:opentxs.proto.TransactionData.sourceaccounts)
  sourceaccounts_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TransactionData::set_sourceaccounts(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  sourceaccounts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opentxs.proto.TransactionData.sourceaccounts)
}
inline void TransactionData::set_sourceaccounts(int index, const char* value, size_t size) {
  sourceaccounts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.TransactionData.sourceaccounts)
}
inline ::std::string* TransactionData::add_sourceaccounts() {
  // @@protoc_insertion_point(field_add_mutable:opentxs.proto.TransactionData.sourceaccounts)
  return sourceaccounts_.Add();
}
inline void TransactionData::add_sourceaccounts(const ::std::string& value) {
  sourceaccounts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:opentxs.proto.TransactionData.sourceaccounts)
}
#if LANG_CXX11
inline void TransactionData::add_sourceaccounts(::std::string&& value) {
  sourceaccounts_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:opentxs.proto.TransactionData.sourceaccounts)
}
#endif
inline void TransactionData::add_sourceaccounts(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  sourceaccounts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opentxs.proto.TransactionData.sourceaccounts)
}
inline void TransactionData::add_sourceaccounts(const char* value, size_t size) {
  sourceaccounts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opentxs.proto.TransactionData.sourceaccounts)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TransactionData::sourceaccounts() const {
  // @@protoc_insertion_point(field_list:opentxs.proto.TransactionData.sourceaccounts)
  return sourceaccounts_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TransactionData::mutable_sourceaccounts() {
  // @@protoc_insertion_point(field_mutable_list:opentxs.proto.TransactionData.sourceaccounts)
  return &sourceaccounts_;
}

// repeated string destinationaccounts = 5;
inline int TransactionData::destinationaccounts_size() const {
  return destinationaccounts_.size();
}
inline void TransactionData::clear_destinationaccounts() {
  destinationaccounts_.Clear();
}
inline const ::std::string& TransactionData::destinationaccounts(int index) const {
  // @@protoc_insertion_point(field_get:opentxs.proto.TransactionData.destinationaccounts)
  return destinationaccounts_.Get(index);
}
inline ::std::string* TransactionData::mutable_destinationaccounts(int index) {
  // @@protoc_insertion_point(field_mutable:opentxs.proto.TransactionData.destinationaccounts)
  return destinationaccounts_.Mutable(index);
}
inline void TransactionData::set_destinationaccounts(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:opentxs.proto.TransactionData.destinationaccounts)
  destinationaccounts_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TransactionData::set_destinationaccounts(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:opentxs.proto.TransactionData.destinationaccounts)
  destinationaccounts_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TransactionData::set_destinationaccounts(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  destinationaccounts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opentxs.proto.TransactionData.destinationaccounts)
}
inline void TransactionData::set_destinationaccounts(int index, const char* value, size_t size) {
  destinationaccounts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.TransactionData.destinationaccounts)
}
inline ::std::string* TransactionData::add_destinationaccounts() {
  // @@protoc_insertion_point(field_add_mutable:opentxs.proto.TransactionData.destinationaccounts)
  return destinationaccounts_.Add();
}
inline void TransactionData::add_destinationaccounts(const ::std::string& value) {
  destinationaccounts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:opentxs.proto.TransactionData.destinationaccounts)
}
#if LANG_CXX11
inline void TransactionData::add_destinationaccounts(::std::string&& value) {
  destinationaccounts_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:opentxs.proto.TransactionData.destinationaccounts)
}
#endif
inline void TransactionData::add_destinationaccounts(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  destinationaccounts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opentxs.proto.TransactionData.destinationaccounts)
}
inline void TransactionData::add_destinationaccounts(const char* value, size_t size) {
  destinationaccounts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opentxs.proto.TransactionData.destinationaccounts)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TransactionData::destinationaccounts() const {
  // @@protoc_insertion_point(field_list:opentxs.proto.TransactionData.destinationaccounts)
  return destinationaccounts_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TransactionData::mutable_destinationaccounts() {
  // @@protoc_insertion_point(field_mutable_list:opentxs.proto.TransactionData.destinationaccounts)
  return &destinationaccounts_;
}

// optional int64 amount = 6;
inline bool TransactionData::has_amount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TransactionData::set_has_amount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TransactionData::clear_has_amount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TransactionData::clear_amount() {
  amount_ = GOOGLE_LONGLONG(0);
  clear_has_amount();
}
inline ::google::protobuf::int64 TransactionData::amount() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.TransactionData.amount)
  return amount_;
}
inline void TransactionData::set_amount(::google::protobuf::int64 value) {
  set_has_amount();
  amount_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.TransactionData.amount)
}

// optional .opentxs.proto.PaymentWorkflowState state = 7;
inline bool TransactionData::has_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TransactionData::set_has_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TransactionData::clear_has_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TransactionData::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::opentxs::proto::PaymentWorkflowState TransactionData::state() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.TransactionData.state)
  return static_cast< ::opentxs::proto::PaymentWorkflowState >(state_);
}
inline void TransactionData::set_state(::opentxs::proto::PaymentWorkflowState value) {
  assert(::opentxs::proto::PaymentWorkflowState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.TransactionData.state)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace opentxs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TransactionData_2eproto__INCLUDED
