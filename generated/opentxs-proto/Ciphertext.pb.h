// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Ciphertext.proto

#ifndef PROTOBUF_Ciphertext_2eproto__INCLUDED
#define PROTOBUF_Ciphertext_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "Enums.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_Ciphertext_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsCiphertextImpl();
void InitDefaultsCiphertext();
inline void InitDefaults() {
  InitDefaultsCiphertext();
}
}  // namespace protobuf_Ciphertext_2eproto
namespace opentxs {
namespace proto {
class Ciphertext;
class CiphertextDefaultTypeInternal;
extern CiphertextDefaultTypeInternal _Ciphertext_default_instance_;
class SymmetricKey;
class SymmetricKeyDefaultTypeInternal;
extern SymmetricKeyDefaultTypeInternal _SymmetricKey_default_instance_;
}  // namespace proto
}  // namespace opentxs
namespace opentxs {
namespace proto {

// ===================================================================

class Ciphertext : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:opentxs.proto.Ciphertext) */ {
 public:
  Ciphertext();
  virtual ~Ciphertext();

  Ciphertext(const Ciphertext& from);

  inline Ciphertext& operator=(const Ciphertext& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ciphertext(Ciphertext&& from) noexcept
    : Ciphertext() {
    *this = ::std::move(from);
  }

  inline Ciphertext& operator=(Ciphertext&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ciphertext& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ciphertext* internal_default_instance() {
    return reinterpret_cast<const Ciphertext*>(
               &_Ciphertext_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Ciphertext* other);
  friend void swap(Ciphertext& a, Ciphertext& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ciphertext* New() const PROTOBUF_FINAL { return New(NULL); }

  Ciphertext* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Ciphertext& from);
  void MergeFrom(const Ciphertext& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ciphertext* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes iv = 5;
  bool has_iv() const;
  void clear_iv();
  static const int kIvFieldNumber = 5;
  const ::std::string& iv() const;
  void set_iv(const ::std::string& value);
  #if LANG_CXX11
  void set_iv(::std::string&& value);
  #endif
  void set_iv(const char* value);
  void set_iv(const void* value, size_t size);
  ::std::string* mutable_iv();
  ::std::string* release_iv();
  void set_allocated_iv(::std::string* iv);

  // optional bytes tag = 6;
  bool has_tag() const;
  void clear_tag();
  static const int kTagFieldNumber = 6;
  const ::std::string& tag() const;
  void set_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_tag(::std::string&& value);
  #endif
  void set_tag(const char* value);
  void set_tag(const void* value, size_t size);
  ::std::string* mutable_tag();
  ::std::string* release_tag();
  void set_allocated_tag(::std::string* tag);

  // optional bytes data = 7;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 7;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional .opentxs.proto.SymmetricKey key = 4;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 4;
  const ::opentxs::proto::SymmetricKey& key() const;
  ::opentxs::proto::SymmetricKey* release_key();
  ::opentxs::proto::SymmetricKey* mutable_key();
  void set_allocated_key(::opentxs::proto::SymmetricKey* key);

  // optional uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // optional .opentxs.proto.SymmetricMode mode = 2;
  bool has_mode() const;
  void clear_mode();
  static const int kModeFieldNumber = 2;
  ::opentxs::proto::SymmetricMode mode() const;
  void set_mode(::opentxs::proto::SymmetricMode value);

  // optional bool text = 3;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 3;
  bool text() const;
  void set_text(bool value);

  // @@protoc_insertion_point(class_scope:opentxs.proto.Ciphertext)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_mode();
  void clear_has_mode();
  void set_has_text();
  void clear_has_text();
  void set_has_key();
  void clear_has_key();
  void set_has_iv();
  void clear_has_iv();
  void set_has_tag();
  void clear_has_tag();
  void set_has_data();
  void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr iv_;
  ::google::protobuf::internal::ArenaStringPtr tag_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::opentxs::proto::SymmetricKey* key_;
  ::google::protobuf::uint32 version_;
  int mode_;
  bool text_;
  friend struct ::protobuf_Ciphertext_2eproto::TableStruct;
  friend void ::protobuf_Ciphertext_2eproto::InitDefaultsCiphertextImpl();
};
// -------------------------------------------------------------------

class SymmetricKey : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:opentxs.proto.SymmetricKey) */ {
 public:
  SymmetricKey();
  virtual ~SymmetricKey();

  SymmetricKey(const SymmetricKey& from);

  inline SymmetricKey& operator=(const SymmetricKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SymmetricKey(SymmetricKey&& from) noexcept
    : SymmetricKey() {
    *this = ::std::move(from);
  }

  inline SymmetricKey& operator=(SymmetricKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SymmetricKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SymmetricKey* internal_default_instance() {
    return reinterpret_cast<const SymmetricKey*>(
               &_SymmetricKey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(SymmetricKey* other);
  friend void swap(SymmetricKey& a, SymmetricKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SymmetricKey* New() const PROTOBUF_FINAL { return New(NULL); }

  SymmetricKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const SymmetricKey& from);
  void MergeFrom(const SymmetricKey& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SymmetricKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes salt = 4;
  bool has_salt() const;
  void clear_salt();
  static const int kSaltFieldNumber = 4;
  const ::std::string& salt() const;
  void set_salt(const ::std::string& value);
  #if LANG_CXX11
  void set_salt(::std::string&& value);
  #endif
  void set_salt(const char* value);
  void set_salt(const void* value, size_t size);
  ::std::string* mutable_salt();
  ::std::string* release_salt();
  void set_allocated_salt(::std::string* salt);

  // optional .opentxs.proto.Ciphertext key = 7;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 7;
  const ::opentxs::proto::Ciphertext& key() const;
  ::opentxs::proto::Ciphertext* release_key();
  ::opentxs::proto::Ciphertext* mutable_key();
  void set_allocated_key(::opentxs::proto::Ciphertext* key);

  // optional uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // optional .opentxs.proto.SymmetricKeyType type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::opentxs::proto::SymmetricKeyType type() const;
  void set_type(::opentxs::proto::SymmetricKeyType value);

  // optional uint64 operations = 5;
  bool has_operations() const;
  void clear_operations();
  static const int kOperationsFieldNumber = 5;
  ::google::protobuf::uint64 operations() const;
  void set_operations(::google::protobuf::uint64 value);

  // optional uint64 difficulty = 6;
  bool has_difficulty() const;
  void clear_difficulty();
  static const int kDifficultyFieldNumber = 6;
  ::google::protobuf::uint64 difficulty() const;
  void set_difficulty(::google::protobuf::uint64 value);

  // optional uint32 size = 3;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 3;
  ::google::protobuf::uint32 size() const;
  void set_size(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:opentxs.proto.SymmetricKey)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_type();
  void clear_has_type();
  void set_has_size();
  void clear_has_size();
  void set_has_salt();
  void clear_has_salt();
  void set_has_operations();
  void clear_has_operations();
  void set_has_difficulty();
  void clear_has_difficulty();
  void set_has_key();
  void clear_has_key();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr salt_;
  ::opentxs::proto::Ciphertext* key_;
  ::google::protobuf::uint32 version_;
  int type_;
  ::google::protobuf::uint64 operations_;
  ::google::protobuf::uint64 difficulty_;
  ::google::protobuf::uint32 size_;
  friend struct ::protobuf_Ciphertext_2eproto::TableStruct;
  friend void ::protobuf_Ciphertext_2eproto::InitDefaultsCiphertextImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Ciphertext

// optional uint32 version = 1;
inline bool Ciphertext::has_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ciphertext::set_has_version() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Ciphertext::clear_has_version() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Ciphertext::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 Ciphertext::version() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.Ciphertext.version)
  return version_;
}
inline void Ciphertext::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.Ciphertext.version)
}

// optional .opentxs.proto.SymmetricMode mode = 2;
inline bool Ciphertext::has_mode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Ciphertext::set_has_mode() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Ciphertext::clear_has_mode() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Ciphertext::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
inline ::opentxs::proto::SymmetricMode Ciphertext::mode() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.Ciphertext.mode)
  return static_cast< ::opentxs::proto::SymmetricMode >(mode_);
}
inline void Ciphertext::set_mode(::opentxs::proto::SymmetricMode value) {
  assert(::opentxs::proto::SymmetricMode_IsValid(value));
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.Ciphertext.mode)
}

// optional bool text = 3;
inline bool Ciphertext::has_text() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Ciphertext::set_has_text() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Ciphertext::clear_has_text() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Ciphertext::clear_text() {
  text_ = false;
  clear_has_text();
}
inline bool Ciphertext::text() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.Ciphertext.text)
  return text_;
}
inline void Ciphertext::set_text(bool value) {
  set_has_text();
  text_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.Ciphertext.text)
}

// optional .opentxs.proto.SymmetricKey key = 4;
inline bool Ciphertext::has_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ciphertext::set_has_key() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Ciphertext::clear_has_key() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Ciphertext::clear_key() {
  if (key_ != NULL) key_->Clear();
  clear_has_key();
}
inline const ::opentxs::proto::SymmetricKey& Ciphertext::key() const {
  const ::opentxs::proto::SymmetricKey* p = key_;
  // @@protoc_insertion_point(field_get:opentxs.proto.Ciphertext.key)
  return p != NULL ? *p : *reinterpret_cast<const ::opentxs::proto::SymmetricKey*>(
      &::opentxs::proto::_SymmetricKey_default_instance_);
}
inline ::opentxs::proto::SymmetricKey* Ciphertext::release_key() {
  // @@protoc_insertion_point(field_release:opentxs.proto.Ciphertext.key)
  clear_has_key();
  ::opentxs::proto::SymmetricKey* temp = key_;
  key_ = NULL;
  return temp;
}
inline ::opentxs::proto::SymmetricKey* Ciphertext::mutable_key() {
  set_has_key();
  if (key_ == NULL) {
    key_ = new ::opentxs::proto::SymmetricKey;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.proto.Ciphertext.key)
  return key_;
}
inline void Ciphertext::set_allocated_key(::opentxs::proto::SymmetricKey* key) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete key_;
  }
  if (key) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      key = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    set_has_key();
  } else {
    clear_has_key();
  }
  key_ = key;
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.Ciphertext.key)
}

// optional bytes iv = 5;
inline bool Ciphertext::has_iv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ciphertext::set_has_iv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ciphertext::clear_has_iv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ciphertext::clear_iv() {
  iv_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_iv();
}
inline const ::std::string& Ciphertext::iv() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.Ciphertext.iv)
  return iv_.GetNoArena();
}
inline void Ciphertext::set_iv(const ::std::string& value) {
  set_has_iv();
  iv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.Ciphertext.iv)
}
#if LANG_CXX11
inline void Ciphertext::set_iv(::std::string&& value) {
  set_has_iv();
  iv_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.Ciphertext.iv)
}
#endif
inline void Ciphertext::set_iv(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_iv();
  iv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.Ciphertext.iv)
}
inline void Ciphertext::set_iv(const void* value, size_t size) {
  set_has_iv();
  iv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.Ciphertext.iv)
}
inline ::std::string* Ciphertext::mutable_iv() {
  set_has_iv();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.Ciphertext.iv)
  return iv_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Ciphertext::release_iv() {
  // @@protoc_insertion_point(field_release:opentxs.proto.Ciphertext.iv)
  clear_has_iv();
  return iv_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Ciphertext::set_allocated_iv(::std::string* iv) {
  if (iv != NULL) {
    set_has_iv();
  } else {
    clear_has_iv();
  }
  iv_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iv);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.Ciphertext.iv)
}

// optional bytes tag = 6;
inline bool Ciphertext::has_tag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ciphertext::set_has_tag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ciphertext::clear_has_tag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ciphertext::clear_tag() {
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag();
}
inline const ::std::string& Ciphertext::tag() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.Ciphertext.tag)
  return tag_.GetNoArena();
}
inline void Ciphertext::set_tag(const ::std::string& value) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.Ciphertext.tag)
}
#if LANG_CXX11
inline void Ciphertext::set_tag(::std::string&& value) {
  set_has_tag();
  tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.Ciphertext.tag)
}
#endif
inline void Ciphertext::set_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.Ciphertext.tag)
}
inline void Ciphertext::set_tag(const void* value, size_t size) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.Ciphertext.tag)
}
inline ::std::string* Ciphertext::mutable_tag() {
  set_has_tag();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.Ciphertext.tag)
  return tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Ciphertext::release_tag() {
  // @@protoc_insertion_point(field_release:opentxs.proto.Ciphertext.tag)
  clear_has_tag();
  return tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Ciphertext::set_allocated_tag(::std::string* tag) {
  if (tag != NULL) {
    set_has_tag();
  } else {
    clear_has_tag();
  }
  tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.Ciphertext.tag)
}

// optional bytes data = 7;
inline bool Ciphertext::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ciphertext::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Ciphertext::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Ciphertext::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& Ciphertext::data() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.Ciphertext.data)
  return data_.GetNoArena();
}
inline void Ciphertext::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.Ciphertext.data)
}
#if LANG_CXX11
inline void Ciphertext::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.Ciphertext.data)
}
#endif
inline void Ciphertext::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.Ciphertext.data)
}
inline void Ciphertext::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.Ciphertext.data)
}
inline ::std::string* Ciphertext::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.Ciphertext.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Ciphertext::release_data() {
  // @@protoc_insertion_point(field_release:opentxs.proto.Ciphertext.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Ciphertext::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.Ciphertext.data)
}

// -------------------------------------------------------------------

// SymmetricKey

// optional uint32 version = 1;
inline bool SymmetricKey::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SymmetricKey::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SymmetricKey::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SymmetricKey::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 SymmetricKey::version() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.SymmetricKey.version)
  return version_;
}
inline void SymmetricKey::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.SymmetricKey.version)
}

// optional .opentxs.proto.SymmetricKeyType type = 2;
inline bool SymmetricKey::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SymmetricKey::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SymmetricKey::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SymmetricKey::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::opentxs::proto::SymmetricKeyType SymmetricKey::type() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.SymmetricKey.type)
  return static_cast< ::opentxs::proto::SymmetricKeyType >(type_);
}
inline void SymmetricKey::set_type(::opentxs::proto::SymmetricKeyType value) {
  assert(::opentxs::proto::SymmetricKeyType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.SymmetricKey.type)
}

// optional uint32 size = 3;
inline bool SymmetricKey::has_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SymmetricKey::set_has_size() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SymmetricKey::clear_has_size() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SymmetricKey::clear_size() {
  size_ = 0u;
  clear_has_size();
}
inline ::google::protobuf::uint32 SymmetricKey::size() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.SymmetricKey.size)
  return size_;
}
inline void SymmetricKey::set_size(::google::protobuf::uint32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.SymmetricKey.size)
}

// optional bytes salt = 4;
inline bool SymmetricKey::has_salt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SymmetricKey::set_has_salt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SymmetricKey::clear_has_salt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SymmetricKey::clear_salt() {
  salt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_salt();
}
inline const ::std::string& SymmetricKey::salt() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.SymmetricKey.salt)
  return salt_.GetNoArena();
}
inline void SymmetricKey::set_salt(const ::std::string& value) {
  set_has_salt();
  salt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.SymmetricKey.salt)
}
#if LANG_CXX11
inline void SymmetricKey::set_salt(::std::string&& value) {
  set_has_salt();
  salt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.SymmetricKey.salt)
}
#endif
inline void SymmetricKey::set_salt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_salt();
  salt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.SymmetricKey.salt)
}
inline void SymmetricKey::set_salt(const void* value, size_t size) {
  set_has_salt();
  salt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.SymmetricKey.salt)
}
inline ::std::string* SymmetricKey::mutable_salt() {
  set_has_salt();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.SymmetricKey.salt)
  return salt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SymmetricKey::release_salt() {
  // @@protoc_insertion_point(field_release:opentxs.proto.SymmetricKey.salt)
  clear_has_salt();
  return salt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SymmetricKey::set_allocated_salt(::std::string* salt) {
  if (salt != NULL) {
    set_has_salt();
  } else {
    clear_has_salt();
  }
  salt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), salt);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.SymmetricKey.salt)
}

// optional uint64 operations = 5;
inline bool SymmetricKey::has_operations() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SymmetricKey::set_has_operations() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SymmetricKey::clear_has_operations() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SymmetricKey::clear_operations() {
  operations_ = GOOGLE_ULONGLONG(0);
  clear_has_operations();
}
inline ::google::protobuf::uint64 SymmetricKey::operations() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.SymmetricKey.operations)
  return operations_;
}
inline void SymmetricKey::set_operations(::google::protobuf::uint64 value) {
  set_has_operations();
  operations_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.SymmetricKey.operations)
}

// optional uint64 difficulty = 6;
inline bool SymmetricKey::has_difficulty() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SymmetricKey::set_has_difficulty() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SymmetricKey::clear_has_difficulty() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SymmetricKey::clear_difficulty() {
  difficulty_ = GOOGLE_ULONGLONG(0);
  clear_has_difficulty();
}
inline ::google::protobuf::uint64 SymmetricKey::difficulty() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.SymmetricKey.difficulty)
  return difficulty_;
}
inline void SymmetricKey::set_difficulty(::google::protobuf::uint64 value) {
  set_has_difficulty();
  difficulty_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.SymmetricKey.difficulty)
}

// optional .opentxs.proto.Ciphertext key = 7;
inline bool SymmetricKey::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SymmetricKey::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SymmetricKey::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SymmetricKey::clear_key() {
  if (key_ != NULL) key_->Clear();
  clear_has_key();
}
inline const ::opentxs::proto::Ciphertext& SymmetricKey::key() const {
  const ::opentxs::proto::Ciphertext* p = key_;
  // @@protoc_insertion_point(field_get:opentxs.proto.SymmetricKey.key)
  return p != NULL ? *p : *reinterpret_cast<const ::opentxs::proto::Ciphertext*>(
      &::opentxs::proto::_Ciphertext_default_instance_);
}
inline ::opentxs::proto::Ciphertext* SymmetricKey::release_key() {
  // @@protoc_insertion_point(field_release:opentxs.proto.SymmetricKey.key)
  clear_has_key();
  ::opentxs::proto::Ciphertext* temp = key_;
  key_ = NULL;
  return temp;
}
inline ::opentxs::proto::Ciphertext* SymmetricKey::mutable_key() {
  set_has_key();
  if (key_ == NULL) {
    key_ = new ::opentxs::proto::Ciphertext;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.proto.SymmetricKey.key)
  return key_;
}
inline void SymmetricKey::set_allocated_key(::opentxs::proto::Ciphertext* key) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete key_;
  }
  if (key) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      key = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    set_has_key();
  } else {
    clear_has_key();
  }
  key_ = key;
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.SymmetricKey.key)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace opentxs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Ciphertext_2eproto__INCLUDED
