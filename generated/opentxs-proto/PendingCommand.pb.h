// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PendingCommand.proto

#ifndef PROTOBUF_PendingCommand_2eproto__INCLUDED
#define PROTOBUF_PendingCommand_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace protobuf_PendingCommand_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsPendingCommandImpl();
void InitDefaultsPendingCommand();
inline void InitDefaults() {
  InitDefaultsPendingCommand();
}
}  // namespace protobuf_PendingCommand_2eproto
namespace opentxs {
namespace proto {
class PendingCommand;
class PendingCommandDefaultTypeInternal;
extern PendingCommandDefaultTypeInternal _PendingCommand_default_instance_;
}  // namespace proto
}  // namespace opentxs
namespace opentxs {
namespace proto {

// ===================================================================

class PendingCommand : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:opentxs.proto.PendingCommand) */ {
 public:
  PendingCommand();
  virtual ~PendingCommand();

  PendingCommand(const PendingCommand& from);

  inline PendingCommand& operator=(const PendingCommand& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PendingCommand(PendingCommand&& from) noexcept
    : PendingCommand() {
    *this = ::std::move(from);
  }

  inline PendingCommand& operator=(PendingCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PendingCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PendingCommand* internal_default_instance() {
    return reinterpret_cast<const PendingCommand*>(
               &_PendingCommand_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(PendingCommand* other);
  friend void swap(PendingCommand& a, PendingCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PendingCommand* New() const PROTOBUF_FINAL { return New(NULL); }

  PendingCommand* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const PendingCommand& from);
  void MergeFrom(const PendingCommand& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PendingCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string serialized = 2;
  bool has_serialized() const;
  void clear_serialized();
  static const int kSerializedFieldNumber = 2;
  const ::std::string& serialized() const;
  void set_serialized(const ::std::string& value);
  #if LANG_CXX11
  void set_serialized(::std::string&& value);
  #endif
  void set_serialized(const char* value);
  void set_serialized(const char* value, size_t size);
  ::std::string* mutable_serialized();
  ::std::string* release_serialized();
  void set_allocated_serialized(::std::string* serialized);

  // optional string accountlabel = 3;
  bool has_accountlabel() const;
  void clear_accountlabel();
  static const int kAccountlabelFieldNumber = 3;
  const ::std::string& accountlabel() const;
  void set_accountlabel(const ::std::string& value);
  #if LANG_CXX11
  void set_accountlabel(::std::string&& value);
  #endif
  void set_accountlabel(const char* value);
  void set_accountlabel(const char* value, size_t size);
  ::std::string* mutable_accountlabel();
  ::std::string* release_accountlabel();
  void set_allocated_accountlabel(::std::string* accountlabel);

  // optional uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // optional bool resync = 4;
  bool has_resync() const;
  void clear_resync();
  static const int kResyncFieldNumber = 4;
  bool resync() const;
  void set_resync(bool value);

  // @@protoc_insertion_point(class_scope:opentxs.proto.PendingCommand)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_serialized();
  void clear_has_serialized();
  void set_has_accountlabel();
  void clear_has_accountlabel();
  void set_has_resync();
  void clear_has_resync();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr serialized_;
  ::google::protobuf::internal::ArenaStringPtr accountlabel_;
  ::google::protobuf::uint32 version_;
  bool resync_;
  friend struct ::protobuf_PendingCommand_2eproto::TableStruct;
  friend void ::protobuf_PendingCommand_2eproto::InitDefaultsPendingCommandImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PendingCommand

// optional uint32 version = 1;
inline bool PendingCommand::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PendingCommand::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PendingCommand::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PendingCommand::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 PendingCommand::version() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.PendingCommand.version)
  return version_;
}
inline void PendingCommand::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.PendingCommand.version)
}

// optional string serialized = 2;
inline bool PendingCommand::has_serialized() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PendingCommand::set_has_serialized() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PendingCommand::clear_has_serialized() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PendingCommand::clear_serialized() {
  serialized_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serialized();
}
inline const ::std::string& PendingCommand::serialized() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.PendingCommand.serialized)
  return serialized_.GetNoArena();
}
inline void PendingCommand::set_serialized(const ::std::string& value) {
  set_has_serialized();
  serialized_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.PendingCommand.serialized)
}
#if LANG_CXX11
inline void PendingCommand::set_serialized(::std::string&& value) {
  set_has_serialized();
  serialized_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.PendingCommand.serialized)
}
#endif
inline void PendingCommand::set_serialized(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_serialized();
  serialized_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.PendingCommand.serialized)
}
inline void PendingCommand::set_serialized(const char* value, size_t size) {
  set_has_serialized();
  serialized_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.PendingCommand.serialized)
}
inline ::std::string* PendingCommand::mutable_serialized() {
  set_has_serialized();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.PendingCommand.serialized)
  return serialized_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PendingCommand::release_serialized() {
  // @@protoc_insertion_point(field_release:opentxs.proto.PendingCommand.serialized)
  clear_has_serialized();
  return serialized_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PendingCommand::set_allocated_serialized(::std::string* serialized) {
  if (serialized != NULL) {
    set_has_serialized();
  } else {
    clear_has_serialized();
  }
  serialized_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serialized);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.PendingCommand.serialized)
}

// optional string accountlabel = 3;
inline bool PendingCommand::has_accountlabel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PendingCommand::set_has_accountlabel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PendingCommand::clear_has_accountlabel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PendingCommand::clear_accountlabel() {
  accountlabel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_accountlabel();
}
inline const ::std::string& PendingCommand::accountlabel() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.PendingCommand.accountlabel)
  return accountlabel_.GetNoArena();
}
inline void PendingCommand::set_accountlabel(const ::std::string& value) {
  set_has_accountlabel();
  accountlabel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.PendingCommand.accountlabel)
}
#if LANG_CXX11
inline void PendingCommand::set_accountlabel(::std::string&& value) {
  set_has_accountlabel();
  accountlabel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.PendingCommand.accountlabel)
}
#endif
inline void PendingCommand::set_accountlabel(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_accountlabel();
  accountlabel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.PendingCommand.accountlabel)
}
inline void PendingCommand::set_accountlabel(const char* value, size_t size) {
  set_has_accountlabel();
  accountlabel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.PendingCommand.accountlabel)
}
inline ::std::string* PendingCommand::mutable_accountlabel() {
  set_has_accountlabel();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.PendingCommand.accountlabel)
  return accountlabel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PendingCommand::release_accountlabel() {
  // @@protoc_insertion_point(field_release:opentxs.proto.PendingCommand.accountlabel)
  clear_has_accountlabel();
  return accountlabel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PendingCommand::set_allocated_accountlabel(::std::string* accountlabel) {
  if (accountlabel != NULL) {
    set_has_accountlabel();
  } else {
    clear_has_accountlabel();
  }
  accountlabel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), accountlabel);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.PendingCommand.accountlabel)
}

// optional bool resync = 4;
inline bool PendingCommand::has_resync() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PendingCommand::set_has_resync() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PendingCommand::clear_has_resync() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PendingCommand::clear_resync() {
  resync_ = false;
  clear_has_resync();
}
inline bool PendingCommand::resync() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.PendingCommand.resync)
  return resync_;
}
inline void PendingCommand::set_resync(bool value) {
  set_has_resync();
  resync_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.PendingCommand.resync)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace opentxs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PendingCommand_2eproto__INCLUDED
