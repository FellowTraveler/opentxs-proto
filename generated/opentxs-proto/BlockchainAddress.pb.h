// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BlockchainAddress.proto

#ifndef PROTOBUF_BlockchainAddress_2eproto__INCLUDED
#define PROTOBUF_BlockchainAddress_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "AsymmetricKey.pb.h"  // IWYU pragma: export
#include "BlockchainActivity.pb.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace protobuf_BlockchainAddress_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsBlockchainAddressImpl();
void InitDefaultsBlockchainAddress();
inline void InitDefaults() {
  InitDefaultsBlockchainAddress();
}
}  // namespace protobuf_BlockchainAddress_2eproto
namespace opentxs {
namespace proto {
class BlockchainAddress;
class BlockchainAddressDefaultTypeInternal;
extern BlockchainAddressDefaultTypeInternal _BlockchainAddress_default_instance_;
}  // namespace proto
}  // namespace opentxs
namespace opentxs {
namespace proto {

// ===================================================================

class BlockchainAddress : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:opentxs.proto.BlockchainAddress) */ {
 public:
  BlockchainAddress();
  virtual ~BlockchainAddress();

  BlockchainAddress(const BlockchainAddress& from);

  inline BlockchainAddress& operator=(const BlockchainAddress& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BlockchainAddress(BlockchainAddress&& from) noexcept
    : BlockchainAddress() {
    *this = ::std::move(from);
  }

  inline BlockchainAddress& operator=(BlockchainAddress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BlockchainAddress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockchainAddress* internal_default_instance() {
    return reinterpret_cast<const BlockchainAddress*>(
               &_BlockchainAddress_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(BlockchainAddress* other);
  friend void swap(BlockchainAddress& a, BlockchainAddress& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BlockchainAddress* New() const PROTOBUF_FINAL { return New(NULL); }

  BlockchainAddress* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const BlockchainAddress& from);
  void MergeFrom(const BlockchainAddress& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BlockchainAddress* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string label = 3;
  bool has_label() const;
  void clear_label();
  static const int kLabelFieldNumber = 3;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  #if LANG_CXX11
  void set_label(::std::string&& value);
  #endif
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // optional string contact = 4;
  bool has_contact() const;
  void clear_contact();
  static const int kContactFieldNumber = 4;
  const ::std::string& contact() const;
  void set_contact(const ::std::string& value);
  #if LANG_CXX11
  void set_contact(::std::string&& value);
  #endif
  void set_contact(const char* value);
  void set_contact(const char* value, size_t size);
  ::std::string* mutable_contact();
  ::std::string* release_contact();
  void set_allocated_contact(::std::string* contact);

  // optional .opentxs.proto.AsymmetricKey key = 5;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 5;
  const ::opentxs::proto::AsymmetricKey& key() const;
  ::opentxs::proto::AsymmetricKey* release_key();
  ::opentxs::proto::AsymmetricKey* mutable_key();
  void set_allocated_key(::opentxs::proto::AsymmetricKey* key);

  // optional uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // optional uint32 index = 2;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 2;
  ::google::protobuf::uint32 index() const;
  void set_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:opentxs.proto.BlockchainAddress)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_index();
  void clear_has_index();
  void set_has_label();
  void clear_has_label();
  void set_has_contact();
  void clear_has_contact();
  void set_has_key();
  void clear_has_key();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  ::google::protobuf::internal::ArenaStringPtr contact_;
  ::opentxs::proto::AsymmetricKey* key_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::uint32 index_;
  friend struct ::protobuf_BlockchainAddress_2eproto::TableStruct;
  friend void ::protobuf_BlockchainAddress_2eproto::InitDefaultsBlockchainAddressImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BlockchainAddress

// optional uint32 version = 1;
inline bool BlockchainAddress::has_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlockchainAddress::set_has_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BlockchainAddress::clear_has_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BlockchainAddress::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 BlockchainAddress::version() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.BlockchainAddress.version)
  return version_;
}
inline void BlockchainAddress::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.BlockchainAddress.version)
}

// optional uint32 index = 2;
inline bool BlockchainAddress::has_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlockchainAddress::set_has_index() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BlockchainAddress::clear_has_index() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BlockchainAddress::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 BlockchainAddress::index() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.BlockchainAddress.index)
  return index_;
}
inline void BlockchainAddress::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.BlockchainAddress.index)
}

// optional string label = 3;
inline bool BlockchainAddress::has_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockchainAddress::set_has_label() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlockchainAddress::clear_has_label() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlockchainAddress::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label();
}
inline const ::std::string& BlockchainAddress::label() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.BlockchainAddress.label)
  return label_.GetNoArena();
}
inline void BlockchainAddress::set_label(const ::std::string& value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.BlockchainAddress.label)
}
#if LANG_CXX11
inline void BlockchainAddress::set_label(::std::string&& value) {
  set_has_label();
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.BlockchainAddress.label)
}
#endif
inline void BlockchainAddress::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.BlockchainAddress.label)
}
inline void BlockchainAddress::set_label(const char* value, size_t size) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.BlockchainAddress.label)
}
inline ::std::string* BlockchainAddress::mutable_label() {
  set_has_label();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.BlockchainAddress.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockchainAddress::release_label() {
  // @@protoc_insertion_point(field_release:opentxs.proto.BlockchainAddress.label)
  clear_has_label();
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockchainAddress::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    set_has_label();
  } else {
    clear_has_label();
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.BlockchainAddress.label)
}

// optional string contact = 4;
inline bool BlockchainAddress::has_contact() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlockchainAddress::set_has_contact() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlockchainAddress::clear_has_contact() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlockchainAddress::clear_contact() {
  contact_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_contact();
}
inline const ::std::string& BlockchainAddress::contact() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.BlockchainAddress.contact)
  return contact_.GetNoArena();
}
inline void BlockchainAddress::set_contact(const ::std::string& value) {
  set_has_contact();
  contact_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.BlockchainAddress.contact)
}
#if LANG_CXX11
inline void BlockchainAddress::set_contact(::std::string&& value) {
  set_has_contact();
  contact_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.BlockchainAddress.contact)
}
#endif
inline void BlockchainAddress::set_contact(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_contact();
  contact_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.BlockchainAddress.contact)
}
inline void BlockchainAddress::set_contact(const char* value, size_t size) {
  set_has_contact();
  contact_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.BlockchainAddress.contact)
}
inline ::std::string* BlockchainAddress::mutable_contact() {
  set_has_contact();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.BlockchainAddress.contact)
  return contact_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockchainAddress::release_contact() {
  // @@protoc_insertion_point(field_release:opentxs.proto.BlockchainAddress.contact)
  clear_has_contact();
  return contact_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockchainAddress::set_allocated_contact(::std::string* contact) {
  if (contact != NULL) {
    set_has_contact();
  } else {
    clear_has_contact();
  }
  contact_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contact);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.BlockchainAddress.contact)
}

// optional .opentxs.proto.AsymmetricKey key = 5;
inline bool BlockchainAddress::has_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlockchainAddress::set_has_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlockchainAddress::clear_has_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::opentxs::proto::AsymmetricKey& BlockchainAddress::key() const {
  const ::opentxs::proto::AsymmetricKey* p = key_;
  // @@protoc_insertion_point(field_get:opentxs.proto.BlockchainAddress.key)
  return p != NULL ? *p : *reinterpret_cast<const ::opentxs::proto::AsymmetricKey*>(
      &::opentxs::proto::_AsymmetricKey_default_instance_);
}
inline ::opentxs::proto::AsymmetricKey* BlockchainAddress::release_key() {
  // @@protoc_insertion_point(field_release:opentxs.proto.BlockchainAddress.key)
  clear_has_key();
  ::opentxs::proto::AsymmetricKey* temp = key_;
  key_ = NULL;
  return temp;
}
inline ::opentxs::proto::AsymmetricKey* BlockchainAddress::mutable_key() {
  set_has_key();
  if (key_ == NULL) {
    key_ = new ::opentxs::proto::AsymmetricKey;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.proto.BlockchainAddress.key)
  return key_;
}
inline void BlockchainAddress::set_allocated_key(::opentxs::proto::AsymmetricKey* key) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(key_);
  }
  if (key) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      key = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    set_has_key();
  } else {
    clear_has_key();
  }
  key_ = key;
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.BlockchainAddress.key)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace opentxs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BlockchainAddress_2eproto__INCLUDED
