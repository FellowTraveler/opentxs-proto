// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ContactEvent.proto

#ifndef PROTOBUF_ContactEvent_2eproto__INCLUDED
#define PROTOBUF_ContactEvent_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "AccountEvent.pb.h"  // IWYU pragma: export
#include "RPCEnums.pb.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace protobuf_ContactEvent_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsContactEventImpl();
void InitDefaultsContactEvent();
inline void InitDefaults() {
  InitDefaultsContactEvent();
}
}  // namespace protobuf_ContactEvent_2eproto
namespace opentxs {
namespace proto {
class ContactEvent;
class ContactEventDefaultTypeInternal;
extern ContactEventDefaultTypeInternal _ContactEvent_default_instance_;
}  // namespace proto
}  // namespace opentxs
namespace opentxs {
namespace proto {

// ===================================================================

class ContactEvent : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:opentxs.proto.ContactEvent) */ {
 public:
  ContactEvent();
  virtual ~ContactEvent();

  ContactEvent(const ContactEvent& from);

  inline ContactEvent& operator=(const ContactEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ContactEvent(ContactEvent&& from) noexcept
    : ContactEvent() {
    *this = ::std::move(from);
  }

  inline ContactEvent& operator=(ContactEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ContactEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContactEvent* internal_default_instance() {
    return reinterpret_cast<const ContactEvent*>(
               &_ContactEvent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ContactEvent* other);
  friend void swap(ContactEvent& a, ContactEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ContactEvent* New() const PROTOBUF_FINAL { return New(NULL); }

  ContactEvent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const ContactEvent& from);
  void MergeFrom(const ContactEvent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContactEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string message = 5;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 5;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // optional string account = 6;
  bool has_account() const;
  void clear_account();
  static const int kAccountFieldNumber = 6;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // optional .opentxs.proto.AccountEvent accountevent = 7;
  bool has_accountevent() const;
  void clear_accountevent();
  static const int kAccounteventFieldNumber = 7;
  const ::opentxs::proto::AccountEvent& accountevent() const;
  ::opentxs::proto::AccountEvent* release_accountevent();
  ::opentxs::proto::AccountEvent* mutable_accountevent();
  void set_allocated_accountevent(::opentxs::proto::AccountEvent* accountevent);

  // optional uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // optional .opentxs.proto.ContactEventType type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::opentxs::proto::ContactEventType type() const;
  void set_type(::opentxs::proto::ContactEventType value);

  // optional int64 timestamp = 4;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:opentxs.proto.ContactEvent)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_id();
  void clear_has_id();
  void set_has_type();
  void clear_has_type();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_message();
  void clear_has_message();
  void set_has_account();
  void clear_has_account();
  void set_has_accountevent();
  void clear_has_accountevent();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::opentxs::proto::AccountEvent* accountevent_;
  ::google::protobuf::uint32 version_;
  int type_;
  ::google::protobuf::int64 timestamp_;
  friend struct ::protobuf_ContactEvent_2eproto::TableStruct;
  friend void ::protobuf_ContactEvent_2eproto::InitDefaultsContactEventImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ContactEvent

// optional uint32 version = 1;
inline bool ContactEvent::has_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ContactEvent::set_has_version() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ContactEvent::clear_has_version() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ContactEvent::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 ContactEvent::version() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.ContactEvent.version)
  return version_;
}
inline void ContactEvent::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.ContactEvent.version)
}

// optional string id = 2;
inline bool ContactEvent::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContactEvent::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContactEvent::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContactEvent::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& ContactEvent::id() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.ContactEvent.id)
  return id_.GetNoArena();
}
inline void ContactEvent::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.ContactEvent.id)
}
#if LANG_CXX11
inline void ContactEvent::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.ContactEvent.id)
}
#endif
inline void ContactEvent::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.ContactEvent.id)
}
inline void ContactEvent::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.ContactEvent.id)
}
inline ::std::string* ContactEvent::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.ContactEvent.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactEvent::release_id() {
  // @@protoc_insertion_point(field_release:opentxs.proto.ContactEvent.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactEvent::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.ContactEvent.id)
}

// optional .opentxs.proto.ContactEventType type = 3;
inline bool ContactEvent::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ContactEvent::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ContactEvent::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ContactEvent::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::opentxs::proto::ContactEventType ContactEvent::type() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.ContactEvent.type)
  return static_cast< ::opentxs::proto::ContactEventType >(type_);
}
inline void ContactEvent::set_type(::opentxs::proto::ContactEventType value) {
  assert(::opentxs::proto::ContactEventType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.ContactEvent.type)
}

// optional int64 timestamp = 4;
inline bool ContactEvent::has_timestamp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ContactEvent::set_has_timestamp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ContactEvent::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ContactEvent::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 ContactEvent::timestamp() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.ContactEvent.timestamp)
  return timestamp_;
}
inline void ContactEvent::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.ContactEvent.timestamp)
}

// optional string message = 5;
inline bool ContactEvent::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContactEvent::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ContactEvent::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ContactEvent::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
inline const ::std::string& ContactEvent::message() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.ContactEvent.message)
  return message_.GetNoArena();
}
inline void ContactEvent::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.ContactEvent.message)
}
#if LANG_CXX11
inline void ContactEvent::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.ContactEvent.message)
}
#endif
inline void ContactEvent::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.ContactEvent.message)
}
inline void ContactEvent::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.ContactEvent.message)
}
inline ::std::string* ContactEvent::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.ContactEvent.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactEvent::release_message() {
  // @@protoc_insertion_point(field_release:opentxs.proto.ContactEvent.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactEvent::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.ContactEvent.message)
}

// optional string account = 6;
inline bool ContactEvent::has_account() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ContactEvent::set_has_account() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ContactEvent::clear_has_account() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ContactEvent::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
inline const ::std::string& ContactEvent::account() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.ContactEvent.account)
  return account_.GetNoArena();
}
inline void ContactEvent::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.ContactEvent.account)
}
#if LANG_CXX11
inline void ContactEvent::set_account(::std::string&& value) {
  set_has_account();
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.ContactEvent.account)
}
#endif
inline void ContactEvent::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.ContactEvent.account)
}
inline void ContactEvent::set_account(const char* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.ContactEvent.account)
}
inline ::std::string* ContactEvent::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.ContactEvent.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactEvent::release_account() {
  // @@protoc_insertion_point(field_release:opentxs.proto.ContactEvent.account)
  clear_has_account();
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactEvent::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.ContactEvent.account)
}

// optional .opentxs.proto.AccountEvent accountevent = 7;
inline bool ContactEvent::has_accountevent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ContactEvent::set_has_accountevent() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ContactEvent::clear_has_accountevent() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::opentxs::proto::AccountEvent& ContactEvent::accountevent() const {
  const ::opentxs::proto::AccountEvent* p = accountevent_;
  // @@protoc_insertion_point(field_get:opentxs.proto.ContactEvent.accountevent)
  return p != NULL ? *p : *reinterpret_cast<const ::opentxs::proto::AccountEvent*>(
      &::opentxs::proto::_AccountEvent_default_instance_);
}
inline ::opentxs::proto::AccountEvent* ContactEvent::release_accountevent() {
  // @@protoc_insertion_point(field_release:opentxs.proto.ContactEvent.accountevent)
  clear_has_accountevent();
  ::opentxs::proto::AccountEvent* temp = accountevent_;
  accountevent_ = NULL;
  return temp;
}
inline ::opentxs::proto::AccountEvent* ContactEvent::mutable_accountevent() {
  set_has_accountevent();
  if (accountevent_ == NULL) {
    accountevent_ = new ::opentxs::proto::AccountEvent;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.proto.ContactEvent.accountevent)
  return accountevent_;
}
inline void ContactEvent::set_allocated_accountevent(::opentxs::proto::AccountEvent* accountevent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(accountevent_);
  }
  if (accountevent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      accountevent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, accountevent, submessage_arena);
    }
    set_has_accountevent();
  } else {
    clear_has_accountevent();
  }
  accountevent_ = accountevent;
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.ContactEvent.accountevent)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace opentxs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ContactEvent_2eproto__INCLUDED
