// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Seed.proto

#ifndef PROTOBUF_Seed_2eproto__INCLUDED
#define PROTOBUF_Seed_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "Ciphertext.pb.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace protobuf_Seed_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsSeedImpl();
void InitDefaultsSeed();
inline void InitDefaults() {
  InitDefaultsSeed();
}
}  // namespace protobuf_Seed_2eproto
namespace opentxs {
namespace proto {
class Seed;
class SeedDefaultTypeInternal;
extern SeedDefaultTypeInternal _Seed_default_instance_;
}  // namespace proto
}  // namespace opentxs
namespace opentxs {
namespace proto {

// ===================================================================

class Seed : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:opentxs.proto.Seed) */ {
 public:
  Seed();
  virtual ~Seed();

  Seed(const Seed& from);

  inline Seed& operator=(const Seed& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Seed(Seed&& from) noexcept
    : Seed() {
    *this = ::std::move(from);
  }

  inline Seed& operator=(Seed&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Seed& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Seed* internal_default_instance() {
    return reinterpret_cast<const Seed*>(
               &_Seed_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Seed* other);
  friend void swap(Seed& a, Seed& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Seed* New() const PROTOBUF_FINAL { return New(NULL); }

  Seed* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Seed& from);
  void MergeFrom(const Seed& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Seed* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string fingerprint = 4;
  bool has_fingerprint() const;
  void clear_fingerprint();
  static const int kFingerprintFieldNumber = 4;
  const ::std::string& fingerprint() const;
  void set_fingerprint(const ::std::string& value);
  #if LANG_CXX11
  void set_fingerprint(::std::string&& value);
  #endif
  void set_fingerprint(const char* value);
  void set_fingerprint(const char* value, size_t size);
  ::std::string* mutable_fingerprint();
  ::std::string* release_fingerprint();
  void set_allocated_fingerprint(::std::string* fingerprint);

  // optional .opentxs.proto.Ciphertext words = 2;
  bool has_words() const;
  void clear_words();
  static const int kWordsFieldNumber = 2;
  const ::opentxs::proto::Ciphertext& words() const;
  ::opentxs::proto::Ciphertext* release_words();
  ::opentxs::proto::Ciphertext* mutable_words();
  void set_allocated_words(::opentxs::proto::Ciphertext* words);

  // optional .opentxs.proto.Ciphertext passphrase = 3;
  bool has_passphrase() const;
  void clear_passphrase();
  static const int kPassphraseFieldNumber = 3;
  const ::opentxs::proto::Ciphertext& passphrase() const;
  ::opentxs::proto::Ciphertext* release_passphrase();
  ::opentxs::proto::Ciphertext* mutable_passphrase();
  void set_allocated_passphrase(::opentxs::proto::Ciphertext* passphrase);

  // optional .opentxs.proto.Ciphertext raw = 6;
  bool has_raw() const;
  void clear_raw();
  static const int kRawFieldNumber = 6;
  const ::opentxs::proto::Ciphertext& raw() const;
  ::opentxs::proto::Ciphertext* release_raw();
  ::opentxs::proto::Ciphertext* mutable_raw();
  void set_allocated_raw(::opentxs::proto::Ciphertext* raw);

  // optional uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // optional uint32 index = 5;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 5;
  ::google::protobuf::uint32 index() const;
  void set_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:opentxs.proto.Seed)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_words();
  void clear_has_words();
  void set_has_passphrase();
  void clear_has_passphrase();
  void set_has_fingerprint();
  void clear_has_fingerprint();
  void set_has_index();
  void clear_has_index();
  void set_has_raw();
  void clear_has_raw();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr fingerprint_;
  ::opentxs::proto::Ciphertext* words_;
  ::opentxs::proto::Ciphertext* passphrase_;
  ::opentxs::proto::Ciphertext* raw_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::uint32 index_;
  friend struct ::protobuf_Seed_2eproto::TableStruct;
  friend void ::protobuf_Seed_2eproto::InitDefaultsSeedImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Seed

// optional uint32 version = 1;
inline bool Seed::has_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Seed::set_has_version() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Seed::clear_has_version() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Seed::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 Seed::version() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.Seed.version)
  return version_;
}
inline void Seed::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.Seed.version)
}

// optional .opentxs.proto.Ciphertext words = 2;
inline bool Seed::has_words() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Seed::set_has_words() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Seed::clear_has_words() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::opentxs::proto::Ciphertext& Seed::words() const {
  const ::opentxs::proto::Ciphertext* p = words_;
  // @@protoc_insertion_point(field_get:opentxs.proto.Seed.words)
  return p != NULL ? *p : *reinterpret_cast<const ::opentxs::proto::Ciphertext*>(
      &::opentxs::proto::_Ciphertext_default_instance_);
}
inline ::opentxs::proto::Ciphertext* Seed::release_words() {
  // @@protoc_insertion_point(field_release:opentxs.proto.Seed.words)
  clear_has_words();
  ::opentxs::proto::Ciphertext* temp = words_;
  words_ = NULL;
  return temp;
}
inline ::opentxs::proto::Ciphertext* Seed::mutable_words() {
  set_has_words();
  if (words_ == NULL) {
    words_ = new ::opentxs::proto::Ciphertext;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.proto.Seed.words)
  return words_;
}
inline void Seed::set_allocated_words(::opentxs::proto::Ciphertext* words) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(words_);
  }
  if (words) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      words = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, words, submessage_arena);
    }
    set_has_words();
  } else {
    clear_has_words();
  }
  words_ = words;
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.Seed.words)
}

// optional .opentxs.proto.Ciphertext passphrase = 3;
inline bool Seed::has_passphrase() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Seed::set_has_passphrase() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Seed::clear_has_passphrase() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::opentxs::proto::Ciphertext& Seed::passphrase() const {
  const ::opentxs::proto::Ciphertext* p = passphrase_;
  // @@protoc_insertion_point(field_get:opentxs.proto.Seed.passphrase)
  return p != NULL ? *p : *reinterpret_cast<const ::opentxs::proto::Ciphertext*>(
      &::opentxs::proto::_Ciphertext_default_instance_);
}
inline ::opentxs::proto::Ciphertext* Seed::release_passphrase() {
  // @@protoc_insertion_point(field_release:opentxs.proto.Seed.passphrase)
  clear_has_passphrase();
  ::opentxs::proto::Ciphertext* temp = passphrase_;
  passphrase_ = NULL;
  return temp;
}
inline ::opentxs::proto::Ciphertext* Seed::mutable_passphrase() {
  set_has_passphrase();
  if (passphrase_ == NULL) {
    passphrase_ = new ::opentxs::proto::Ciphertext;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.proto.Seed.passphrase)
  return passphrase_;
}
inline void Seed::set_allocated_passphrase(::opentxs::proto::Ciphertext* passphrase) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(passphrase_);
  }
  if (passphrase) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      passphrase = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, passphrase, submessage_arena);
    }
    set_has_passphrase();
  } else {
    clear_has_passphrase();
  }
  passphrase_ = passphrase;
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.Seed.passphrase)
}

// optional string fingerprint = 4;
inline bool Seed::has_fingerprint() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Seed::set_has_fingerprint() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Seed::clear_has_fingerprint() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Seed::clear_fingerprint() {
  fingerprint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fingerprint();
}
inline const ::std::string& Seed::fingerprint() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.Seed.fingerprint)
  return fingerprint_.GetNoArena();
}
inline void Seed::set_fingerprint(const ::std::string& value) {
  set_has_fingerprint();
  fingerprint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.Seed.fingerprint)
}
#if LANG_CXX11
inline void Seed::set_fingerprint(::std::string&& value) {
  set_has_fingerprint();
  fingerprint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.Seed.fingerprint)
}
#endif
inline void Seed::set_fingerprint(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fingerprint();
  fingerprint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.Seed.fingerprint)
}
inline void Seed::set_fingerprint(const char* value, size_t size) {
  set_has_fingerprint();
  fingerprint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.Seed.fingerprint)
}
inline ::std::string* Seed::mutable_fingerprint() {
  set_has_fingerprint();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.Seed.fingerprint)
  return fingerprint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Seed::release_fingerprint() {
  // @@protoc_insertion_point(field_release:opentxs.proto.Seed.fingerprint)
  clear_has_fingerprint();
  return fingerprint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Seed::set_allocated_fingerprint(::std::string* fingerprint) {
  if (fingerprint != NULL) {
    set_has_fingerprint();
  } else {
    clear_has_fingerprint();
  }
  fingerprint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fingerprint);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.Seed.fingerprint)
}

// optional uint32 index = 5;
inline bool Seed::has_index() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Seed::set_has_index() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Seed::clear_has_index() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Seed::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 Seed::index() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.Seed.index)
  return index_;
}
inline void Seed::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.Seed.index)
}

// optional .opentxs.proto.Ciphertext raw = 6;
inline bool Seed::has_raw() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Seed::set_has_raw() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Seed::clear_has_raw() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::opentxs::proto::Ciphertext& Seed::raw() const {
  const ::opentxs::proto::Ciphertext* p = raw_;
  // @@protoc_insertion_point(field_get:opentxs.proto.Seed.raw)
  return p != NULL ? *p : *reinterpret_cast<const ::opentxs::proto::Ciphertext*>(
      &::opentxs::proto::_Ciphertext_default_instance_);
}
inline ::opentxs::proto::Ciphertext* Seed::release_raw() {
  // @@protoc_insertion_point(field_release:opentxs.proto.Seed.raw)
  clear_has_raw();
  ::opentxs::proto::Ciphertext* temp = raw_;
  raw_ = NULL;
  return temp;
}
inline ::opentxs::proto::Ciphertext* Seed::mutable_raw() {
  set_has_raw();
  if (raw_ == NULL) {
    raw_ = new ::opentxs::proto::Ciphertext;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.proto.Seed.raw)
  return raw_;
}
inline void Seed::set_allocated_raw(::opentxs::proto::Ciphertext* raw) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(raw_);
  }
  if (raw) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      raw = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, raw, submessage_arena);
    }
    set_has_raw();
  } else {
    clear_has_raw();
  }
  raw_ = raw;
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.Seed.raw)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace opentxs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Seed_2eproto__INCLUDED
