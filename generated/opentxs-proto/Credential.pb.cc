// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Credential.proto

#include "Credential.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace opentxs {
namespace proto {
class CredentialDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Credential>
      _instance;
  const ::opentxs::proto::KeyCredential* publiccredential_;
  const ::opentxs::proto::ContactData* contactdata_;
  const ::opentxs::proto::VerificationSet* verification_;
  const ::opentxs::proto::KeyCredential* privatecredential_;
} _Credential_default_instance_;
}  // namespace proto
}  // namespace opentxs
namespace protobuf_Credential_2eproto {
void InitDefaultsCredentialImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_ChildCredentialParameters_2eproto::InitDefaultsChildCredentialParameters();
  protobuf_MasterCredentialParameters_2eproto::InitDefaultsMasterCredentialParameters();
  protobuf_KeyCredential_2eproto::InitDefaultsKeyCredential();
  protobuf_ContactData_2eproto::InitDefaultsContactData();
  protobuf_VerificationSet_2eproto::InitDefaultsVerificationSet();
  protobuf_Signature_2eproto::InitDefaultsSignature();
  {
    void* ptr = &::opentxs::proto::_Credential_default_instance_;
    new (ptr) ::opentxs::proto::Credential();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opentxs::proto::Credential::InitAsDefaultInstance();
}

void InitDefaultsCredential() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCredentialImpl);
}

}  // namespace protobuf_Credential_2eproto
namespace opentxs {
namespace proto {

// ===================================================================

void Credential::InitAsDefaultInstance() {
  ::opentxs::proto::_Credential_default_instance_._instance.get_mutable()->childdata_ = const_cast< ::opentxs::proto::ChildCredentialParameters*>(
      ::opentxs::proto::ChildCredentialParameters::internal_default_instance());
  ::opentxs::proto::_Credential_default_instance_._instance.get_mutable()->masterdata_ = const_cast< ::opentxs::proto::MasterCredentialParameters*>(
      ::opentxs::proto::MasterCredentialParameters::internal_default_instance());
}
void Credential::clear_childdata() {
  if (childdata_ != NULL) childdata_->Clear();
  clear_has_childdata();
}
void Credential::clear_masterdata() {
  if (masterdata_ != NULL) masterdata_->Clear();
  clear_has_masterdata();
}
void Credential::set_allocated_publiccredential(::opentxs::proto::KeyCredential* publiccredential) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_publicData();
  if (publiccredential) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      publiccredential = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, publiccredential, submessage_arena);
    }
    set_has_publiccredential();
    publicData_.publiccredential_ = publiccredential;
  }
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.Credential.publicCredential)
}
void Credential::clear_publiccredential() {
  if (has_publiccredential()) {
    delete publicData_.publiccredential_;
    clear_has_publicData();
  }
}
void Credential::set_allocated_contactdata(::opentxs::proto::ContactData* contactdata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_publicData();
  if (contactdata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      contactdata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, contactdata, submessage_arena);
    }
    set_has_contactdata();
    publicData_.contactdata_ = contactdata;
  }
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.Credential.contactData)
}
void Credential::clear_contactdata() {
  if (has_contactdata()) {
    delete publicData_.contactdata_;
    clear_has_publicData();
  }
}
void Credential::set_allocated_verification(::opentxs::proto::VerificationSet* verification) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_publicData();
  if (verification) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      verification = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, verification, submessage_arena);
    }
    set_has_verification();
    publicData_.verification_ = verification;
  }
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.Credential.verification)
}
void Credential::clear_verification() {
  if (has_verification()) {
    delete publicData_.verification_;
    clear_has_publicData();
  }
}
void Credential::set_allocated_privatecredential(::opentxs::proto::KeyCredential* privatecredential) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_privateData();
  if (privatecredential) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      privatecredential = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, privatecredential, submessage_arena);
    }
    set_has_privatecredential();
    privateData_.privatecredential_ = privatecredential;
  }
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.Credential.privateCredential)
}
void Credential::clear_privatecredential() {
  if (has_privatecredential()) {
    delete privateData_.privatecredential_;
    clear_has_privateData();
  }
}
void Credential::clear_signature() {
  signature_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Credential::kVersionFieldNumber;
const int Credential::kIdFieldNumber;
const int Credential::kTypeFieldNumber;
const int Credential::kRoleFieldNumber;
const int Credential::kModeFieldNumber;
const int Credential::kNymIDFieldNumber;
const int Credential::kChildDataFieldNumber;
const int Credential::kMasterDataFieldNumber;
const int Credential::kPublicCredentialFieldNumber;
const int Credential::kContactDataFieldNumber;
const int Credential::kVerificationFieldNumber;
const int Credential::kPrivateCredentialFieldNumber;
const int Credential::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Credential::Credential()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Credential_2eproto::InitDefaultsCredential();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:opentxs.proto.Credential)
}
Credential::Credential(const Credential& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      signature_(from.signature_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  nymid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nymid()) {
    nymid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nymid_);
  }
  if (from.has_childdata()) {
    childdata_ = new ::opentxs::proto::ChildCredentialParameters(*from.childdata_);
  } else {
    childdata_ = NULL;
  }
  if (from.has_masterdata()) {
    masterdata_ = new ::opentxs::proto::MasterCredentialParameters(*from.masterdata_);
  } else {
    masterdata_ = NULL;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&version_)) + sizeof(mode_));
  clear_has_publicData();
  switch (from.publicData_case()) {
    case kPublicCredential: {
      mutable_publiccredential()->::opentxs::proto::KeyCredential::MergeFrom(from.publiccredential());
      break;
    }
    case kContactData: {
      mutable_contactdata()->::opentxs::proto::ContactData::MergeFrom(from.contactdata());
      break;
    }
    case kVerification: {
      mutable_verification()->::opentxs::proto::VerificationSet::MergeFrom(from.verification());
      break;
    }
    case PUBLICDATA_NOT_SET: {
      break;
    }
  }
  clear_has_privateData();
  switch (from.privateData_case()) {
    case kPrivateCredential: {
      mutable_privatecredential()->::opentxs::proto::KeyCredential::MergeFrom(from.privatecredential());
      break;
    }
    case PRIVATEDATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:opentxs.proto.Credential)
}

void Credential::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nymid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&childdata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mode_) -
      reinterpret_cast<char*>(&childdata_)) + sizeof(mode_));
  clear_has_publicData();
  clear_has_privateData();
}

Credential::~Credential() {
  // @@protoc_insertion_point(destructor:opentxs.proto.Credential)
  SharedDtor();
}

void Credential::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nymid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete childdata_;
  if (this != internal_default_instance()) delete masterdata_;
  if (has_publicData()) {
    clear_publicData();
  }
  if (has_privateData()) {
    clear_privateData();
  }
}

void Credential::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Credential& Credential::default_instance() {
  ::protobuf_Credential_2eproto::InitDefaultsCredential();
  return *internal_default_instance();
}

Credential* Credential::New(::google::protobuf::Arena* arena) const {
  Credential* n = new Credential;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Credential::clear_publicData() {
// @@protoc_insertion_point(one_of_clear_start:opentxs.proto.Credential)
  switch (publicData_case()) {
    case kPublicCredential: {
      delete publicData_.publiccredential_;
      break;
    }
    case kContactData: {
      delete publicData_.contactdata_;
      break;
    }
    case kVerification: {
      delete publicData_.verification_;
      break;
    }
    case PUBLICDATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PUBLICDATA_NOT_SET;
}

void Credential::clear_privateData() {
// @@protoc_insertion_point(one_of_clear_start:opentxs.proto.Credential)
  switch (privateData_case()) {
    case kPrivateCredential: {
      delete privateData_.privatecredential_;
      break;
    }
    case PRIVATEDATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = PRIVATEDATA_NOT_SET;
}


void Credential::Clear() {
// @@protoc_insertion_point(message_clear_start:opentxs.proto.Credential)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signature_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!nymid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*nymid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(childdata_ != NULL);
      childdata_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(masterdata_ != NULL);
      masterdata_->Clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mode_) -
        reinterpret_cast<char*>(&version_)) + sizeof(mode_));
  }
  clear_publicData();
  clear_privateData();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Credential::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:opentxs.proto.Credential)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.CredentialType type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::opentxs::proto::CredentialType_IsValid(value)) {
            set_type(static_cast< ::opentxs::proto::CredentialType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.CredentialRole role = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::opentxs::proto::CredentialRole_IsValid(value)) {
            set_role(static_cast< ::opentxs::proto::CredentialRole >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.KeyMode mode = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::opentxs::proto::KeyMode_IsValid(value)) {
            set_mode(static_cast< ::opentxs::proto::KeyMode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(40u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string nymID = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nymid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.ChildCredentialParameters childData = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_childdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.MasterCredentialParameters masterData = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_masterdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.KeyCredential publicCredential = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_publiccredential()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.KeyCredential privateCredential = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_privatecredential()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.ContactData contactData = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_contactdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.VerificationSet verification = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_verification()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .opentxs.proto.Signature signature = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opentxs.proto.Credential)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opentxs.proto.Credential)
  return false;
#undef DO_
}

void Credential::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opentxs.proto.Credential)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional string id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // optional .opentxs.proto.CredentialType type = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional .opentxs.proto.CredentialRole role = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->role(), output);
  }

  // optional .opentxs.proto.KeyMode mode = 5;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->mode(), output);
  }

  // optional string nymID = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->nymid(), output);
  }

  // optional .opentxs.proto.ChildCredentialParameters childData = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, *this->childdata_, output);
  }

  // optional .opentxs.proto.MasterCredentialParameters masterData = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, *this->masterdata_, output);
  }

  // optional .opentxs.proto.KeyCredential publicCredential = 9;
  if (has_publiccredential()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, *publicData_.publiccredential_, output);
  }

  // optional .opentxs.proto.KeyCredential privateCredential = 10;
  if (has_privatecredential()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, *privateData_.privatecredential_, output);
  }

  switch (publicData_case()) {
    case kContactData:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        11, *publicData_.contactdata_, output);
      break;
    case kVerification:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        12, *publicData_.verification_, output);
      break;
    default: ;
  }
  // repeated .opentxs.proto.Signature signature = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->signature_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, this->signature(static_cast<int>(i)), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:opentxs.proto.Credential)
}

size_t Credential::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentxs.proto.Credential)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated .opentxs.proto.Signature signature = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->signature_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->signature(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string nymID = 6;
    if (has_nymid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nymid());
    }

    // optional .opentxs.proto.ChildCredentialParameters childData = 7;
    if (has_childdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->childdata_);
    }

    // optional .opentxs.proto.MasterCredentialParameters masterData = 8;
    if (has_masterdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->masterdata_);
    }

    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional .opentxs.proto.CredentialType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .opentxs.proto.CredentialRole role = 4;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->role());
    }

    // optional .opentxs.proto.KeyMode mode = 5;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

  }
  switch (publicData_case()) {
    // optional .opentxs.proto.KeyCredential publicCredential = 9;
    case kPublicCredential: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *publicData_.publiccredential_);
      break;
    }
    // optional .opentxs.proto.ContactData contactData = 11;
    case kContactData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *publicData_.contactdata_);
      break;
    }
    // optional .opentxs.proto.VerificationSet verification = 12;
    case kVerification: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *publicData_.verification_);
      break;
    }
    case PUBLICDATA_NOT_SET: {
      break;
    }
  }
  switch (privateData_case()) {
    // optional .opentxs.proto.KeyCredential privateCredential = 10;
    case kPrivateCredential: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *privateData_.privatecredential_);
      break;
    }
    case PRIVATEDATA_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Credential::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Credential*>(&from));
}

void Credential::MergeFrom(const Credential& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentxs.proto.Credential)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signature_.MergeFrom(from.signature_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_nymid();
      nymid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nymid_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_childdata()->::opentxs::proto::ChildCredentialParameters::MergeFrom(from.childdata());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_masterdata()->::opentxs::proto::MasterCredentialParameters::MergeFrom(from.masterdata());
    }
    if (cached_has_bits & 0x00000010u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000040u) {
      role_ = from.role_;
    }
    if (cached_has_bits & 0x00000080u) {
      mode_ = from.mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.publicData_case()) {
    case kPublicCredential: {
      mutable_publiccredential()->::opentxs::proto::KeyCredential::MergeFrom(from.publiccredential());
      break;
    }
    case kContactData: {
      mutable_contactdata()->::opentxs::proto::ContactData::MergeFrom(from.contactdata());
      break;
    }
    case kVerification: {
      mutable_verification()->::opentxs::proto::VerificationSet::MergeFrom(from.verification());
      break;
    }
    case PUBLICDATA_NOT_SET: {
      break;
    }
  }
  switch (from.privateData_case()) {
    case kPrivateCredential: {
      mutable_privatecredential()->::opentxs::proto::KeyCredential::MergeFrom(from.privatecredential());
      break;
    }
    case PRIVATEDATA_NOT_SET: {
      break;
    }
  }
}

void Credential::CopyFrom(const Credential& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentxs.proto.Credential)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Credential::IsInitialized() const {
  return true;
}

void Credential::Swap(Credential* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Credential::InternalSwap(Credential* other) {
  using std::swap;
  signature_.InternalSwap(&other->signature_);
  id_.Swap(&other->id_);
  nymid_.Swap(&other->nymid_);
  swap(childdata_, other->childdata_);
  swap(masterdata_, other->masterdata_);
  swap(version_, other->version_);
  swap(type_, other->type_);
  swap(role_, other->role_);
  swap(mode_, other->mode_);
  swap(publicData_, other->publicData_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(privateData_, other->privateData_);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string Credential::GetTypeName() const {
  return "opentxs.proto.Credential";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace opentxs

// @@protoc_insertion_point(global_scope)
