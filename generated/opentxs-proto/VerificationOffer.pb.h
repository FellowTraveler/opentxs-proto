// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VerificationOffer.proto

#ifndef PROTOBUF_VerificationOffer_2eproto__INCLUDED
#define PROTOBUF_VerificationOffer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "Claim.pb.h"  // IWYU pragma: export
#include "ContactEnums.pb.h"  // IWYU pragma: export
#include "Verification.pb.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace protobuf_VerificationOffer_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsVerificationOfferImpl();
void InitDefaultsVerificationOffer();
inline void InitDefaults() {
  InitDefaultsVerificationOffer();
}
}  // namespace protobuf_VerificationOffer_2eproto
namespace opentxs {
namespace proto {
class VerificationOffer;
class VerificationOfferDefaultTypeInternal;
extern VerificationOfferDefaultTypeInternal _VerificationOffer_default_instance_;
}  // namespace proto
}  // namespace opentxs
namespace opentxs {
namespace proto {

// ===================================================================

class VerificationOffer : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:opentxs.proto.VerificationOffer) */ {
 public:
  VerificationOffer();
  virtual ~VerificationOffer();

  VerificationOffer(const VerificationOffer& from);

  inline VerificationOffer& operator=(const VerificationOffer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VerificationOffer(VerificationOffer&& from) noexcept
    : VerificationOffer() {
    *this = ::std::move(from);
  }

  inline VerificationOffer& operator=(VerificationOffer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const VerificationOffer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VerificationOffer* internal_default_instance() {
    return reinterpret_cast<const VerificationOffer*>(
               &_VerificationOffer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(VerificationOffer* other);
  friend void swap(VerificationOffer& a, VerificationOffer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VerificationOffer* New() const PROTOBUF_FINAL { return New(NULL); }

  VerificationOffer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const VerificationOffer& from);
  void MergeFrom(const VerificationOffer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VerificationOffer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string offeringnym = 2;
  bool has_offeringnym() const;
  void clear_offeringnym();
  static const int kOfferingnymFieldNumber = 2;
  const ::std::string& offeringnym() const;
  void set_offeringnym(const ::std::string& value);
  #if LANG_CXX11
  void set_offeringnym(::std::string&& value);
  #endif
  void set_offeringnym(const char* value);
  void set_offeringnym(const char* value, size_t size);
  ::std::string* mutable_offeringnym();
  ::std::string* release_offeringnym();
  void set_allocated_offeringnym(::std::string* offeringnym);

  // optional string recipientnym = 3;
  bool has_recipientnym() const;
  void clear_recipientnym();
  static const int kRecipientnymFieldNumber = 3;
  const ::std::string& recipientnym() const;
  void set_recipientnym(const ::std::string& value);
  #if LANG_CXX11
  void set_recipientnym(::std::string&& value);
  #endif
  void set_recipientnym(const char* value);
  void set_recipientnym(const char* value, size_t size);
  ::std::string* mutable_recipientnym();
  ::std::string* release_recipientnym();
  void set_allocated_recipientnym(::std::string* recipientnym);

  // optional .opentxs.proto.Claim claim = 4;
  bool has_claim() const;
  void clear_claim();
  static const int kClaimFieldNumber = 4;
  const ::opentxs::proto::Claim& claim() const;
  ::opentxs::proto::Claim* release_claim();
  ::opentxs::proto::Claim* mutable_claim();
  void set_allocated_claim(::opentxs::proto::Claim* claim);

  // optional .opentxs.proto.Verification verification = 5;
  bool has_verification() const;
  void clear_verification();
  static const int kVerificationFieldNumber = 5;
  const ::opentxs::proto::Verification& verification() const;
  ::opentxs::proto::Verification* release_verification();
  ::opentxs::proto::Verification* mutable_verification();
  void set_allocated_verification(::opentxs::proto::Verification* verification);

  // optional uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:opentxs.proto.VerificationOffer)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_offeringnym();
  void clear_has_offeringnym();
  void set_has_recipientnym();
  void clear_has_recipientnym();
  void set_has_claim();
  void clear_has_claim();
  void set_has_verification();
  void clear_has_verification();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr offeringnym_;
  ::google::protobuf::internal::ArenaStringPtr recipientnym_;
  ::opentxs::proto::Claim* claim_;
  ::opentxs::proto::Verification* verification_;
  ::google::protobuf::uint32 version_;
  friend struct ::protobuf_VerificationOffer_2eproto::TableStruct;
  friend void ::protobuf_VerificationOffer_2eproto::InitDefaultsVerificationOfferImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VerificationOffer

// optional uint32 version = 1;
inline bool VerificationOffer::has_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VerificationOffer::set_has_version() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VerificationOffer::clear_has_version() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VerificationOffer::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 VerificationOffer::version() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.VerificationOffer.version)
  return version_;
}
inline void VerificationOffer::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.VerificationOffer.version)
}

// optional string offeringnym = 2;
inline bool VerificationOffer::has_offeringnym() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VerificationOffer::set_has_offeringnym() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VerificationOffer::clear_has_offeringnym() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VerificationOffer::clear_offeringnym() {
  offeringnym_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_offeringnym();
}
inline const ::std::string& VerificationOffer::offeringnym() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.VerificationOffer.offeringnym)
  return offeringnym_.GetNoArena();
}
inline void VerificationOffer::set_offeringnym(const ::std::string& value) {
  set_has_offeringnym();
  offeringnym_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.VerificationOffer.offeringnym)
}
#if LANG_CXX11
inline void VerificationOffer::set_offeringnym(::std::string&& value) {
  set_has_offeringnym();
  offeringnym_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.VerificationOffer.offeringnym)
}
#endif
inline void VerificationOffer::set_offeringnym(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_offeringnym();
  offeringnym_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.VerificationOffer.offeringnym)
}
inline void VerificationOffer::set_offeringnym(const char* value, size_t size) {
  set_has_offeringnym();
  offeringnym_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.VerificationOffer.offeringnym)
}
inline ::std::string* VerificationOffer::mutable_offeringnym() {
  set_has_offeringnym();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.VerificationOffer.offeringnym)
  return offeringnym_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VerificationOffer::release_offeringnym() {
  // @@protoc_insertion_point(field_release:opentxs.proto.VerificationOffer.offeringnym)
  clear_has_offeringnym();
  return offeringnym_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VerificationOffer::set_allocated_offeringnym(::std::string* offeringnym) {
  if (offeringnym != NULL) {
    set_has_offeringnym();
  } else {
    clear_has_offeringnym();
  }
  offeringnym_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), offeringnym);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.VerificationOffer.offeringnym)
}

// optional string recipientnym = 3;
inline bool VerificationOffer::has_recipientnym() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VerificationOffer::set_has_recipientnym() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VerificationOffer::clear_has_recipientnym() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VerificationOffer::clear_recipientnym() {
  recipientnym_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_recipientnym();
}
inline const ::std::string& VerificationOffer::recipientnym() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.VerificationOffer.recipientnym)
  return recipientnym_.GetNoArena();
}
inline void VerificationOffer::set_recipientnym(const ::std::string& value) {
  set_has_recipientnym();
  recipientnym_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.VerificationOffer.recipientnym)
}
#if LANG_CXX11
inline void VerificationOffer::set_recipientnym(::std::string&& value) {
  set_has_recipientnym();
  recipientnym_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.VerificationOffer.recipientnym)
}
#endif
inline void VerificationOffer::set_recipientnym(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_recipientnym();
  recipientnym_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.VerificationOffer.recipientnym)
}
inline void VerificationOffer::set_recipientnym(const char* value, size_t size) {
  set_has_recipientnym();
  recipientnym_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.VerificationOffer.recipientnym)
}
inline ::std::string* VerificationOffer::mutable_recipientnym() {
  set_has_recipientnym();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.VerificationOffer.recipientnym)
  return recipientnym_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VerificationOffer::release_recipientnym() {
  // @@protoc_insertion_point(field_release:opentxs.proto.VerificationOffer.recipientnym)
  clear_has_recipientnym();
  return recipientnym_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VerificationOffer::set_allocated_recipientnym(::std::string* recipientnym) {
  if (recipientnym != NULL) {
    set_has_recipientnym();
  } else {
    clear_has_recipientnym();
  }
  recipientnym_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recipientnym);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.VerificationOffer.recipientnym)
}

// optional .opentxs.proto.Claim claim = 4;
inline bool VerificationOffer::has_claim() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VerificationOffer::set_has_claim() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VerificationOffer::clear_has_claim() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::opentxs::proto::Claim& VerificationOffer::claim() const {
  const ::opentxs::proto::Claim* p = claim_;
  // @@protoc_insertion_point(field_get:opentxs.proto.VerificationOffer.claim)
  return p != NULL ? *p : *reinterpret_cast<const ::opentxs::proto::Claim*>(
      &::opentxs::proto::_Claim_default_instance_);
}
inline ::opentxs::proto::Claim* VerificationOffer::release_claim() {
  // @@protoc_insertion_point(field_release:opentxs.proto.VerificationOffer.claim)
  clear_has_claim();
  ::opentxs::proto::Claim* temp = claim_;
  claim_ = NULL;
  return temp;
}
inline ::opentxs::proto::Claim* VerificationOffer::mutable_claim() {
  set_has_claim();
  if (claim_ == NULL) {
    claim_ = new ::opentxs::proto::Claim;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.proto.VerificationOffer.claim)
  return claim_;
}
inline void VerificationOffer::set_allocated_claim(::opentxs::proto::Claim* claim) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(claim_);
  }
  if (claim) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      claim = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, claim, submessage_arena);
    }
    set_has_claim();
  } else {
    clear_has_claim();
  }
  claim_ = claim;
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.VerificationOffer.claim)
}

// optional .opentxs.proto.Verification verification = 5;
inline bool VerificationOffer::has_verification() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VerificationOffer::set_has_verification() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VerificationOffer::clear_has_verification() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::opentxs::proto::Verification& VerificationOffer::verification() const {
  const ::opentxs::proto::Verification* p = verification_;
  // @@protoc_insertion_point(field_get:opentxs.proto.VerificationOffer.verification)
  return p != NULL ? *p : *reinterpret_cast<const ::opentxs::proto::Verification*>(
      &::opentxs::proto::_Verification_default_instance_);
}
inline ::opentxs::proto::Verification* VerificationOffer::release_verification() {
  // @@protoc_insertion_point(field_release:opentxs.proto.VerificationOffer.verification)
  clear_has_verification();
  ::opentxs::proto::Verification* temp = verification_;
  verification_ = NULL;
  return temp;
}
inline ::opentxs::proto::Verification* VerificationOffer::mutable_verification() {
  set_has_verification();
  if (verification_ == NULL) {
    verification_ = new ::opentxs::proto::Verification;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.proto.VerificationOffer.verification)
  return verification_;
}
inline void VerificationOffer::set_allocated_verification(::opentxs::proto::Verification* verification) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(verification_);
  }
  if (verification) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      verification = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, verification, submessage_arena);
    }
    set_has_verification();
  } else {
    clear_has_verification();
  }
  verification_ = verification;
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.VerificationOffer.verification)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace opentxs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_VerificationOffer_2eproto__INCLUDED
