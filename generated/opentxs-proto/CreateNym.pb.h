// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CreateNym.proto

#ifndef PROTOBUF_CreateNym_2eproto__INCLUDED
#define PROTOBUF_CreateNym_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "AddClaim.pb.h"  // IWYU pragma: export
#include "ContactEnums.pb.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace protobuf_CreateNym_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsCreateNymImpl();
void InitDefaultsCreateNym();
inline void InitDefaults() {
  InitDefaultsCreateNym();
}
}  // namespace protobuf_CreateNym_2eproto
namespace opentxs {
namespace proto {
class CreateNym;
class CreateNymDefaultTypeInternal;
extern CreateNymDefaultTypeInternal _CreateNym_default_instance_;
}  // namespace proto
}  // namespace opentxs
namespace opentxs {
namespace proto {

// ===================================================================

class CreateNym : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:opentxs.proto.CreateNym) */ {
 public:
  CreateNym();
  virtual ~CreateNym();

  CreateNym(const CreateNym& from);

  inline CreateNym& operator=(const CreateNym& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateNym(CreateNym&& from) noexcept
    : CreateNym() {
    *this = ::std::move(from);
  }

  inline CreateNym& operator=(CreateNym&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CreateNym& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateNym* internal_default_instance() {
    return reinterpret_cast<const CreateNym*>(
               &_CreateNym_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CreateNym* other);
  friend void swap(CreateNym& a, CreateNym& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateNym* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateNym* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const CreateNym& from);
  void MergeFrom(const CreateNym& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CreateNym* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .opentxs.proto.AddClaim claims = 6;
  int claims_size() const;
  void clear_claims();
  static const int kClaimsFieldNumber = 6;
  const ::opentxs::proto::AddClaim& claims(int index) const;
  ::opentxs::proto::AddClaim* mutable_claims(int index);
  ::opentxs::proto::AddClaim* add_claims();
  ::google::protobuf::RepeatedPtrField< ::opentxs::proto::AddClaim >*
      mutable_claims();
  const ::google::protobuf::RepeatedPtrField< ::opentxs::proto::AddClaim >&
      claims() const;

  // optional string name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string seedid = 4;
  bool has_seedid() const;
  void clear_seedid();
  static const int kSeedidFieldNumber = 4;
  const ::std::string& seedid() const;
  void set_seedid(const ::std::string& value);
  #if LANG_CXX11
  void set_seedid(::std::string&& value);
  #endif
  void set_seedid(const char* value);
  void set_seedid(const char* value, size_t size);
  ::std::string* mutable_seedid();
  ::std::string* release_seedid();
  void set_allocated_seedid(::std::string* seedid);

  // optional uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // optional .opentxs.proto.ContactItemType type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::opentxs::proto::ContactItemType type() const;
  void set_type(::opentxs::proto::ContactItemType value);

  // optional int32 index = 5;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 5;
  ::google::protobuf::int32 index() const;
  void set_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:opentxs.proto.CreateNym)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_type();
  void clear_has_type();
  void set_has_name();
  void clear_has_name();
  void set_has_seedid();
  void clear_has_seedid();
  void set_has_index();
  void clear_has_index();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::opentxs::proto::AddClaim > claims_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr seedid_;
  ::google::protobuf::uint32 version_;
  int type_;
  ::google::protobuf::int32 index_;
  friend struct ::protobuf_CreateNym_2eproto::TableStruct;
  friend void ::protobuf_CreateNym_2eproto::InitDefaultsCreateNymImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateNym

// optional uint32 version = 1;
inline bool CreateNym::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreateNym::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CreateNym::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CreateNym::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 CreateNym::version() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.CreateNym.version)
  return version_;
}
inline void CreateNym::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.CreateNym.version)
}

// optional .opentxs.proto.ContactItemType type = 2;
inline bool CreateNym::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CreateNym::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CreateNym::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CreateNym::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::opentxs::proto::ContactItemType CreateNym::type() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.CreateNym.type)
  return static_cast< ::opentxs::proto::ContactItemType >(type_);
}
inline void CreateNym::set_type(::opentxs::proto::ContactItemType value) {
  assert(::opentxs::proto::ContactItemType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.CreateNym.type)
}

// optional string name = 3;
inline bool CreateNym::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateNym::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateNym::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateNym::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& CreateNym::name() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.CreateNym.name)
  return name_.GetNoArena();
}
inline void CreateNym::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.CreateNym.name)
}
#if LANG_CXX11
inline void CreateNym::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.CreateNym.name)
}
#endif
inline void CreateNym::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.CreateNym.name)
}
inline void CreateNym::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.CreateNym.name)
}
inline ::std::string* CreateNym::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.CreateNym.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateNym::release_name() {
  // @@protoc_insertion_point(field_release:opentxs.proto.CreateNym.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateNym::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.CreateNym.name)
}

// optional string seedid = 4;
inline bool CreateNym::has_seedid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateNym::set_has_seedid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateNym::clear_has_seedid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateNym::clear_seedid() {
  seedid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_seedid();
}
inline const ::std::string& CreateNym::seedid() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.CreateNym.seedid)
  return seedid_.GetNoArena();
}
inline void CreateNym::set_seedid(const ::std::string& value) {
  set_has_seedid();
  seedid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.CreateNym.seedid)
}
#if LANG_CXX11
inline void CreateNym::set_seedid(::std::string&& value) {
  set_has_seedid();
  seedid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.CreateNym.seedid)
}
#endif
inline void CreateNym::set_seedid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_seedid();
  seedid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.CreateNym.seedid)
}
inline void CreateNym::set_seedid(const char* value, size_t size) {
  set_has_seedid();
  seedid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.CreateNym.seedid)
}
inline ::std::string* CreateNym::mutable_seedid() {
  set_has_seedid();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.CreateNym.seedid)
  return seedid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateNym::release_seedid() {
  // @@protoc_insertion_point(field_release:opentxs.proto.CreateNym.seedid)
  clear_has_seedid();
  return seedid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateNym::set_allocated_seedid(::std::string* seedid) {
  if (seedid != NULL) {
    set_has_seedid();
  } else {
    clear_has_seedid();
  }
  seedid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), seedid);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.CreateNym.seedid)
}

// optional int32 index = 5;
inline bool CreateNym::has_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CreateNym::set_has_index() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CreateNym::clear_has_index() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CreateNym::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 CreateNym::index() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.CreateNym.index)
  return index_;
}
inline void CreateNym::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.CreateNym.index)
}

// repeated .opentxs.proto.AddClaim claims = 6;
inline int CreateNym::claims_size() const {
  return claims_.size();
}
inline const ::opentxs::proto::AddClaim& CreateNym::claims(int index) const {
  // @@protoc_insertion_point(field_get:opentxs.proto.CreateNym.claims)
  return claims_.Get(index);
}
inline ::opentxs::proto::AddClaim* CreateNym::mutable_claims(int index) {
  // @@protoc_insertion_point(field_mutable:opentxs.proto.CreateNym.claims)
  return claims_.Mutable(index);
}
inline ::opentxs::proto::AddClaim* CreateNym::add_claims() {
  // @@protoc_insertion_point(field_add:opentxs.proto.CreateNym.claims)
  return claims_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::opentxs::proto::AddClaim >*
CreateNym::mutable_claims() {
  // @@protoc_insertion_point(field_mutable_list:opentxs.proto.CreateNym.claims)
  return &claims_;
}
inline const ::google::protobuf::RepeatedPtrField< ::opentxs::proto::AddClaim >&
CreateNym::claims() const {
  // @@protoc_insertion_point(field_list:opentxs.proto.CreateNym.claims)
  return claims_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace opentxs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CreateNym_2eproto__INCLUDED
