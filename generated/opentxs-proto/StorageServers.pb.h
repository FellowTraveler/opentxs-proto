// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StorageServers.proto

#ifndef PROTOBUF_StorageServers_2eproto__INCLUDED
#define PROTOBUF_StorageServers_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "StorageItemHash.pb.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace protobuf_StorageServers_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsStorageServersImpl();
void InitDefaultsStorageServers();
inline void InitDefaults() {
  InitDefaultsStorageServers();
}
}  // namespace protobuf_StorageServers_2eproto
namespace opentxs {
namespace proto {
class StorageServers;
class StorageServersDefaultTypeInternal;
extern StorageServersDefaultTypeInternal _StorageServers_default_instance_;
}  // namespace proto
}  // namespace opentxs
namespace opentxs {
namespace proto {

// ===================================================================

class StorageServers : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:opentxs.proto.StorageServers) */ {
 public:
  StorageServers();
  virtual ~StorageServers();

  StorageServers(const StorageServers& from);

  inline StorageServers& operator=(const StorageServers& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StorageServers(StorageServers&& from) noexcept
    : StorageServers() {
    *this = ::std::move(from);
  }

  inline StorageServers& operator=(StorageServers&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const StorageServers& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StorageServers* internal_default_instance() {
    return reinterpret_cast<const StorageServers*>(
               &_StorageServers_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(StorageServers* other);
  friend void swap(StorageServers& a, StorageServers& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StorageServers* New() const PROTOBUF_FINAL { return New(NULL); }

  StorageServers* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const StorageServers& from);
  void MergeFrom(const StorageServers& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StorageServers* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .opentxs.proto.StorageItemHash server = 2;
  int server_size() const;
  void clear_server();
  static const int kServerFieldNumber = 2;
  const ::opentxs::proto::StorageItemHash& server(int index) const;
  ::opentxs::proto::StorageItemHash* mutable_server(int index);
  ::opentxs::proto::StorageItemHash* add_server();
  ::google::protobuf::RepeatedPtrField< ::opentxs::proto::StorageItemHash >*
      mutable_server();
  const ::google::protobuf::RepeatedPtrField< ::opentxs::proto::StorageItemHash >&
      server() const;

  // optional uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:opentxs.proto.StorageServers)
 private:
  void set_has_version();
  void clear_has_version();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::opentxs::proto::StorageItemHash > server_;
  ::google::protobuf::uint32 version_;
  friend struct ::protobuf_StorageServers_2eproto::TableStruct;
  friend void ::protobuf_StorageServers_2eproto::InitDefaultsStorageServersImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StorageServers

// optional uint32 version = 1;
inline bool StorageServers::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StorageServers::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StorageServers::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StorageServers::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 StorageServers::version() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.StorageServers.version)
  return version_;
}
inline void StorageServers::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.StorageServers.version)
}

// repeated .opentxs.proto.StorageItemHash server = 2;
inline int StorageServers::server_size() const {
  return server_.size();
}
inline const ::opentxs::proto::StorageItemHash& StorageServers::server(int index) const {
  // @@protoc_insertion_point(field_get:opentxs.proto.StorageServers.server)
  return server_.Get(index);
}
inline ::opentxs::proto::StorageItemHash* StorageServers::mutable_server(int index) {
  // @@protoc_insertion_point(field_mutable:opentxs.proto.StorageServers.server)
  return server_.Mutable(index);
}
inline ::opentxs::proto::StorageItemHash* StorageServers::add_server() {
  // @@protoc_insertion_point(field_add:opentxs.proto.StorageServers.server)
  return server_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::opentxs::proto::StorageItemHash >*
StorageServers::mutable_server() {
  // @@protoc_insertion_point(field_mutable_list:opentxs.proto.StorageServers.server)
  return &server_;
}
inline const ::google::protobuf::RepeatedPtrField< ::opentxs::proto::StorageItemHash >&
StorageServers::server() const {
  // @@protoc_insertion_point(field_list:opentxs.proto.StorageServers.server)
  return server_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace opentxs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_StorageServers_2eproto__INCLUDED
