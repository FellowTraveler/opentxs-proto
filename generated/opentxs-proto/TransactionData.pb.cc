// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TransactionData.proto

#include "TransactionData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace opentxs {
namespace proto {
class TransactionDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TransactionData>
      _instance;
} _TransactionData_default_instance_;
}  // namespace proto
}  // namespace opentxs
namespace protobuf_TransactionData_2eproto {
void InitDefaultsTransactionDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::opentxs::proto::_TransactionData_default_instance_;
    new (ptr) ::opentxs::proto::TransactionData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opentxs::proto::TransactionData::InitAsDefaultInstance();
}

void InitDefaultsTransactionData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTransactionDataImpl);
}

}  // namespace protobuf_TransactionData_2eproto
namespace opentxs {
namespace proto {

// ===================================================================

void TransactionData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionData::kVersionFieldNumber;
const int TransactionData::kUuidFieldNumber;
const int TransactionData::kTypeFieldNumber;
const int TransactionData::kSourceaccountsFieldNumber;
const int TransactionData::kDestinationaccountsFieldNumber;
const int TransactionData::kAmountFieldNumber;
const int TransactionData::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionData::TransactionData()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_TransactionData_2eproto::InitDefaultsTransactionData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:opentxs.proto.TransactionData)
}
TransactionData::TransactionData(const TransactionData& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      sourceaccounts_(from.sourceaccounts_),
      destinationaccounts_(from.destinationaccounts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_uuid()) {
    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&version_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:opentxs.proto.TransactionData)
}

void TransactionData::SharedCtor() {
  _cached_size_ = 0;
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&version_)) + sizeof(state_));
}

TransactionData::~TransactionData() {
  // @@protoc_insertion_point(destructor:opentxs.proto.TransactionData)
  SharedDtor();
}

void TransactionData::SharedDtor() {
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TransactionData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TransactionData& TransactionData::default_instance() {
  ::protobuf_TransactionData_2eproto::InitDefaultsTransactionData();
  return *internal_default_instance();
}

TransactionData* TransactionData::New(::google::protobuf::Arena* arena) const {
  TransactionData* n = new TransactionData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionData::Clear() {
// @@protoc_insertion_point(message_clear_start:opentxs.proto.TransactionData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sourceaccounts_.Clear();
  destinationaccounts_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!uuid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*uuid_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 30u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&version_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransactionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:opentxs.proto.TransactionData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string uuid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.PaymentWorkflowType type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::opentxs::proto::PaymentWorkflowType_IsValid(value)) {
            set_type(static_cast< ::opentxs::proto::PaymentWorkflowType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string sourceaccounts = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_sourceaccounts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string destinationaccounts = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_destinationaccounts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 amount = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_amount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.PaymentWorkflowState state = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::opentxs::proto::PaymentWorkflowState_IsValid(value)) {
            set_state(static_cast< ::opentxs::proto::PaymentWorkflowState >(value));
          } else {
            unknown_fields_stream.WriteVarint32(56u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opentxs.proto.TransactionData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opentxs.proto.TransactionData)
  return false;
#undef DO_
}

void TransactionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opentxs.proto.TransactionData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional string uuid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uuid(), output);
  }

  // optional .opentxs.proto.PaymentWorkflowType type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // repeated string sourceaccounts = 4;
  for (int i = 0, n = this->sourceaccounts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->sourceaccounts(i), output);
  }

  // repeated string destinationaccounts = 5;
  for (int i = 0, n = this->destinationaccounts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->destinationaccounts(i), output);
  }

  // optional int64 amount = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->amount(), output);
  }

  // optional .opentxs.proto.PaymentWorkflowState state = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->state(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:opentxs.proto.TransactionData)
}

size_t TransactionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentxs.proto.TransactionData)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated string sourceaccounts = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->sourceaccounts_size());
  for (int i = 0, n = this->sourceaccounts_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->sourceaccounts(i));
  }

  // repeated string destinationaccounts = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->destinationaccounts_size());
  for (int i = 0, n = this->destinationaccounts_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->destinationaccounts(i));
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional string uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional .opentxs.proto.PaymentWorkflowType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int64 amount = 6;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->amount());
    }

    // optional .opentxs.proto.PaymentWorkflowState state = 7;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TransactionData*>(&from));
}

void TransactionData::MergeFrom(const TransactionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentxs.proto.TransactionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sourceaccounts_.MergeFrom(from.sourceaccounts_);
  destinationaccounts_.MergeFrom(from.destinationaccounts_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_uuid();
      uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      amount_ = from.amount_;
    }
    if (cached_has_bits & 0x00000010u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TransactionData::CopyFrom(const TransactionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentxs.proto.TransactionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionData::IsInitialized() const {
  return true;
}

void TransactionData::Swap(TransactionData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionData::InternalSwap(TransactionData* other) {
  using std::swap;
  sourceaccounts_.InternalSwap(&other->sourceaccounts_);
  destinationaccounts_.InternalSwap(&other->destinationaccounts_);
  uuid_.Swap(&other->uuid_);
  swap(version_, other->version_);
  swap(type_, other->type_);
  swap(amount_, other->amount_);
  swap(state_, other->state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string TransactionData::GetTypeName() const {
  return "opentxs.proto.TransactionData";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace opentxs

// @@protoc_insertion_point(global_scope)
