// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CredentialIndex.proto

#ifndef PROTOBUF_CredentialIndex_2eproto__INCLUDED
#define PROTOBUF_CredentialIndex_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "Enums.pb.h"  // IWYU pragma: export
#include "NymIDSource.pb.h"  // IWYU pragma: export
#include "CredentialSet.pb.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace protobuf_CredentialIndex_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsCredentialIndexImpl();
void InitDefaultsCredentialIndex();
inline void InitDefaults() {
  InitDefaultsCredentialIndex();
}
}  // namespace protobuf_CredentialIndex_2eproto
namespace opentxs {
namespace proto {
class CredentialIndex;
class CredentialIndexDefaultTypeInternal;
extern CredentialIndexDefaultTypeInternal _CredentialIndex_default_instance_;
}  // namespace proto
}  // namespace opentxs
namespace opentxs {
namespace proto {

// ===================================================================

class CredentialIndex : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:opentxs.proto.CredentialIndex) */ {
 public:
  CredentialIndex();
  virtual ~CredentialIndex();

  CredentialIndex(const CredentialIndex& from);

  inline CredentialIndex& operator=(const CredentialIndex& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CredentialIndex(CredentialIndex&& from) noexcept
    : CredentialIndex() {
    *this = ::std::move(from);
  }

  inline CredentialIndex& operator=(CredentialIndex&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CredentialIndex& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CredentialIndex* internal_default_instance() {
    return reinterpret_cast<const CredentialIndex*>(
               &_CredentialIndex_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CredentialIndex* other);
  friend void swap(CredentialIndex& a, CredentialIndex& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CredentialIndex* New() const PROTOBUF_FINAL { return New(NULL); }

  CredentialIndex* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const CredentialIndex& from);
  void MergeFrom(const CredentialIndex& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CredentialIndex* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .opentxs.proto.CredentialSet activeCredentials = 7;
  int activecredentials_size() const;
  void clear_activecredentials();
  static const int kActiveCredentialsFieldNumber = 7;
  const ::opentxs::proto::CredentialSet& activecredentials(int index) const;
  ::opentxs::proto::CredentialSet* mutable_activecredentials(int index);
  ::opentxs::proto::CredentialSet* add_activecredentials();
  ::google::protobuf::RepeatedPtrField< ::opentxs::proto::CredentialSet >*
      mutable_activecredentials();
  const ::google::protobuf::RepeatedPtrField< ::opentxs::proto::CredentialSet >&
      activecredentials() const;

  // repeated .opentxs.proto.CredentialSet revokedCredentials = 8;
  int revokedcredentials_size() const;
  void clear_revokedcredentials();
  static const int kRevokedCredentialsFieldNumber = 8;
  const ::opentxs::proto::CredentialSet& revokedcredentials(int index) const;
  ::opentxs::proto::CredentialSet* mutable_revokedcredentials(int index);
  ::opentxs::proto::CredentialSet* add_revokedcredentials();
  ::google::protobuf::RepeatedPtrField< ::opentxs::proto::CredentialSet >*
      mutable_revokedcredentials();
  const ::google::protobuf::RepeatedPtrField< ::opentxs::proto::CredentialSet >&
      revokedcredentials() const;

  // optional string nymID = 2;
  bool has_nymid() const;
  void clear_nymid();
  static const int kNymIDFieldNumber = 2;
  const ::std::string& nymid() const;
  void set_nymid(const ::std::string& value);
  #if LANG_CXX11
  void set_nymid(::std::string&& value);
  #endif
  void set_nymid(const char* value);
  void set_nymid(const char* value, size_t size);
  ::std::string* mutable_nymid();
  ::std::string* release_nymid();
  void set_allocated_nymid(::std::string* nymid);

  // optional .opentxs.proto.NymIDSource source = 6;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 6;
  const ::opentxs::proto::NymIDSource& source() const;
  ::opentxs::proto::NymIDSource* release_source();
  ::opentxs::proto::NymIDSource* mutable_source();
  void set_allocated_source(::opentxs::proto::NymIDSource* source);

  // optional uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // optional .opentxs.proto.CredentialIndexMode mode = 3;
  bool has_mode() const;
  void clear_mode();
  static const int kModeFieldNumber = 3;
  ::opentxs::proto::CredentialIndexMode mode() const;
  void set_mode(::opentxs::proto::CredentialIndexMode value);

  // optional uint64 revision = 5;
  bool has_revision() const;
  void clear_revision();
  static const int kRevisionFieldNumber = 5;
  ::google::protobuf::uint64 revision() const;
  void set_revision(::google::protobuf::uint64 value);

  // optional uint32 index = 4;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 4;
  ::google::protobuf::uint32 index() const;
  void set_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:opentxs.proto.CredentialIndex)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_nymid();
  void clear_has_nymid();
  void set_has_mode();
  void clear_has_mode();
  void set_has_index();
  void clear_has_index();
  void set_has_revision();
  void clear_has_revision();
  void set_has_source();
  void clear_has_source();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::opentxs::proto::CredentialSet > activecredentials_;
  ::google::protobuf::RepeatedPtrField< ::opentxs::proto::CredentialSet > revokedcredentials_;
  ::google::protobuf::internal::ArenaStringPtr nymid_;
  ::opentxs::proto::NymIDSource* source_;
  ::google::protobuf::uint32 version_;
  int mode_;
  ::google::protobuf::uint64 revision_;
  ::google::protobuf::uint32 index_;
  friend struct ::protobuf_CredentialIndex_2eproto::TableStruct;
  friend void ::protobuf_CredentialIndex_2eproto::InitDefaultsCredentialIndexImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CredentialIndex

// optional uint32 version = 1;
inline bool CredentialIndex::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CredentialIndex::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CredentialIndex::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CredentialIndex::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 CredentialIndex::version() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.CredentialIndex.version)
  return version_;
}
inline void CredentialIndex::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.CredentialIndex.version)
}

// optional string nymID = 2;
inline bool CredentialIndex::has_nymid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CredentialIndex::set_has_nymid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CredentialIndex::clear_has_nymid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CredentialIndex::clear_nymid() {
  nymid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nymid();
}
inline const ::std::string& CredentialIndex::nymid() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.CredentialIndex.nymID)
  return nymid_.GetNoArena();
}
inline void CredentialIndex::set_nymid(const ::std::string& value) {
  set_has_nymid();
  nymid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.CredentialIndex.nymID)
}
#if LANG_CXX11
inline void CredentialIndex::set_nymid(::std::string&& value) {
  set_has_nymid();
  nymid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.CredentialIndex.nymID)
}
#endif
inline void CredentialIndex::set_nymid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nymid();
  nymid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.CredentialIndex.nymID)
}
inline void CredentialIndex::set_nymid(const char* value, size_t size) {
  set_has_nymid();
  nymid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.CredentialIndex.nymID)
}
inline ::std::string* CredentialIndex::mutable_nymid() {
  set_has_nymid();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.CredentialIndex.nymID)
  return nymid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CredentialIndex::release_nymid() {
  // @@protoc_insertion_point(field_release:opentxs.proto.CredentialIndex.nymID)
  clear_has_nymid();
  return nymid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CredentialIndex::set_allocated_nymid(::std::string* nymid) {
  if (nymid != NULL) {
    set_has_nymid();
  } else {
    clear_has_nymid();
  }
  nymid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nymid);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.CredentialIndex.nymID)
}

// optional .opentxs.proto.CredentialIndexMode mode = 3;
inline bool CredentialIndex::has_mode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CredentialIndex::set_has_mode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CredentialIndex::clear_has_mode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CredentialIndex::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
inline ::opentxs::proto::CredentialIndexMode CredentialIndex::mode() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.CredentialIndex.mode)
  return static_cast< ::opentxs::proto::CredentialIndexMode >(mode_);
}
inline void CredentialIndex::set_mode(::opentxs::proto::CredentialIndexMode value) {
  assert(::opentxs::proto::CredentialIndexMode_IsValid(value));
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.CredentialIndex.mode)
}

// optional uint32 index = 4;
inline bool CredentialIndex::has_index() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CredentialIndex::set_has_index() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CredentialIndex::clear_has_index() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CredentialIndex::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 CredentialIndex::index() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.CredentialIndex.index)
  return index_;
}
inline void CredentialIndex::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.CredentialIndex.index)
}

// optional uint64 revision = 5;
inline bool CredentialIndex::has_revision() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CredentialIndex::set_has_revision() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CredentialIndex::clear_has_revision() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CredentialIndex::clear_revision() {
  revision_ = GOOGLE_ULONGLONG(0);
  clear_has_revision();
}
inline ::google::protobuf::uint64 CredentialIndex::revision() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.CredentialIndex.revision)
  return revision_;
}
inline void CredentialIndex::set_revision(::google::protobuf::uint64 value) {
  set_has_revision();
  revision_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.CredentialIndex.revision)
}

// optional .opentxs.proto.NymIDSource source = 6;
inline bool CredentialIndex::has_source() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CredentialIndex::set_has_source() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CredentialIndex::clear_has_source() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::opentxs::proto::NymIDSource& CredentialIndex::source() const {
  const ::opentxs::proto::NymIDSource* p = source_;
  // @@protoc_insertion_point(field_get:opentxs.proto.CredentialIndex.source)
  return p != NULL ? *p : *reinterpret_cast<const ::opentxs::proto::NymIDSource*>(
      &::opentxs::proto::_NymIDSource_default_instance_);
}
inline ::opentxs::proto::NymIDSource* CredentialIndex::release_source() {
  // @@protoc_insertion_point(field_release:opentxs.proto.CredentialIndex.source)
  clear_has_source();
  ::opentxs::proto::NymIDSource* temp = source_;
  source_ = NULL;
  return temp;
}
inline ::opentxs::proto::NymIDSource* CredentialIndex::mutable_source() {
  set_has_source();
  if (source_ == NULL) {
    source_ = new ::opentxs::proto::NymIDSource;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.proto.CredentialIndex.source)
  return source_;
}
inline void CredentialIndex::set_allocated_source(::opentxs::proto::NymIDSource* source) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(source_);
  }
  if (source) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      source = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    set_has_source();
  } else {
    clear_has_source();
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.CredentialIndex.source)
}

// repeated .opentxs.proto.CredentialSet activeCredentials = 7;
inline int CredentialIndex::activecredentials_size() const {
  return activecredentials_.size();
}
inline const ::opentxs::proto::CredentialSet& CredentialIndex::activecredentials(int index) const {
  // @@protoc_insertion_point(field_get:opentxs.proto.CredentialIndex.activeCredentials)
  return activecredentials_.Get(index);
}
inline ::opentxs::proto::CredentialSet* CredentialIndex::mutable_activecredentials(int index) {
  // @@protoc_insertion_point(field_mutable:opentxs.proto.CredentialIndex.activeCredentials)
  return activecredentials_.Mutable(index);
}
inline ::opentxs::proto::CredentialSet* CredentialIndex::add_activecredentials() {
  // @@protoc_insertion_point(field_add:opentxs.proto.CredentialIndex.activeCredentials)
  return activecredentials_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::opentxs::proto::CredentialSet >*
CredentialIndex::mutable_activecredentials() {
  // @@protoc_insertion_point(field_mutable_list:opentxs.proto.CredentialIndex.activeCredentials)
  return &activecredentials_;
}
inline const ::google::protobuf::RepeatedPtrField< ::opentxs::proto::CredentialSet >&
CredentialIndex::activecredentials() const {
  // @@protoc_insertion_point(field_list:opentxs.proto.CredentialIndex.activeCredentials)
  return activecredentials_;
}

// repeated .opentxs.proto.CredentialSet revokedCredentials = 8;
inline int CredentialIndex::revokedcredentials_size() const {
  return revokedcredentials_.size();
}
inline const ::opentxs::proto::CredentialSet& CredentialIndex::revokedcredentials(int index) const {
  // @@protoc_insertion_point(field_get:opentxs.proto.CredentialIndex.revokedCredentials)
  return revokedcredentials_.Get(index);
}
inline ::opentxs::proto::CredentialSet* CredentialIndex::mutable_revokedcredentials(int index) {
  // @@protoc_insertion_point(field_mutable:opentxs.proto.CredentialIndex.revokedCredentials)
  return revokedcredentials_.Mutable(index);
}
inline ::opentxs::proto::CredentialSet* CredentialIndex::add_revokedcredentials() {
  // @@protoc_insertion_point(field_add:opentxs.proto.CredentialIndex.revokedCredentials)
  return revokedcredentials_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::opentxs::proto::CredentialSet >*
CredentialIndex::mutable_revokedcredentials() {
  // @@protoc_insertion_point(field_mutable_list:opentxs.proto.CredentialIndex.revokedCredentials)
  return &revokedcredentials_;
}
inline const ::google::protobuf::RepeatedPtrField< ::opentxs::proto::CredentialSet >&
CredentialIndex::revokedcredentials() const {
  // @@protoc_insertion_point(field_list:opentxs.proto.CredentialIndex.revokedCredentials)
  return revokedcredentials_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace opentxs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CredentialIndex_2eproto__INCLUDED
