// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerRequest.proto

#include "ServerRequest.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace opentxs {
namespace proto {
class ServerRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServerRequest>
      _instance;
} _ServerRequest_default_instance_;
}  // namespace proto
}  // namespace opentxs
namespace protobuf_ServerRequest_2eproto {
void InitDefaultsServerRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_CredentialIndex_2eproto::InitDefaultsCredentialIndex();
  protobuf_Signature_2eproto::InitDefaultsSignature();
  {
    void* ptr = &::opentxs::proto::_ServerRequest_default_instance_;
    new (ptr) ::opentxs::proto::ServerRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opentxs::proto::ServerRequest::InitAsDefaultInstance();
}

void InitDefaultsServerRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsServerRequestImpl);
}

}  // namespace protobuf_ServerRequest_2eproto
namespace opentxs {
namespace proto {

// ===================================================================

void ServerRequest::InitAsDefaultInstance() {
  ::opentxs::proto::_ServerRequest_default_instance_._instance.get_mutable()->credentials_ = const_cast< ::opentxs::proto::CredentialIndex*>(
      ::opentxs::proto::CredentialIndex::internal_default_instance());
  ::opentxs::proto::_ServerRequest_default_instance_._instance.get_mutable()->signature_ = const_cast< ::opentxs::proto::Signature*>(
      ::opentxs::proto::Signature::internal_default_instance());
}
void ServerRequest::clear_credentials() {
  if (credentials_ != NULL) credentials_->Clear();
  clear_has_credentials();
}
void ServerRequest::clear_signature() {
  if (signature_ != NULL) signature_->Clear();
  clear_has_signature();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerRequest::kVersionFieldNumber;
const int ServerRequest::kIdFieldNumber;
const int ServerRequest::kTypeFieldNumber;
const int ServerRequest::kNymFieldNumber;
const int ServerRequest::kServerFieldNumber;
const int ServerRequest::kRequestFieldNumber;
const int ServerRequest::kCredentialsFieldNumber;
const int ServerRequest::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerRequest::ServerRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ServerRequest_2eproto::InitDefaultsServerRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:opentxs.proto.ServerRequest)
}
ServerRequest::ServerRequest(const ServerRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  nym_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nym()) {
    nym_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nym_);
  }
  server_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_server()) {
    server_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_);
  }
  if (from.has_credentials()) {
    credentials_ = new ::opentxs::proto::CredentialIndex(*from.credentials_);
  } else {
    credentials_ = NULL;
  }
  if (from.has_signature()) {
    signature_ = new ::opentxs::proto::Signature(*from.signature_);
  } else {
    signature_ = NULL;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&request_) -
    reinterpret_cast<char*>(&version_)) + sizeof(request_));
  // @@protoc_insertion_point(copy_constructor:opentxs.proto.ServerRequest)
}

void ServerRequest::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nym_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&credentials_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&request_) -
      reinterpret_cast<char*>(&credentials_)) + sizeof(request_));
}

ServerRequest::~ServerRequest() {
  // @@protoc_insertion_point(destructor:opentxs.proto.ServerRequest)
  SharedDtor();
}

void ServerRequest::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nym_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete credentials_;
  if (this != internal_default_instance()) delete signature_;
}

void ServerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServerRequest& ServerRequest::default_instance() {
  ::protobuf_ServerRequest_2eproto::InitDefaultsServerRequest();
  return *internal_default_instance();
}

ServerRequest* ServerRequest::New(::google::protobuf::Arena* arena) const {
  ServerRequest* n = new ServerRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opentxs.proto.ServerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!nym_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*nym_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!server_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*server_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(credentials_ != NULL);
      credentials_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(signature_ != NULL);
      signature_->Clear();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&request_) -
        reinterpret_cast<char*>(&version_)) + sizeof(request_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ServerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:opentxs.proto.ServerRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.ServerRequestType type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::opentxs::proto::ServerRequestType_IsValid(value)) {
            set_type(static_cast< ::opentxs::proto::ServerRequestType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string nym = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nym()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string server = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 request = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_request();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.CredentialIndex credentials = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_credentials()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.Signature signature = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opentxs.proto.ServerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opentxs.proto.ServerRequest)
  return false;
#undef DO_
}

void ServerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opentxs.proto.ServerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional string id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // optional .opentxs.proto.ServerRequestType type = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional string nym = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->nym(), output);
  }

  // optional string server = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->server(), output);
  }

  // optional uint64 request = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->request(), output);
  }

  // optional .opentxs.proto.CredentialIndex credentials = 14;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, *this->credentials_, output);
  }

  // optional .opentxs.proto.Signature signature = 15;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, *this->signature_, output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:opentxs.proto.ServerRequest)
}

size_t ServerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentxs.proto.ServerRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional string id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string nym = 4;
    if (has_nym()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nym());
    }

    // optional string server = 5;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server());
    }

    // optional .opentxs.proto.CredentialIndex credentials = 14;
    if (has_credentials()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->credentials_);
    }

    // optional .opentxs.proto.Signature signature = 15;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->signature_);
    }

    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional .opentxs.proto.ServerRequestType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 request = 6;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->request());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ServerRequest*>(&from));
}

void ServerRequest::MergeFrom(const ServerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentxs.proto.ServerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_nym();
      nym_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nym_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_server();
      server_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_credentials()->::opentxs::proto::CredentialIndex::MergeFrom(from.credentials());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_signature()->::opentxs::proto::Signature::MergeFrom(from.signature());
    }
    if (cached_has_bits & 0x00000020u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000040u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000080u) {
      request_ = from.request_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ServerRequest::CopyFrom(const ServerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentxs.proto.ServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerRequest::IsInitialized() const {
  return true;
}

void ServerRequest::Swap(ServerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerRequest::InternalSwap(ServerRequest* other) {
  using std::swap;
  id_.Swap(&other->id_);
  nym_.Swap(&other->nym_);
  server_.Swap(&other->server_);
  swap(credentials_, other->credentials_);
  swap(signature_, other->signature_);
  swap(version_, other->version_);
  swap(type_, other->type_);
  swap(request_, other->request_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string ServerRequest::GetTypeName() const {
  return "opentxs.proto.ServerRequest";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace opentxs

// @@protoc_insertion_point(global_scope)
