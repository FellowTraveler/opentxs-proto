// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HDAccount.proto

#include "HDAccount.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace opentxs {
namespace proto {
class HDAccountDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HDAccount>
      _instance;
} _HDAccount_default_instance_;
}  // namespace proto
}  // namespace opentxs
namespace protobuf_HDAccount_2eproto {
void InitDefaultsHDAccountImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_HDPath_2eproto::InitDefaultsHDPath();
  protobuf_BlockchainAddress_2eproto::InitDefaultsBlockchainAddress();
  protobuf_BlockchainActivity_2eproto::InitDefaultsBlockchainActivity();
  {
    void* ptr = &::opentxs::proto::_HDAccount_default_instance_;
    new (ptr) ::opentxs::proto::HDAccount();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opentxs::proto::HDAccount::InitAsDefaultInstance();
}

void InitDefaultsHDAccount() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHDAccountImpl);
}

}  // namespace protobuf_HDAccount_2eproto
namespace opentxs {
namespace proto {

// ===================================================================

void HDAccount::InitAsDefaultInstance() {
  ::opentxs::proto::_HDAccount_default_instance_._instance.get_mutable()->path_ = const_cast< ::opentxs::proto::HDPath*>(
      ::opentxs::proto::HDPath::internal_default_instance());
}
void HDAccount::clear_path() {
  if (path_ != NULL) path_->Clear();
  clear_has_path();
}
void HDAccount::clear_internaladdress() {
  internaladdress_.Clear();
}
void HDAccount::clear_externaladdress() {
  externaladdress_.Clear();
}
void HDAccount::clear_incoming() {
  incoming_.Clear();
}
void HDAccount::clear_outgoing() {
  outgoing_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HDAccount::kVersionFieldNumber;
const int HDAccount::kIdFieldNumber;
const int HDAccount::kTypeFieldNumber;
const int HDAccount::kRevisionFieldNumber;
const int HDAccount::kPathFieldNumber;
const int HDAccount::kInternalindexFieldNumber;
const int HDAccount::kExternalindexFieldNumber;
const int HDAccount::kInternaladdressFieldNumber;
const int HDAccount::kExternaladdressFieldNumber;
const int HDAccount::kIncomingFieldNumber;
const int HDAccount::kOutgoingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HDAccount::HDAccount()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_HDAccount_2eproto::InitDefaultsHDAccount();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:opentxs.proto.HDAccount)
}
HDAccount::HDAccount(const HDAccount& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      internaladdress_(from.internaladdress_),
      externaladdress_(from.externaladdress_),
      incoming_(from.incoming_),
      outgoing_(from.outgoing_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_path()) {
    path_ = new ::opentxs::proto::HDPath(*from.path_);
  } else {
    path_ = NULL;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&externalindex_) -
    reinterpret_cast<char*>(&version_)) + sizeof(externalindex_));
  // @@protoc_insertion_point(copy_constructor:opentxs.proto.HDAccount)
}

void HDAccount::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&path_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&externalindex_) -
      reinterpret_cast<char*>(&path_)) + sizeof(externalindex_));
}

HDAccount::~HDAccount() {
  // @@protoc_insertion_point(destructor:opentxs.proto.HDAccount)
  SharedDtor();
}

void HDAccount::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete path_;
}

void HDAccount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const HDAccount& HDAccount::default_instance() {
  ::protobuf_HDAccount_2eproto::InitDefaultsHDAccount();
  return *internal_default_instance();
}

HDAccount* HDAccount::New(::google::protobuf::Arena* arena) const {
  HDAccount* n = new HDAccount;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HDAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:opentxs.proto.HDAccount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  internaladdress_.Clear();
  externaladdress_.Clear();
  incoming_.Clear();
  outgoing_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(path_ != NULL);
      path_->Clear();
    }
  }
  if (cached_has_bits & 124u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&externalindex_) -
        reinterpret_cast<char*>(&version_)) + sizeof(externalindex_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HDAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:opentxs.proto.HDAccount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.ContactItemType type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::opentxs::proto::ContactItemType_IsValid(value)) {
            set_type(static_cast< ::opentxs::proto::ContactItemType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 revision = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_revision();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &revision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.HDPath path = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 internalindex = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_internalindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &internalindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 externalindex = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_externalindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &externalindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .opentxs.proto.BlockchainAddress internaladdress = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_internaladdress()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .opentxs.proto.BlockchainAddress externaladdress = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_externaladdress()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .opentxs.proto.BlockchainActivity incoming = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_incoming()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .opentxs.proto.BlockchainActivity outgoing = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_outgoing()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opentxs.proto.HDAccount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opentxs.proto.HDAccount)
  return false;
#undef DO_
}

void HDAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opentxs.proto.HDAccount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional string id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // optional .opentxs.proto.ContactItemType type = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional uint64 revision = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->revision(), output);
  }

  // optional .opentxs.proto.HDPath path = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->path_, output);
  }

  // optional uint32 internalindex = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->internalindex(), output);
  }

  // optional uint32 externalindex = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->externalindex(), output);
  }

  // repeated .opentxs.proto.BlockchainAddress internaladdress = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->internaladdress_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->internaladdress(static_cast<int>(i)), output);
  }

  // repeated .opentxs.proto.BlockchainAddress externaladdress = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->externaladdress_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->externaladdress(static_cast<int>(i)), output);
  }

  // repeated .opentxs.proto.BlockchainActivity incoming = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->incoming_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->incoming(static_cast<int>(i)), output);
  }

  // repeated .opentxs.proto.BlockchainActivity outgoing = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->outgoing_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->outgoing(static_cast<int>(i)), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:opentxs.proto.HDAccount)
}

size_t HDAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentxs.proto.HDAccount)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated .opentxs.proto.BlockchainAddress internaladdress = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->internaladdress_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->internaladdress(static_cast<int>(i)));
    }
  }

  // repeated .opentxs.proto.BlockchainAddress externaladdress = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->externaladdress_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->externaladdress(static_cast<int>(i)));
    }
  }

  // repeated .opentxs.proto.BlockchainActivity incoming = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->incoming_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->incoming(static_cast<int>(i)));
    }
  }

  // repeated .opentxs.proto.BlockchainActivity outgoing = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->outgoing_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->outgoing(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 127u) {
    // optional string id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional .opentxs.proto.HDPath path = 5;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->path_);
    }

    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional .opentxs.proto.ContactItemType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 revision = 4;
    if (has_revision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->revision());
    }

    // optional uint32 internalindex = 6;
    if (has_internalindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->internalindex());
    }

    // optional uint32 externalindex = 7;
    if (has_externalindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->externalindex());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HDAccount::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const HDAccount*>(&from));
}

void HDAccount::MergeFrom(const HDAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentxs.proto.HDAccount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  internaladdress_.MergeFrom(from.internaladdress_);
  externaladdress_.MergeFrom(from.externaladdress_);
  incoming_.MergeFrom(from.incoming_);
  outgoing_.MergeFrom(from.outgoing_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_path()->::opentxs::proto::HDPath::MergeFrom(from.path());
    }
    if (cached_has_bits & 0x00000004u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      revision_ = from.revision_;
    }
    if (cached_has_bits & 0x00000020u) {
      internalindex_ = from.internalindex_;
    }
    if (cached_has_bits & 0x00000040u) {
      externalindex_ = from.externalindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HDAccount::CopyFrom(const HDAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentxs.proto.HDAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HDAccount::IsInitialized() const {
  return true;
}

void HDAccount::Swap(HDAccount* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HDAccount::InternalSwap(HDAccount* other) {
  using std::swap;
  internaladdress_.InternalSwap(&other->internaladdress_);
  externaladdress_.InternalSwap(&other->externaladdress_);
  incoming_.InternalSwap(&other->incoming_);
  outgoing_.InternalSwap(&other->outgoing_);
  id_.Swap(&other->id_);
  swap(path_, other->path_);
  swap(version_, other->version_);
  swap(type_, other->type_);
  swap(revision_, other->revision_);
  swap(internalindex_, other->internalindex_);
  swap(externalindex_, other->externalindex_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string HDAccount::GetTypeName() const {
  return "opentxs.proto.HDAccount";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace opentxs

// @@protoc_insertion_point(global_scope)
