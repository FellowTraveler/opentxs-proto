// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PeerRequest.proto

#ifndef PROTOBUF_PeerRequest_2eproto__INCLUDED
#define PROTOBUF_PeerRequest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "Bailment.pb.h"  // IWYU pragma: export
#include "ConnectionInfo.pb.h"  // IWYU pragma: export
#include "Faucet.pb.h"  // IWYU pragma: export
#include "OutBailment.pb.h"  // IWYU pragma: export
#include "PeerEnums.pb.h"  // IWYU pragma: export
#include "PendingBailment.pb.h"  // IWYU pragma: export
#include "Signature.pb.h"  // IWYU pragma: export
#include "StoreSecret.pb.h"  // IWYU pragma: export
#include "VerificationOffer.pb.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace protobuf_PeerRequest_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsPeerRequestImpl();
void InitDefaultsPeerRequest();
inline void InitDefaults() {
  InitDefaultsPeerRequest();
}
}  // namespace protobuf_PeerRequest_2eproto
namespace opentxs {
namespace proto {
class PeerRequest;
class PeerRequestDefaultTypeInternal;
extern PeerRequestDefaultTypeInternal _PeerRequest_default_instance_;
}  // namespace proto
}  // namespace opentxs
namespace opentxs {
namespace proto {

// ===================================================================

class PeerRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:opentxs.proto.PeerRequest) */ {
 public:
  PeerRequest();
  virtual ~PeerRequest();

  PeerRequest(const PeerRequest& from);

  inline PeerRequest& operator=(const PeerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PeerRequest(PeerRequest&& from) noexcept
    : PeerRequest() {
    *this = ::std::move(from);
  }

  inline PeerRequest& operator=(PeerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PeerRequest& default_instance();

  enum RequestCase {
    kBailment = 8,
    kOutbailment = 9,
    kPendingbailment = 10,
    kConnectioninfo = 11,
    kStoresecret = 12,
    kVerificationoffer = 14,
    kFaucet = 15,
    REQUEST_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PeerRequest* internal_default_instance() {
    return reinterpret_cast<const PeerRequest*>(
               &_PeerRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(PeerRequest* other);
  friend void swap(PeerRequest& a, PeerRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PeerRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  PeerRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const PeerRequest& from);
  void MergeFrom(const PeerRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PeerRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string initiator = 3;
  bool has_initiator() const;
  void clear_initiator();
  static const int kInitiatorFieldNumber = 3;
  const ::std::string& initiator() const;
  void set_initiator(const ::std::string& value);
  #if LANG_CXX11
  void set_initiator(::std::string&& value);
  #endif
  void set_initiator(const char* value);
  void set_initiator(const char* value, size_t size);
  ::std::string* mutable_initiator();
  ::std::string* release_initiator();
  void set_allocated_initiator(::std::string* initiator);

  // optional string recipient = 4;
  bool has_recipient() const;
  void clear_recipient();
  static const int kRecipientFieldNumber = 4;
  const ::std::string& recipient() const;
  void set_recipient(const ::std::string& value);
  #if LANG_CXX11
  void set_recipient(::std::string&& value);
  #endif
  void set_recipient(const char* value);
  void set_recipient(const char* value, size_t size);
  ::std::string* mutable_recipient();
  ::std::string* release_recipient();
  void set_allocated_recipient(::std::string* recipient);

  // optional string cookie = 6;
  bool has_cookie() const;
  void clear_cookie();
  static const int kCookieFieldNumber = 6;
  const ::std::string& cookie() const;
  void set_cookie(const ::std::string& value);
  #if LANG_CXX11
  void set_cookie(::std::string&& value);
  #endif
  void set_cookie(const char* value);
  void set_cookie(const char* value, size_t size);
  ::std::string* mutable_cookie();
  ::std::string* release_cookie();
  void set_allocated_cookie(::std::string* cookie);

  // optional string server = 13;
  bool has_server() const;
  void clear_server();
  static const int kServerFieldNumber = 13;
  const ::std::string& server() const;
  void set_server(const ::std::string& value);
  #if LANG_CXX11
  void set_server(::std::string&& value);
  #endif
  void set_server(const char* value);
  void set_server(const char* value, size_t size);
  ::std::string* mutable_server();
  ::std::string* release_server();
  void set_allocated_server(::std::string* server);

  // optional .opentxs.proto.Signature signature = 7;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 7;
  const ::opentxs::proto::Signature& signature() const;
  ::opentxs::proto::Signature* release_signature();
  ::opentxs::proto::Signature* mutable_signature();
  void set_allocated_signature(::opentxs::proto::Signature* signature);

  // optional uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // optional .opentxs.proto.PeerRequestType type = 5;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::opentxs::proto::PeerRequestType type() const;
  void set_type(::opentxs::proto::PeerRequestType value);

  // optional .opentxs.proto.Bailment bailment = 8;
  bool has_bailment() const;
  void clear_bailment();
  static const int kBailmentFieldNumber = 8;
  const ::opentxs::proto::Bailment& bailment() const;
  ::opentxs::proto::Bailment* release_bailment();
  ::opentxs::proto::Bailment* mutable_bailment();
  void set_allocated_bailment(::opentxs::proto::Bailment* bailment);

  // optional .opentxs.proto.OutBailment outbailment = 9;
  bool has_outbailment() const;
  void clear_outbailment();
  static const int kOutbailmentFieldNumber = 9;
  const ::opentxs::proto::OutBailment& outbailment() const;
  ::opentxs::proto::OutBailment* release_outbailment();
  ::opentxs::proto::OutBailment* mutable_outbailment();
  void set_allocated_outbailment(::opentxs::proto::OutBailment* outbailment);

  // optional .opentxs.proto.PendingBailment pendingbailment = 10;
  bool has_pendingbailment() const;
  void clear_pendingbailment();
  static const int kPendingbailmentFieldNumber = 10;
  const ::opentxs::proto::PendingBailment& pendingbailment() const;
  ::opentxs::proto::PendingBailment* release_pendingbailment();
  ::opentxs::proto::PendingBailment* mutable_pendingbailment();
  void set_allocated_pendingbailment(::opentxs::proto::PendingBailment* pendingbailment);

  // optional .opentxs.proto.ConnectionInfo connectioninfo = 11;
  bool has_connectioninfo() const;
  void clear_connectioninfo();
  static const int kConnectioninfoFieldNumber = 11;
  const ::opentxs::proto::ConnectionInfo& connectioninfo() const;
  ::opentxs::proto::ConnectionInfo* release_connectioninfo();
  ::opentxs::proto::ConnectionInfo* mutable_connectioninfo();
  void set_allocated_connectioninfo(::opentxs::proto::ConnectionInfo* connectioninfo);

  // optional .opentxs.proto.StoreSecret storesecret = 12;
  bool has_storesecret() const;
  void clear_storesecret();
  static const int kStoresecretFieldNumber = 12;
  const ::opentxs::proto::StoreSecret& storesecret() const;
  ::opentxs::proto::StoreSecret* release_storesecret();
  ::opentxs::proto::StoreSecret* mutable_storesecret();
  void set_allocated_storesecret(::opentxs::proto::StoreSecret* storesecret);

  // optional .opentxs.proto.VerificationOffer verificationoffer = 14;
  bool has_verificationoffer() const;
  void clear_verificationoffer();
  static const int kVerificationofferFieldNumber = 14;
  const ::opentxs::proto::VerificationOffer& verificationoffer() const;
  ::opentxs::proto::VerificationOffer* release_verificationoffer();
  ::opentxs::proto::VerificationOffer* mutable_verificationoffer();
  void set_allocated_verificationoffer(::opentxs::proto::VerificationOffer* verificationoffer);

  // optional .opentxs.proto.Faucet faucet = 15;
  bool has_faucet() const;
  void clear_faucet();
  static const int kFaucetFieldNumber = 15;
  const ::opentxs::proto::Faucet& faucet() const;
  ::opentxs::proto::Faucet* release_faucet();
  ::opentxs::proto::Faucet* mutable_faucet();
  void set_allocated_faucet(::opentxs::proto::Faucet* faucet);

  RequestCase request_case() const;
  // @@protoc_insertion_point(class_scope:opentxs.proto.PeerRequest)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_id();
  void clear_has_id();
  void set_has_initiator();
  void clear_has_initiator();
  void set_has_recipient();
  void clear_has_recipient();
  void set_has_type();
  void clear_has_type();
  void set_has_cookie();
  void clear_has_cookie();
  void set_has_signature();
  void clear_has_signature();
  void set_has_bailment();
  void set_has_outbailment();
  void set_has_pendingbailment();
  void set_has_connectioninfo();
  void set_has_storesecret();
  void set_has_verificationoffer();
  void set_has_faucet();
  void set_has_server();
  void clear_has_server();

  inline bool has_request() const;
  void clear_request();
  inline void clear_has_request();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr initiator_;
  ::google::protobuf::internal::ArenaStringPtr recipient_;
  ::google::protobuf::internal::ArenaStringPtr cookie_;
  ::google::protobuf::internal::ArenaStringPtr server_;
  ::opentxs::proto::Signature* signature_;
  ::google::protobuf::uint32 version_;
  int type_;
  union RequestUnion {
    RequestUnion() {}
    ::opentxs::proto::Bailment* bailment_;
    ::opentxs::proto::OutBailment* outbailment_;
    ::opentxs::proto::PendingBailment* pendingbailment_;
    ::opentxs::proto::ConnectionInfo* connectioninfo_;
    ::opentxs::proto::StoreSecret* storesecret_;
    ::opentxs::proto::VerificationOffer* verificationoffer_;
    ::opentxs::proto::Faucet* faucet_;
  } request_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_PeerRequest_2eproto::TableStruct;
  friend void ::protobuf_PeerRequest_2eproto::InitDefaultsPeerRequestImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PeerRequest

// optional uint32 version = 1;
inline bool PeerRequest::has_version() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PeerRequest::set_has_version() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PeerRequest::clear_has_version() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PeerRequest::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 PeerRequest::version() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.PeerRequest.version)
  return version_;
}
inline void PeerRequest::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.PeerRequest.version)
}

// optional string id = 2;
inline bool PeerRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PeerRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PeerRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PeerRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& PeerRequest::id() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.PeerRequest.id)
  return id_.GetNoArena();
}
inline void PeerRequest::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.PeerRequest.id)
}
#if LANG_CXX11
inline void PeerRequest::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.PeerRequest.id)
}
#endif
inline void PeerRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.PeerRequest.id)
}
inline void PeerRequest::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.PeerRequest.id)
}
inline ::std::string* PeerRequest::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.PeerRequest.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerRequest::release_id() {
  // @@protoc_insertion_point(field_release:opentxs.proto.PeerRequest.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.PeerRequest.id)
}

// optional string initiator = 3;
inline bool PeerRequest::has_initiator() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PeerRequest::set_has_initiator() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PeerRequest::clear_has_initiator() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PeerRequest::clear_initiator() {
  initiator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_initiator();
}
inline const ::std::string& PeerRequest::initiator() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.PeerRequest.initiator)
  return initiator_.GetNoArena();
}
inline void PeerRequest::set_initiator(const ::std::string& value) {
  set_has_initiator();
  initiator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.PeerRequest.initiator)
}
#if LANG_CXX11
inline void PeerRequest::set_initiator(::std::string&& value) {
  set_has_initiator();
  initiator_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.PeerRequest.initiator)
}
#endif
inline void PeerRequest::set_initiator(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_initiator();
  initiator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.PeerRequest.initiator)
}
inline void PeerRequest::set_initiator(const char* value, size_t size) {
  set_has_initiator();
  initiator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.PeerRequest.initiator)
}
inline ::std::string* PeerRequest::mutable_initiator() {
  set_has_initiator();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.PeerRequest.initiator)
  return initiator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerRequest::release_initiator() {
  // @@protoc_insertion_point(field_release:opentxs.proto.PeerRequest.initiator)
  clear_has_initiator();
  return initiator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerRequest::set_allocated_initiator(::std::string* initiator) {
  if (initiator != NULL) {
    set_has_initiator();
  } else {
    clear_has_initiator();
  }
  initiator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), initiator);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.PeerRequest.initiator)
}

// optional string recipient = 4;
inline bool PeerRequest::has_recipient() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PeerRequest::set_has_recipient() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PeerRequest::clear_has_recipient() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PeerRequest::clear_recipient() {
  recipient_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_recipient();
}
inline const ::std::string& PeerRequest::recipient() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.PeerRequest.recipient)
  return recipient_.GetNoArena();
}
inline void PeerRequest::set_recipient(const ::std::string& value) {
  set_has_recipient();
  recipient_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.PeerRequest.recipient)
}
#if LANG_CXX11
inline void PeerRequest::set_recipient(::std::string&& value) {
  set_has_recipient();
  recipient_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.PeerRequest.recipient)
}
#endif
inline void PeerRequest::set_recipient(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_recipient();
  recipient_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.PeerRequest.recipient)
}
inline void PeerRequest::set_recipient(const char* value, size_t size) {
  set_has_recipient();
  recipient_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.PeerRequest.recipient)
}
inline ::std::string* PeerRequest::mutable_recipient() {
  set_has_recipient();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.PeerRequest.recipient)
  return recipient_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerRequest::release_recipient() {
  // @@protoc_insertion_point(field_release:opentxs.proto.PeerRequest.recipient)
  clear_has_recipient();
  return recipient_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerRequest::set_allocated_recipient(::std::string* recipient) {
  if (recipient != NULL) {
    set_has_recipient();
  } else {
    clear_has_recipient();
  }
  recipient_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recipient);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.PeerRequest.recipient)
}

// optional .opentxs.proto.PeerRequestType type = 5;
inline bool PeerRequest::has_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PeerRequest::set_has_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PeerRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PeerRequest::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::opentxs::proto::PeerRequestType PeerRequest::type() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.PeerRequest.type)
  return static_cast< ::opentxs::proto::PeerRequestType >(type_);
}
inline void PeerRequest::set_type(::opentxs::proto::PeerRequestType value) {
  assert(::opentxs::proto::PeerRequestType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.PeerRequest.type)
}

// optional string cookie = 6;
inline bool PeerRequest::has_cookie() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PeerRequest::set_has_cookie() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PeerRequest::clear_has_cookie() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PeerRequest::clear_cookie() {
  cookie_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cookie();
}
inline const ::std::string& PeerRequest::cookie() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.PeerRequest.cookie)
  return cookie_.GetNoArena();
}
inline void PeerRequest::set_cookie(const ::std::string& value) {
  set_has_cookie();
  cookie_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.PeerRequest.cookie)
}
#if LANG_CXX11
inline void PeerRequest::set_cookie(::std::string&& value) {
  set_has_cookie();
  cookie_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.PeerRequest.cookie)
}
#endif
inline void PeerRequest::set_cookie(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cookie();
  cookie_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.PeerRequest.cookie)
}
inline void PeerRequest::set_cookie(const char* value, size_t size) {
  set_has_cookie();
  cookie_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.PeerRequest.cookie)
}
inline ::std::string* PeerRequest::mutable_cookie() {
  set_has_cookie();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.PeerRequest.cookie)
  return cookie_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerRequest::release_cookie() {
  // @@protoc_insertion_point(field_release:opentxs.proto.PeerRequest.cookie)
  clear_has_cookie();
  return cookie_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerRequest::set_allocated_cookie(::std::string* cookie) {
  if (cookie != NULL) {
    set_has_cookie();
  } else {
    clear_has_cookie();
  }
  cookie_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cookie);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.PeerRequest.cookie)
}

// optional .opentxs.proto.Signature signature = 7;
inline bool PeerRequest::has_signature() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PeerRequest::set_has_signature() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PeerRequest::clear_has_signature() {
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::opentxs::proto::Signature& PeerRequest::signature() const {
  const ::opentxs::proto::Signature* p = signature_;
  // @@protoc_insertion_point(field_get:opentxs.proto.PeerRequest.signature)
  return p != NULL ? *p : *reinterpret_cast<const ::opentxs::proto::Signature*>(
      &::opentxs::proto::_Signature_default_instance_);
}
inline ::opentxs::proto::Signature* PeerRequest::release_signature() {
  // @@protoc_insertion_point(field_release:opentxs.proto.PeerRequest.signature)
  clear_has_signature();
  ::opentxs::proto::Signature* temp = signature_;
  signature_ = NULL;
  return temp;
}
inline ::opentxs::proto::Signature* PeerRequest::mutable_signature() {
  set_has_signature();
  if (signature_ == NULL) {
    signature_ = new ::opentxs::proto::Signature;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.proto.PeerRequest.signature)
  return signature_;
}
inline void PeerRequest::set_allocated_signature(::opentxs::proto::Signature* signature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(signature_);
  }
  if (signature) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      signature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, signature, submessage_arena);
    }
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_ = signature;
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.PeerRequest.signature)
}

// optional .opentxs.proto.Bailment bailment = 8;
inline bool PeerRequest::has_bailment() const {
  return request_case() == kBailment;
}
inline void PeerRequest::set_has_bailment() {
  _oneof_case_[0] = kBailment;
}
inline ::opentxs::proto::Bailment* PeerRequest::release_bailment() {
  // @@protoc_insertion_point(field_release:opentxs.proto.PeerRequest.bailment)
  if (has_bailment()) {
    clear_has_request();
      ::opentxs::proto::Bailment* temp = request_.bailment_;
    request_.bailment_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::opentxs::proto::Bailment& PeerRequest::bailment() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.PeerRequest.bailment)
  return has_bailment()
      ? *request_.bailment_
      : *reinterpret_cast< ::opentxs::proto::Bailment*>(&::opentxs::proto::_Bailment_default_instance_);
}
inline ::opentxs::proto::Bailment* PeerRequest::mutable_bailment() {
  if (!has_bailment()) {
    clear_request();
    set_has_bailment();
    request_.bailment_ = new ::opentxs::proto::Bailment;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.proto.PeerRequest.bailment)
  return request_.bailment_;
}

// optional .opentxs.proto.OutBailment outbailment = 9;
inline bool PeerRequest::has_outbailment() const {
  return request_case() == kOutbailment;
}
inline void PeerRequest::set_has_outbailment() {
  _oneof_case_[0] = kOutbailment;
}
inline ::opentxs::proto::OutBailment* PeerRequest::release_outbailment() {
  // @@protoc_insertion_point(field_release:opentxs.proto.PeerRequest.outbailment)
  if (has_outbailment()) {
    clear_has_request();
      ::opentxs::proto::OutBailment* temp = request_.outbailment_;
    request_.outbailment_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::opentxs::proto::OutBailment& PeerRequest::outbailment() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.PeerRequest.outbailment)
  return has_outbailment()
      ? *request_.outbailment_
      : *reinterpret_cast< ::opentxs::proto::OutBailment*>(&::opentxs::proto::_OutBailment_default_instance_);
}
inline ::opentxs::proto::OutBailment* PeerRequest::mutable_outbailment() {
  if (!has_outbailment()) {
    clear_request();
    set_has_outbailment();
    request_.outbailment_ = new ::opentxs::proto::OutBailment;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.proto.PeerRequest.outbailment)
  return request_.outbailment_;
}

// optional .opentxs.proto.PendingBailment pendingbailment = 10;
inline bool PeerRequest::has_pendingbailment() const {
  return request_case() == kPendingbailment;
}
inline void PeerRequest::set_has_pendingbailment() {
  _oneof_case_[0] = kPendingbailment;
}
inline ::opentxs::proto::PendingBailment* PeerRequest::release_pendingbailment() {
  // @@protoc_insertion_point(field_release:opentxs.proto.PeerRequest.pendingbailment)
  if (has_pendingbailment()) {
    clear_has_request();
      ::opentxs::proto::PendingBailment* temp = request_.pendingbailment_;
    request_.pendingbailment_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::opentxs::proto::PendingBailment& PeerRequest::pendingbailment() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.PeerRequest.pendingbailment)
  return has_pendingbailment()
      ? *request_.pendingbailment_
      : *reinterpret_cast< ::opentxs::proto::PendingBailment*>(&::opentxs::proto::_PendingBailment_default_instance_);
}
inline ::opentxs::proto::PendingBailment* PeerRequest::mutable_pendingbailment() {
  if (!has_pendingbailment()) {
    clear_request();
    set_has_pendingbailment();
    request_.pendingbailment_ = new ::opentxs::proto::PendingBailment;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.proto.PeerRequest.pendingbailment)
  return request_.pendingbailment_;
}

// optional .opentxs.proto.ConnectionInfo connectioninfo = 11;
inline bool PeerRequest::has_connectioninfo() const {
  return request_case() == kConnectioninfo;
}
inline void PeerRequest::set_has_connectioninfo() {
  _oneof_case_[0] = kConnectioninfo;
}
inline ::opentxs::proto::ConnectionInfo* PeerRequest::release_connectioninfo() {
  // @@protoc_insertion_point(field_release:opentxs.proto.PeerRequest.connectioninfo)
  if (has_connectioninfo()) {
    clear_has_request();
      ::opentxs::proto::ConnectionInfo* temp = request_.connectioninfo_;
    request_.connectioninfo_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::opentxs::proto::ConnectionInfo& PeerRequest::connectioninfo() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.PeerRequest.connectioninfo)
  return has_connectioninfo()
      ? *request_.connectioninfo_
      : *reinterpret_cast< ::opentxs::proto::ConnectionInfo*>(&::opentxs::proto::_ConnectionInfo_default_instance_);
}
inline ::opentxs::proto::ConnectionInfo* PeerRequest::mutable_connectioninfo() {
  if (!has_connectioninfo()) {
    clear_request();
    set_has_connectioninfo();
    request_.connectioninfo_ = new ::opentxs::proto::ConnectionInfo;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.proto.PeerRequest.connectioninfo)
  return request_.connectioninfo_;
}

// optional .opentxs.proto.StoreSecret storesecret = 12;
inline bool PeerRequest::has_storesecret() const {
  return request_case() == kStoresecret;
}
inline void PeerRequest::set_has_storesecret() {
  _oneof_case_[0] = kStoresecret;
}
inline ::opentxs::proto::StoreSecret* PeerRequest::release_storesecret() {
  // @@protoc_insertion_point(field_release:opentxs.proto.PeerRequest.storesecret)
  if (has_storesecret()) {
    clear_has_request();
      ::opentxs::proto::StoreSecret* temp = request_.storesecret_;
    request_.storesecret_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::opentxs::proto::StoreSecret& PeerRequest::storesecret() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.PeerRequest.storesecret)
  return has_storesecret()
      ? *request_.storesecret_
      : *reinterpret_cast< ::opentxs::proto::StoreSecret*>(&::opentxs::proto::_StoreSecret_default_instance_);
}
inline ::opentxs::proto::StoreSecret* PeerRequest::mutable_storesecret() {
  if (!has_storesecret()) {
    clear_request();
    set_has_storesecret();
    request_.storesecret_ = new ::opentxs::proto::StoreSecret;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.proto.PeerRequest.storesecret)
  return request_.storesecret_;
}

// optional .opentxs.proto.VerificationOffer verificationoffer = 14;
inline bool PeerRequest::has_verificationoffer() const {
  return request_case() == kVerificationoffer;
}
inline void PeerRequest::set_has_verificationoffer() {
  _oneof_case_[0] = kVerificationoffer;
}
inline ::opentxs::proto::VerificationOffer* PeerRequest::release_verificationoffer() {
  // @@protoc_insertion_point(field_release:opentxs.proto.PeerRequest.verificationoffer)
  if (has_verificationoffer()) {
    clear_has_request();
      ::opentxs::proto::VerificationOffer* temp = request_.verificationoffer_;
    request_.verificationoffer_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::opentxs::proto::VerificationOffer& PeerRequest::verificationoffer() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.PeerRequest.verificationoffer)
  return has_verificationoffer()
      ? *request_.verificationoffer_
      : *reinterpret_cast< ::opentxs::proto::VerificationOffer*>(&::opentxs::proto::_VerificationOffer_default_instance_);
}
inline ::opentxs::proto::VerificationOffer* PeerRequest::mutable_verificationoffer() {
  if (!has_verificationoffer()) {
    clear_request();
    set_has_verificationoffer();
    request_.verificationoffer_ = new ::opentxs::proto::VerificationOffer;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.proto.PeerRequest.verificationoffer)
  return request_.verificationoffer_;
}

// optional .opentxs.proto.Faucet faucet = 15;
inline bool PeerRequest::has_faucet() const {
  return request_case() == kFaucet;
}
inline void PeerRequest::set_has_faucet() {
  _oneof_case_[0] = kFaucet;
}
inline ::opentxs::proto::Faucet* PeerRequest::release_faucet() {
  // @@protoc_insertion_point(field_release:opentxs.proto.PeerRequest.faucet)
  if (has_faucet()) {
    clear_has_request();
      ::opentxs::proto::Faucet* temp = request_.faucet_;
    request_.faucet_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::opentxs::proto::Faucet& PeerRequest::faucet() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.PeerRequest.faucet)
  return has_faucet()
      ? *request_.faucet_
      : *reinterpret_cast< ::opentxs::proto::Faucet*>(&::opentxs::proto::_Faucet_default_instance_);
}
inline ::opentxs::proto::Faucet* PeerRequest::mutable_faucet() {
  if (!has_faucet()) {
    clear_request();
    set_has_faucet();
    request_.faucet_ = new ::opentxs::proto::Faucet;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.proto.PeerRequest.faucet)
  return request_.faucet_;
}

// optional string server = 13;
inline bool PeerRequest::has_server() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PeerRequest::set_has_server() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PeerRequest::clear_has_server() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PeerRequest::clear_server() {
  server_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server();
}
inline const ::std::string& PeerRequest::server() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.PeerRequest.server)
  return server_.GetNoArena();
}
inline void PeerRequest::set_server(const ::std::string& value) {
  set_has_server();
  server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.PeerRequest.server)
}
#if LANG_CXX11
inline void PeerRequest::set_server(::std::string&& value) {
  set_has_server();
  server_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.PeerRequest.server)
}
#endif
inline void PeerRequest::set_server(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_server();
  server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.PeerRequest.server)
}
inline void PeerRequest::set_server(const char* value, size_t size) {
  set_has_server();
  server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.PeerRequest.server)
}
inline ::std::string* PeerRequest::mutable_server() {
  set_has_server();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.PeerRequest.server)
  return server_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerRequest::release_server() {
  // @@protoc_insertion_point(field_release:opentxs.proto.PeerRequest.server)
  clear_has_server();
  return server_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerRequest::set_allocated_server(::std::string* server) {
  if (server != NULL) {
    set_has_server();
  } else {
    clear_has_server();
  }
  server_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.PeerRequest.server)
}

inline bool PeerRequest::has_request() const {
  return request_case() != REQUEST_NOT_SET;
}
inline void PeerRequest::clear_has_request() {
  _oneof_case_[0] = REQUEST_NOT_SET;
}
inline PeerRequest::RequestCase PeerRequest::request_case() const {
  return PeerRequest::RequestCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace opentxs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PeerRequest_2eproto__INCLUDED
