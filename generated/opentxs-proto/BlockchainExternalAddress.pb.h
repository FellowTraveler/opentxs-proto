// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BlockchainExternalAddress.proto

#ifndef PROTOBUF_BlockchainExternalAddress_2eproto__INCLUDED
#define PROTOBUF_BlockchainExternalAddress_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "BlockchainEnums.pb.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace protobuf_BlockchainExternalAddress_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsBlockchainExternalAddressImpl();
void InitDefaultsBlockchainExternalAddress();
inline void InitDefaults() {
  InitDefaultsBlockchainExternalAddress();
}
}  // namespace protobuf_BlockchainExternalAddress_2eproto
namespace opentxs {
namespace proto {
class BlockchainExternalAddress;
class BlockchainExternalAddressDefaultTypeInternal;
extern BlockchainExternalAddressDefaultTypeInternal _BlockchainExternalAddress_default_instance_;
}  // namespace proto
}  // namespace opentxs
namespace opentxs {
namespace proto {

// ===================================================================

class BlockchainExternalAddress : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:opentxs.proto.BlockchainExternalAddress) */ {
 public:
  BlockchainExternalAddress();
  virtual ~BlockchainExternalAddress();

  BlockchainExternalAddress(const BlockchainExternalAddress& from);

  inline BlockchainExternalAddress& operator=(const BlockchainExternalAddress& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BlockchainExternalAddress(BlockchainExternalAddress&& from) noexcept
    : BlockchainExternalAddress() {
    *this = ::std::move(from);
  }

  inline BlockchainExternalAddress& operator=(BlockchainExternalAddress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BlockchainExternalAddress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockchainExternalAddress* internal_default_instance() {
    return reinterpret_cast<const BlockchainExternalAddress*>(
               &_BlockchainExternalAddress_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(BlockchainExternalAddress* other);
  friend void swap(BlockchainExternalAddress& a, BlockchainExternalAddress& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BlockchainExternalAddress* New() const PROTOBUF_FINAL { return New(NULL); }

  BlockchainExternalAddress* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const BlockchainExternalAddress& from);
  void MergeFrom(const BlockchainExternalAddress& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BlockchainExternalAddress* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes data = 3;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data(int index) const;
  ::std::string* mutable_data(int index);
  void set_data(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_data(int index, ::std::string&& value);
  #endif
  void set_data(int index, const char* value);
  void set_data(int index, const void* value, size_t size);
  ::std::string* add_data();
  void add_data(const ::std::string& value);
  #if LANG_CXX11
  void add_data(::std::string&& value);
  #endif
  void add_data(const char* value);
  void add_data(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& data() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_data();

  // optional uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // optional .opentxs.proto.BlockchainTransactionOutputType type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::opentxs::proto::BlockchainTransactionOutputType type() const;
  void set_type(::opentxs::proto::BlockchainTransactionOutputType value);

  // @@protoc_insertion_point(class_scope:opentxs.proto.BlockchainExternalAddress)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_type();
  void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> data_;
  ::google::protobuf::uint32 version_;
  int type_;
  friend struct ::protobuf_BlockchainExternalAddress_2eproto::TableStruct;
  friend void ::protobuf_BlockchainExternalAddress_2eproto::InitDefaultsBlockchainExternalAddressImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BlockchainExternalAddress

// optional uint32 version = 1;
inline bool BlockchainExternalAddress::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockchainExternalAddress::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlockchainExternalAddress::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlockchainExternalAddress::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 BlockchainExternalAddress::version() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.BlockchainExternalAddress.version)
  return version_;
}
inline void BlockchainExternalAddress::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.BlockchainExternalAddress.version)
}

// optional .opentxs.proto.BlockchainTransactionOutputType type = 2;
inline bool BlockchainExternalAddress::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlockchainExternalAddress::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlockchainExternalAddress::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlockchainExternalAddress::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::opentxs::proto::BlockchainTransactionOutputType BlockchainExternalAddress::type() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.BlockchainExternalAddress.type)
  return static_cast< ::opentxs::proto::BlockchainTransactionOutputType >(type_);
}
inline void BlockchainExternalAddress::set_type(::opentxs::proto::BlockchainTransactionOutputType value) {
  assert(::opentxs::proto::BlockchainTransactionOutputType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.BlockchainExternalAddress.type)
}

// repeated bytes data = 3;
inline int BlockchainExternalAddress::data_size() const {
  return data_.size();
}
inline void BlockchainExternalAddress::clear_data() {
  data_.Clear();
}
inline const ::std::string& BlockchainExternalAddress::data(int index) const {
  // @@protoc_insertion_point(field_get:opentxs.proto.BlockchainExternalAddress.data)
  return data_.Get(index);
}
inline ::std::string* BlockchainExternalAddress::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:opentxs.proto.BlockchainExternalAddress.data)
  return data_.Mutable(index);
}
inline void BlockchainExternalAddress::set_data(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:opentxs.proto.BlockchainExternalAddress.data)
  data_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void BlockchainExternalAddress::set_data(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:opentxs.proto.BlockchainExternalAddress.data)
  data_.Mutable(index)->assign(std::move(value));
}
#endif
inline void BlockchainExternalAddress::set_data(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opentxs.proto.BlockchainExternalAddress.data)
}
inline void BlockchainExternalAddress::set_data(int index, const void* value, size_t size) {
  data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.BlockchainExternalAddress.data)
}
inline ::std::string* BlockchainExternalAddress::add_data() {
  // @@protoc_insertion_point(field_add_mutable:opentxs.proto.BlockchainExternalAddress.data)
  return data_.Add();
}
inline void BlockchainExternalAddress::add_data(const ::std::string& value) {
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:opentxs.proto.BlockchainExternalAddress.data)
}
#if LANG_CXX11
inline void BlockchainExternalAddress::add_data(::std::string&& value) {
  data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:opentxs.proto.BlockchainExternalAddress.data)
}
#endif
inline void BlockchainExternalAddress::add_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opentxs.proto.BlockchainExternalAddress.data)
}
inline void BlockchainExternalAddress::add_data(const void* value, size_t size) {
  data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opentxs.proto.BlockchainExternalAddress.data)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BlockchainExternalAddress::data() const {
  // @@protoc_insertion_point(field_list:opentxs.proto.BlockchainExternalAddress.data)
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BlockchainExternalAddress::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:opentxs.proto.BlockchainExternalAddress.data)
  return &data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace opentxs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BlockchainExternalAddress_2eproto__INCLUDED
