// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MoveFunds.proto

#ifndef PROTOBUF_MoveFunds_2eproto__INCLUDED
#define PROTOBUF_MoveFunds_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "RPCEnums.pb.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace protobuf_MoveFunds_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsMoveFundsImpl();
void InitDefaultsMoveFunds();
inline void InitDefaults() {
  InitDefaultsMoveFunds();
}
}  // namespace protobuf_MoveFunds_2eproto
namespace opentxs {
namespace proto {
class MoveFunds;
class MoveFundsDefaultTypeInternal;
extern MoveFundsDefaultTypeInternal _MoveFunds_default_instance_;
}  // namespace proto
}  // namespace opentxs
namespace opentxs {
namespace proto {

// ===================================================================

class MoveFunds : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:opentxs.proto.MoveFunds) */ {
 public:
  MoveFunds();
  virtual ~MoveFunds();

  MoveFunds(const MoveFunds& from);

  inline MoveFunds& operator=(const MoveFunds& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MoveFunds(MoveFunds&& from) noexcept
    : MoveFunds() {
    *this = ::std::move(from);
  }

  inline MoveFunds& operator=(MoveFunds&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MoveFunds& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveFunds* internal_default_instance() {
    return reinterpret_cast<const MoveFunds*>(
               &_MoveFunds_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(MoveFunds* other);
  friend void swap(MoveFunds& a, MoveFunds& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MoveFunds* New() const PROTOBUF_FINAL { return New(NULL); }

  MoveFunds* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const MoveFunds& from);
  void MergeFrom(const MoveFunds& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MoveFunds* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sourceaccount = 3;
  bool has_sourceaccount() const;
  void clear_sourceaccount();
  static const int kSourceaccountFieldNumber = 3;
  const ::std::string& sourceaccount() const;
  void set_sourceaccount(const ::std::string& value);
  #if LANG_CXX11
  void set_sourceaccount(::std::string&& value);
  #endif
  void set_sourceaccount(const char* value);
  void set_sourceaccount(const char* value, size_t size);
  ::std::string* mutable_sourceaccount();
  ::std::string* release_sourceaccount();
  void set_allocated_sourceaccount(::std::string* sourceaccount);

  // optional string destinationaccount = 4;
  bool has_destinationaccount() const;
  void clear_destinationaccount();
  static const int kDestinationaccountFieldNumber = 4;
  const ::std::string& destinationaccount() const;
  void set_destinationaccount(const ::std::string& value);
  #if LANG_CXX11
  void set_destinationaccount(::std::string&& value);
  #endif
  void set_destinationaccount(const char* value);
  void set_destinationaccount(const char* value, size_t size);
  ::std::string* mutable_destinationaccount();
  ::std::string* release_destinationaccount();
  void set_allocated_destinationaccount(::std::string* destinationaccount);

  // optional string memo = 5;
  bool has_memo() const;
  void clear_memo();
  static const int kMemoFieldNumber = 5;
  const ::std::string& memo() const;
  void set_memo(const ::std::string& value);
  #if LANG_CXX11
  void set_memo(::std::string&& value);
  #endif
  void set_memo(const char* value);
  void set_memo(const char* value, size_t size);
  ::std::string* mutable_memo();
  ::std::string* release_memo();
  void set_allocated_memo(::std::string* memo);

  // optional uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // optional .opentxs.proto.RPCPaymentType type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::opentxs::proto::RPCPaymentType type() const;
  void set_type(::opentxs::proto::RPCPaymentType value);

  // optional uint64 amount = 6;
  bool has_amount() const;
  void clear_amount();
  static const int kAmountFieldNumber = 6;
  ::google::protobuf::uint64 amount() const;
  void set_amount(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:opentxs.proto.MoveFunds)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_type();
  void clear_has_type();
  void set_has_sourceaccount();
  void clear_has_sourceaccount();
  void set_has_destinationaccount();
  void clear_has_destinationaccount();
  void set_has_memo();
  void clear_has_memo();
  void set_has_amount();
  void clear_has_amount();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sourceaccount_;
  ::google::protobuf::internal::ArenaStringPtr destinationaccount_;
  ::google::protobuf::internal::ArenaStringPtr memo_;
  ::google::protobuf::uint32 version_;
  int type_;
  ::google::protobuf::uint64 amount_;
  friend struct ::protobuf_MoveFunds_2eproto::TableStruct;
  friend void ::protobuf_MoveFunds_2eproto::InitDefaultsMoveFundsImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MoveFunds

// optional uint32 version = 1;
inline bool MoveFunds::has_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MoveFunds::set_has_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MoveFunds::clear_has_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MoveFunds::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 MoveFunds::version() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.MoveFunds.version)
  return version_;
}
inline void MoveFunds::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.MoveFunds.version)
}

// optional .opentxs.proto.RPCPaymentType type = 2;
inline bool MoveFunds::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MoveFunds::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MoveFunds::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MoveFunds::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::opentxs::proto::RPCPaymentType MoveFunds::type() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.MoveFunds.type)
  return static_cast< ::opentxs::proto::RPCPaymentType >(type_);
}
inline void MoveFunds::set_type(::opentxs::proto::RPCPaymentType value) {
  assert(::opentxs::proto::RPCPaymentType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.MoveFunds.type)
}

// optional string sourceaccount = 3;
inline bool MoveFunds::has_sourceaccount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MoveFunds::set_has_sourceaccount() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MoveFunds::clear_has_sourceaccount() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MoveFunds::clear_sourceaccount() {
  sourceaccount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sourceaccount();
}
inline const ::std::string& MoveFunds::sourceaccount() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.MoveFunds.sourceaccount)
  return sourceaccount_.GetNoArena();
}
inline void MoveFunds::set_sourceaccount(const ::std::string& value) {
  set_has_sourceaccount();
  sourceaccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.MoveFunds.sourceaccount)
}
#if LANG_CXX11
inline void MoveFunds::set_sourceaccount(::std::string&& value) {
  set_has_sourceaccount();
  sourceaccount_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.MoveFunds.sourceaccount)
}
#endif
inline void MoveFunds::set_sourceaccount(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sourceaccount();
  sourceaccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.MoveFunds.sourceaccount)
}
inline void MoveFunds::set_sourceaccount(const char* value, size_t size) {
  set_has_sourceaccount();
  sourceaccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.MoveFunds.sourceaccount)
}
inline ::std::string* MoveFunds::mutable_sourceaccount() {
  set_has_sourceaccount();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.MoveFunds.sourceaccount)
  return sourceaccount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MoveFunds::release_sourceaccount() {
  // @@protoc_insertion_point(field_release:opentxs.proto.MoveFunds.sourceaccount)
  clear_has_sourceaccount();
  return sourceaccount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MoveFunds::set_allocated_sourceaccount(::std::string* sourceaccount) {
  if (sourceaccount != NULL) {
    set_has_sourceaccount();
  } else {
    clear_has_sourceaccount();
  }
  sourceaccount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sourceaccount);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.MoveFunds.sourceaccount)
}

// optional string destinationaccount = 4;
inline bool MoveFunds::has_destinationaccount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MoveFunds::set_has_destinationaccount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MoveFunds::clear_has_destinationaccount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MoveFunds::clear_destinationaccount() {
  destinationaccount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_destinationaccount();
}
inline const ::std::string& MoveFunds::destinationaccount() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.MoveFunds.destinationaccount)
  return destinationaccount_.GetNoArena();
}
inline void MoveFunds::set_destinationaccount(const ::std::string& value) {
  set_has_destinationaccount();
  destinationaccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.MoveFunds.destinationaccount)
}
#if LANG_CXX11
inline void MoveFunds::set_destinationaccount(::std::string&& value) {
  set_has_destinationaccount();
  destinationaccount_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.MoveFunds.destinationaccount)
}
#endif
inline void MoveFunds::set_destinationaccount(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_destinationaccount();
  destinationaccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.MoveFunds.destinationaccount)
}
inline void MoveFunds::set_destinationaccount(const char* value, size_t size) {
  set_has_destinationaccount();
  destinationaccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.MoveFunds.destinationaccount)
}
inline ::std::string* MoveFunds::mutable_destinationaccount() {
  set_has_destinationaccount();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.MoveFunds.destinationaccount)
  return destinationaccount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MoveFunds::release_destinationaccount() {
  // @@protoc_insertion_point(field_release:opentxs.proto.MoveFunds.destinationaccount)
  clear_has_destinationaccount();
  return destinationaccount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MoveFunds::set_allocated_destinationaccount(::std::string* destinationaccount) {
  if (destinationaccount != NULL) {
    set_has_destinationaccount();
  } else {
    clear_has_destinationaccount();
  }
  destinationaccount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), destinationaccount);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.MoveFunds.destinationaccount)
}

// optional string memo = 5;
inline bool MoveFunds::has_memo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MoveFunds::set_has_memo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MoveFunds::clear_has_memo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MoveFunds::clear_memo() {
  memo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_memo();
}
inline const ::std::string& MoveFunds::memo() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.MoveFunds.memo)
  return memo_.GetNoArena();
}
inline void MoveFunds::set_memo(const ::std::string& value) {
  set_has_memo();
  memo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.MoveFunds.memo)
}
#if LANG_CXX11
inline void MoveFunds::set_memo(::std::string&& value) {
  set_has_memo();
  memo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.MoveFunds.memo)
}
#endif
inline void MoveFunds::set_memo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_memo();
  memo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.MoveFunds.memo)
}
inline void MoveFunds::set_memo(const char* value, size_t size) {
  set_has_memo();
  memo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.MoveFunds.memo)
}
inline ::std::string* MoveFunds::mutable_memo() {
  set_has_memo();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.MoveFunds.memo)
  return memo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MoveFunds::release_memo() {
  // @@protoc_insertion_point(field_release:opentxs.proto.MoveFunds.memo)
  clear_has_memo();
  return memo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MoveFunds::set_allocated_memo(::std::string* memo) {
  if (memo != NULL) {
    set_has_memo();
  } else {
    clear_has_memo();
  }
  memo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), memo);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.MoveFunds.memo)
}

// optional uint64 amount = 6;
inline bool MoveFunds::has_amount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MoveFunds::set_has_amount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MoveFunds::clear_has_amount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MoveFunds::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
  clear_has_amount();
}
inline ::google::protobuf::uint64 MoveFunds::amount() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.MoveFunds.amount)
  return amount_;
}
inline void MoveFunds::set_amount(::google::protobuf::uint64 value) {
  set_has_amount();
  amount_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.MoveFunds.amount)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace opentxs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MoveFunds_2eproto__INCLUDED
