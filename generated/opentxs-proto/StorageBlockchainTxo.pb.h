// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StorageBlockchainTxo.proto

#ifndef PROTOBUF_StorageBlockchainTxo_2eproto__INCLUDED
#define PROTOBUF_StorageBlockchainTxo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "BlockchainPreviousOutput.pb.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace protobuf_StorageBlockchainTxo_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsStorageBlockchainTxoImpl();
void InitDefaultsStorageBlockchainTxo();
inline void InitDefaults() {
  InitDefaultsStorageBlockchainTxo();
}
}  // namespace protobuf_StorageBlockchainTxo_2eproto
namespace opentxs {
namespace proto {
class StorageBlockchainTxo;
class StorageBlockchainTxoDefaultTypeInternal;
extern StorageBlockchainTxoDefaultTypeInternal _StorageBlockchainTxo_default_instance_;
}  // namespace proto
}  // namespace opentxs
namespace opentxs {
namespace proto {

// ===================================================================

class StorageBlockchainTxo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:opentxs.proto.StorageBlockchainTxo) */ {
 public:
  StorageBlockchainTxo();
  virtual ~StorageBlockchainTxo();

  StorageBlockchainTxo(const StorageBlockchainTxo& from);

  inline StorageBlockchainTxo& operator=(const StorageBlockchainTxo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StorageBlockchainTxo(StorageBlockchainTxo&& from) noexcept
    : StorageBlockchainTxo() {
    *this = ::std::move(from);
  }

  inline StorageBlockchainTxo& operator=(StorageBlockchainTxo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const StorageBlockchainTxo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StorageBlockchainTxo* internal_default_instance() {
    return reinterpret_cast<const StorageBlockchainTxo*>(
               &_StorageBlockchainTxo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(StorageBlockchainTxo* other);
  friend void swap(StorageBlockchainTxo& a, StorageBlockchainTxo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StorageBlockchainTxo* New() const PROTOBUF_FINAL { return New(NULL); }

  StorageBlockchainTxo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const StorageBlockchainTxo& from);
  void MergeFrom(const StorageBlockchainTxo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StorageBlockchainTxo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes element = 4;
  int element_size() const;
  void clear_element();
  static const int kElementFieldNumber = 4;
  const ::std::string& element(int index) const;
  ::std::string* mutable_element(int index);
  void set_element(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_element(int index, ::std::string&& value);
  #endif
  void set_element(int index, const char* value);
  void set_element(int index, const void* value, size_t size);
  ::std::string* add_element();
  void add_element(const ::std::string& value);
  #if LANG_CXX11
  void add_element(::std::string&& value);
  #endif
  void add_element(const char* value);
  void add_element(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& element() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_element();

  // repeated string txid = 5;
  int txid_size() const;
  void clear_txid();
  static const int kTxidFieldNumber = 5;
  const ::std::string& txid(int index) const;
  ::std::string* mutable_txid(int index);
  void set_txid(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_txid(int index, ::std::string&& value);
  #endif
  void set_txid(int index, const char* value);
  void set_txid(int index, const char* value, size_t size);
  ::std::string* add_txid();
  void add_txid(const ::std::string& value);
  #if LANG_CXX11
  void add_txid(::std::string&& value);
  #endif
  void add_txid(const char* value);
  void add_txid(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& txid() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_txid();

  // optional .opentxs.proto.BlockchainPreviousOutput output = 2;
  bool has_output() const;
  void clear_output();
  static const int kOutputFieldNumber = 2;
  const ::opentxs::proto::BlockchainPreviousOutput& output() const;
  ::opentxs::proto::BlockchainPreviousOutput* release_output();
  ::opentxs::proto::BlockchainPreviousOutput* mutable_output();
  void set_allocated_output(::opentxs::proto::BlockchainPreviousOutput* output);

  // optional uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // optional bool spent = 3;
  bool has_spent() const;
  void clear_spent();
  static const int kSpentFieldNumber = 3;
  bool spent() const;
  void set_spent(bool value);

  // @@protoc_insertion_point(class_scope:opentxs.proto.StorageBlockchainTxo)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_output();
  void clear_has_output();
  void set_has_spent();
  void clear_has_spent();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> element_;
  ::google::protobuf::RepeatedPtrField< ::std::string> txid_;
  ::opentxs::proto::BlockchainPreviousOutput* output_;
  ::google::protobuf::uint32 version_;
  bool spent_;
  friend struct ::protobuf_StorageBlockchainTxo_2eproto::TableStruct;
  friend void ::protobuf_StorageBlockchainTxo_2eproto::InitDefaultsStorageBlockchainTxoImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StorageBlockchainTxo

// optional uint32 version = 1;
inline bool StorageBlockchainTxo::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StorageBlockchainTxo::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StorageBlockchainTxo::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StorageBlockchainTxo::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 StorageBlockchainTxo::version() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.StorageBlockchainTxo.version)
  return version_;
}
inline void StorageBlockchainTxo::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.StorageBlockchainTxo.version)
}

// optional .opentxs.proto.BlockchainPreviousOutput output = 2;
inline bool StorageBlockchainTxo::has_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StorageBlockchainTxo::set_has_output() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StorageBlockchainTxo::clear_has_output() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::opentxs::proto::BlockchainPreviousOutput& StorageBlockchainTxo::output() const {
  const ::opentxs::proto::BlockchainPreviousOutput* p = output_;
  // @@protoc_insertion_point(field_get:opentxs.proto.StorageBlockchainTxo.output)
  return p != NULL ? *p : *reinterpret_cast<const ::opentxs::proto::BlockchainPreviousOutput*>(
      &::opentxs::proto::_BlockchainPreviousOutput_default_instance_);
}
inline ::opentxs::proto::BlockchainPreviousOutput* StorageBlockchainTxo::release_output() {
  // @@protoc_insertion_point(field_release:opentxs.proto.StorageBlockchainTxo.output)
  clear_has_output();
  ::opentxs::proto::BlockchainPreviousOutput* temp = output_;
  output_ = NULL;
  return temp;
}
inline ::opentxs::proto::BlockchainPreviousOutput* StorageBlockchainTxo::mutable_output() {
  set_has_output();
  if (output_ == NULL) {
    output_ = new ::opentxs::proto::BlockchainPreviousOutput;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.proto.StorageBlockchainTxo.output)
  return output_;
}
inline void StorageBlockchainTxo::set_allocated_output(::opentxs::proto::BlockchainPreviousOutput* output) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(output_);
  }
  if (output) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      output = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, output, submessage_arena);
    }
    set_has_output();
  } else {
    clear_has_output();
  }
  output_ = output;
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.StorageBlockchainTxo.output)
}

// optional bool spent = 3;
inline bool StorageBlockchainTxo::has_spent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StorageBlockchainTxo::set_has_spent() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StorageBlockchainTxo::clear_has_spent() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StorageBlockchainTxo::clear_spent() {
  spent_ = false;
  clear_has_spent();
}
inline bool StorageBlockchainTxo::spent() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.StorageBlockchainTxo.spent)
  return spent_;
}
inline void StorageBlockchainTxo::set_spent(bool value) {
  set_has_spent();
  spent_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.StorageBlockchainTxo.spent)
}

// repeated bytes element = 4;
inline int StorageBlockchainTxo::element_size() const {
  return element_.size();
}
inline void StorageBlockchainTxo::clear_element() {
  element_.Clear();
}
inline const ::std::string& StorageBlockchainTxo::element(int index) const {
  // @@protoc_insertion_point(field_get:opentxs.proto.StorageBlockchainTxo.element)
  return element_.Get(index);
}
inline ::std::string* StorageBlockchainTxo::mutable_element(int index) {
  // @@protoc_insertion_point(field_mutable:opentxs.proto.StorageBlockchainTxo.element)
  return element_.Mutable(index);
}
inline void StorageBlockchainTxo::set_element(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:opentxs.proto.StorageBlockchainTxo.element)
  element_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void StorageBlockchainTxo::set_element(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:opentxs.proto.StorageBlockchainTxo.element)
  element_.Mutable(index)->assign(std::move(value));
}
#endif
inline void StorageBlockchainTxo::set_element(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  element_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opentxs.proto.StorageBlockchainTxo.element)
}
inline void StorageBlockchainTxo::set_element(int index, const void* value, size_t size) {
  element_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.StorageBlockchainTxo.element)
}
inline ::std::string* StorageBlockchainTxo::add_element() {
  // @@protoc_insertion_point(field_add_mutable:opentxs.proto.StorageBlockchainTxo.element)
  return element_.Add();
}
inline void StorageBlockchainTxo::add_element(const ::std::string& value) {
  element_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:opentxs.proto.StorageBlockchainTxo.element)
}
#if LANG_CXX11
inline void StorageBlockchainTxo::add_element(::std::string&& value) {
  element_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:opentxs.proto.StorageBlockchainTxo.element)
}
#endif
inline void StorageBlockchainTxo::add_element(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  element_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opentxs.proto.StorageBlockchainTxo.element)
}
inline void StorageBlockchainTxo::add_element(const void* value, size_t size) {
  element_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opentxs.proto.StorageBlockchainTxo.element)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StorageBlockchainTxo::element() const {
  // @@protoc_insertion_point(field_list:opentxs.proto.StorageBlockchainTxo.element)
  return element_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StorageBlockchainTxo::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:opentxs.proto.StorageBlockchainTxo.element)
  return &element_;
}

// repeated string txid = 5;
inline int StorageBlockchainTxo::txid_size() const {
  return txid_.size();
}
inline void StorageBlockchainTxo::clear_txid() {
  txid_.Clear();
}
inline const ::std::string& StorageBlockchainTxo::txid(int index) const {
  // @@protoc_insertion_point(field_get:opentxs.proto.StorageBlockchainTxo.txid)
  return txid_.Get(index);
}
inline ::std::string* StorageBlockchainTxo::mutable_txid(int index) {
  // @@protoc_insertion_point(field_mutable:opentxs.proto.StorageBlockchainTxo.txid)
  return txid_.Mutable(index);
}
inline void StorageBlockchainTxo::set_txid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:opentxs.proto.StorageBlockchainTxo.txid)
  txid_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void StorageBlockchainTxo::set_txid(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:opentxs.proto.StorageBlockchainTxo.txid)
  txid_.Mutable(index)->assign(std::move(value));
}
#endif
inline void StorageBlockchainTxo::set_txid(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  txid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opentxs.proto.StorageBlockchainTxo.txid)
}
inline void StorageBlockchainTxo::set_txid(int index, const char* value, size_t size) {
  txid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.StorageBlockchainTxo.txid)
}
inline ::std::string* StorageBlockchainTxo::add_txid() {
  // @@protoc_insertion_point(field_add_mutable:opentxs.proto.StorageBlockchainTxo.txid)
  return txid_.Add();
}
inline void StorageBlockchainTxo::add_txid(const ::std::string& value) {
  txid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:opentxs.proto.StorageBlockchainTxo.txid)
}
#if LANG_CXX11
inline void StorageBlockchainTxo::add_txid(::std::string&& value) {
  txid_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:opentxs.proto.StorageBlockchainTxo.txid)
}
#endif
inline void StorageBlockchainTxo::add_txid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  txid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opentxs.proto.StorageBlockchainTxo.txid)
}
inline void StorageBlockchainTxo::add_txid(const char* value, size_t size) {
  txid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opentxs.proto.StorageBlockchainTxo.txid)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StorageBlockchainTxo::txid() const {
  // @@protoc_insertion_point(field_list:opentxs.proto.StorageBlockchainTxo.txid)
  return txid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StorageBlockchainTxo::mutable_txid() {
  // @@protoc_insertion_point(field_mutable_list:opentxs.proto.StorageBlockchainTxo.txid)
  return &txid_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace opentxs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_StorageBlockchainTxo_2eproto__INCLUDED
