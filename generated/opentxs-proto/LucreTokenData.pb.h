// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LucreTokenData.proto

#ifndef PROTOBUF_LucreTokenData_2eproto__INCLUDED
#define PROTOBUF_LucreTokenData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "Ciphertext.pb.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace protobuf_LucreTokenData_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsLucreTokenDataImpl();
void InitDefaultsLucreTokenData();
inline void InitDefaults() {
  InitDefaultsLucreTokenData();
}
}  // namespace protobuf_LucreTokenData_2eproto
namespace opentxs {
namespace proto {
class LucreTokenData;
class LucreTokenDataDefaultTypeInternal;
extern LucreTokenDataDefaultTypeInternal _LucreTokenData_default_instance_;
}  // namespace proto
}  // namespace opentxs
namespace opentxs {
namespace proto {

// ===================================================================

class LucreTokenData : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:opentxs.proto.LucreTokenData) */ {
 public:
  LucreTokenData();
  virtual ~LucreTokenData();

  LucreTokenData(const LucreTokenData& from);

  inline LucreTokenData& operator=(const LucreTokenData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LucreTokenData(LucreTokenData&& from) noexcept
    : LucreTokenData() {
    *this = ::std::move(from);
  }

  inline LucreTokenData& operator=(LucreTokenData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const LucreTokenData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LucreTokenData* internal_default_instance() {
    return reinterpret_cast<const LucreTokenData*>(
               &_LucreTokenData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(LucreTokenData* other);
  friend void swap(LucreTokenData& a, LucreTokenData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LucreTokenData* New() const PROTOBUF_FINAL { return New(NULL); }

  LucreTokenData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const LucreTokenData& from);
  void MergeFrom(const LucreTokenData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LucreTokenData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes signature = 4;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 4;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // optional .opentxs.proto.Ciphertext privateprototoken = 2;
  bool has_privateprototoken() const;
  void clear_privateprototoken();
  static const int kPrivateprototokenFieldNumber = 2;
  const ::opentxs::proto::Ciphertext& privateprototoken() const;
  ::opentxs::proto::Ciphertext* release_privateprototoken();
  ::opentxs::proto::Ciphertext* mutable_privateprototoken();
  void set_allocated_privateprototoken(::opentxs::proto::Ciphertext* privateprototoken);

  // optional .opentxs.proto.Ciphertext publicprototoken = 3;
  bool has_publicprototoken() const;
  void clear_publicprototoken();
  static const int kPublicprototokenFieldNumber = 3;
  const ::opentxs::proto::Ciphertext& publicprototoken() const;
  ::opentxs::proto::Ciphertext* release_publicprototoken();
  ::opentxs::proto::Ciphertext* mutable_publicprototoken();
  void set_allocated_publicprototoken(::opentxs::proto::Ciphertext* publicprototoken);

  // optional .opentxs.proto.Ciphertext spendable = 5;
  bool has_spendable() const;
  void clear_spendable();
  static const int kSpendableFieldNumber = 5;
  const ::opentxs::proto::Ciphertext& spendable() const;
  ::opentxs::proto::Ciphertext* release_spendable();
  ::opentxs::proto::Ciphertext* mutable_spendable();
  void set_allocated_spendable(::opentxs::proto::Ciphertext* spendable);

  // optional uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:opentxs.proto.LucreTokenData)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_privateprototoken();
  void clear_has_privateprototoken();
  void set_has_publicprototoken();
  void clear_has_publicprototoken();
  void set_has_signature();
  void clear_has_signature();
  void set_has_spendable();
  void clear_has_spendable();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  ::opentxs::proto::Ciphertext* privateprototoken_;
  ::opentxs::proto::Ciphertext* publicprototoken_;
  ::opentxs::proto::Ciphertext* spendable_;
  ::google::protobuf::uint32 version_;
  friend struct ::protobuf_LucreTokenData_2eproto::TableStruct;
  friend void ::protobuf_LucreTokenData_2eproto::InitDefaultsLucreTokenDataImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LucreTokenData

// optional uint32 version = 1;
inline bool LucreTokenData::has_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LucreTokenData::set_has_version() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LucreTokenData::clear_has_version() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LucreTokenData::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 LucreTokenData::version() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.LucreTokenData.version)
  return version_;
}
inline void LucreTokenData::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.LucreTokenData.version)
}

// optional .opentxs.proto.Ciphertext privateprototoken = 2;
inline bool LucreTokenData::has_privateprototoken() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LucreTokenData::set_has_privateprototoken() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LucreTokenData::clear_has_privateprototoken() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::opentxs::proto::Ciphertext& LucreTokenData::privateprototoken() const {
  const ::opentxs::proto::Ciphertext* p = privateprototoken_;
  // @@protoc_insertion_point(field_get:opentxs.proto.LucreTokenData.privateprototoken)
  return p != NULL ? *p : *reinterpret_cast<const ::opentxs::proto::Ciphertext*>(
      &::opentxs::proto::_Ciphertext_default_instance_);
}
inline ::opentxs::proto::Ciphertext* LucreTokenData::release_privateprototoken() {
  // @@protoc_insertion_point(field_release:opentxs.proto.LucreTokenData.privateprototoken)
  clear_has_privateprototoken();
  ::opentxs::proto::Ciphertext* temp = privateprototoken_;
  privateprototoken_ = NULL;
  return temp;
}
inline ::opentxs::proto::Ciphertext* LucreTokenData::mutable_privateprototoken() {
  set_has_privateprototoken();
  if (privateprototoken_ == NULL) {
    privateprototoken_ = new ::opentxs::proto::Ciphertext;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.proto.LucreTokenData.privateprototoken)
  return privateprototoken_;
}
inline void LucreTokenData::set_allocated_privateprototoken(::opentxs::proto::Ciphertext* privateprototoken) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(privateprototoken_);
  }
  if (privateprototoken) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      privateprototoken = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, privateprototoken, submessage_arena);
    }
    set_has_privateprototoken();
  } else {
    clear_has_privateprototoken();
  }
  privateprototoken_ = privateprototoken;
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.LucreTokenData.privateprototoken)
}

// optional .opentxs.proto.Ciphertext publicprototoken = 3;
inline bool LucreTokenData::has_publicprototoken() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LucreTokenData::set_has_publicprototoken() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LucreTokenData::clear_has_publicprototoken() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::opentxs::proto::Ciphertext& LucreTokenData::publicprototoken() const {
  const ::opentxs::proto::Ciphertext* p = publicprototoken_;
  // @@protoc_insertion_point(field_get:opentxs.proto.LucreTokenData.publicprototoken)
  return p != NULL ? *p : *reinterpret_cast<const ::opentxs::proto::Ciphertext*>(
      &::opentxs::proto::_Ciphertext_default_instance_);
}
inline ::opentxs::proto::Ciphertext* LucreTokenData::release_publicprototoken() {
  // @@protoc_insertion_point(field_release:opentxs.proto.LucreTokenData.publicprototoken)
  clear_has_publicprototoken();
  ::opentxs::proto::Ciphertext* temp = publicprototoken_;
  publicprototoken_ = NULL;
  return temp;
}
inline ::opentxs::proto::Ciphertext* LucreTokenData::mutable_publicprototoken() {
  set_has_publicprototoken();
  if (publicprototoken_ == NULL) {
    publicprototoken_ = new ::opentxs::proto::Ciphertext;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.proto.LucreTokenData.publicprototoken)
  return publicprototoken_;
}
inline void LucreTokenData::set_allocated_publicprototoken(::opentxs::proto::Ciphertext* publicprototoken) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(publicprototoken_);
  }
  if (publicprototoken) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      publicprototoken = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, publicprototoken, submessage_arena);
    }
    set_has_publicprototoken();
  } else {
    clear_has_publicprototoken();
  }
  publicprototoken_ = publicprototoken;
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.LucreTokenData.publicprototoken)
}

// optional bytes signature = 4;
inline bool LucreTokenData::has_signature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LucreTokenData::set_has_signature() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LucreTokenData::clear_has_signature() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LucreTokenData::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_signature();
}
inline const ::std::string& LucreTokenData::signature() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.LucreTokenData.signature)
  return signature_.GetNoArena();
}
inline void LucreTokenData::set_signature(const ::std::string& value) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.LucreTokenData.signature)
}
#if LANG_CXX11
inline void LucreTokenData::set_signature(::std::string&& value) {
  set_has_signature();
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.LucreTokenData.signature)
}
#endif
inline void LucreTokenData::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.LucreTokenData.signature)
}
inline void LucreTokenData::set_signature(const void* value, size_t size) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.LucreTokenData.signature)
}
inline ::std::string* LucreTokenData::mutable_signature() {
  set_has_signature();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.LucreTokenData.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LucreTokenData::release_signature() {
  // @@protoc_insertion_point(field_release:opentxs.proto.LucreTokenData.signature)
  clear_has_signature();
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LucreTokenData::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.LucreTokenData.signature)
}

// optional .opentxs.proto.Ciphertext spendable = 5;
inline bool LucreTokenData::has_spendable() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LucreTokenData::set_has_spendable() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LucreTokenData::clear_has_spendable() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::opentxs::proto::Ciphertext& LucreTokenData::spendable() const {
  const ::opentxs::proto::Ciphertext* p = spendable_;
  // @@protoc_insertion_point(field_get:opentxs.proto.LucreTokenData.spendable)
  return p != NULL ? *p : *reinterpret_cast<const ::opentxs::proto::Ciphertext*>(
      &::opentxs::proto::_Ciphertext_default_instance_);
}
inline ::opentxs::proto::Ciphertext* LucreTokenData::release_spendable() {
  // @@protoc_insertion_point(field_release:opentxs.proto.LucreTokenData.spendable)
  clear_has_spendable();
  ::opentxs::proto::Ciphertext* temp = spendable_;
  spendable_ = NULL;
  return temp;
}
inline ::opentxs::proto::Ciphertext* LucreTokenData::mutable_spendable() {
  set_has_spendable();
  if (spendable_ == NULL) {
    spendable_ = new ::opentxs::proto::Ciphertext;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.proto.LucreTokenData.spendable)
  return spendable_;
}
inline void LucreTokenData::set_allocated_spendable(::opentxs::proto::Ciphertext* spendable) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(spendable_);
  }
  if (spendable) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      spendable = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, spendable, submessage_arena);
    }
    set_has_spendable();
  } else {
    clear_has_spendable();
  }
  spendable_ = spendable;
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.LucreTokenData.spendable)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace opentxs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_LucreTokenData_2eproto__INCLUDED
