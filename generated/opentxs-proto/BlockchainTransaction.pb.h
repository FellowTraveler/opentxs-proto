// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BlockchainTransaction.proto

#ifndef PROTOBUF_BlockchainTransaction_2eproto__INCLUDED
#define PROTOBUF_BlockchainTransaction_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "BlockchainTransactionInput.pb.h"  // IWYU pragma: export
#include "BlockchainTransactionOutput.pb.h"  // IWYU pragma: export
#include "ContactEnums.pb.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace protobuf_BlockchainTransaction_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsBlockchainTransactionImpl();
void InitDefaultsBlockchainTransaction();
inline void InitDefaults() {
  InitDefaultsBlockchainTransaction();
}
}  // namespace protobuf_BlockchainTransaction_2eproto
namespace opentxs {
namespace proto {
class BlockchainTransaction;
class BlockchainTransactionDefaultTypeInternal;
extern BlockchainTransactionDefaultTypeInternal _BlockchainTransaction_default_instance_;
}  // namespace proto
}  // namespace opentxs
namespace opentxs {
namespace proto {

// ===================================================================

class BlockchainTransaction : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:opentxs.proto.BlockchainTransaction) */ {
 public:
  BlockchainTransaction();
  virtual ~BlockchainTransaction();

  BlockchainTransaction(const BlockchainTransaction& from);

  inline BlockchainTransaction& operator=(const BlockchainTransaction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BlockchainTransaction(BlockchainTransaction&& from) noexcept
    : BlockchainTransaction() {
    *this = ::std::move(from);
  }

  inline BlockchainTransaction& operator=(BlockchainTransaction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BlockchainTransaction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockchainTransaction* internal_default_instance() {
    return reinterpret_cast<const BlockchainTransaction*>(
               &_BlockchainTransaction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(BlockchainTransaction* other);
  friend void swap(BlockchainTransaction& a, BlockchainTransaction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BlockchainTransaction* New() const PROTOBUF_FINAL { return New(NULL); }

  BlockchainTransaction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const BlockchainTransaction& from);
  void MergeFrom(const BlockchainTransaction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BlockchainTransaction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .opentxs.proto.BlockchainTransactionInput input = 7;
  int input_size() const;
  void clear_input();
  static const int kInputFieldNumber = 7;
  const ::opentxs::proto::BlockchainTransactionInput& input(int index) const;
  ::opentxs::proto::BlockchainTransactionInput* mutable_input(int index);
  ::opentxs::proto::BlockchainTransactionInput* add_input();
  ::google::protobuf::RepeatedPtrField< ::opentxs::proto::BlockchainTransactionInput >*
      mutable_input();
  const ::google::protobuf::RepeatedPtrField< ::opentxs::proto::BlockchainTransactionInput >&
      input() const;

  // repeated .opentxs.proto.BlockchainTransactionOutput output = 8;
  int output_size() const;
  void clear_output();
  static const int kOutputFieldNumber = 8;
  const ::opentxs::proto::BlockchainTransactionOutput& output(int index) const;
  ::opentxs::proto::BlockchainTransactionOutput* mutable_output(int index);
  ::opentxs::proto::BlockchainTransactionOutput* add_output();
  ::google::protobuf::RepeatedPtrField< ::opentxs::proto::BlockchainTransactionOutput >*
      mutable_output();
  const ::google::protobuf::RepeatedPtrField< ::opentxs::proto::BlockchainTransactionOutput >&
      output() const;

  // repeated string conflicts = 14;
  int conflicts_size() const;
  void clear_conflicts();
  static const int kConflictsFieldNumber = 14;
  const ::std::string& conflicts(int index) const;
  ::std::string* mutable_conflicts(int index);
  void set_conflicts(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_conflicts(int index, ::std::string&& value);
  #endif
  void set_conflicts(int index, const char* value);
  void set_conflicts(int index, const char* value, size_t size);
  ::std::string* add_conflicts();
  void add_conflicts(const ::std::string& value);
  #if LANG_CXX11
  void add_conflicts(::std::string&& value);
  #endif
  void add_conflicts(const char* value);
  void add_conflicts(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& conflicts() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_conflicts();

  // optional string txid = 3;
  bool has_txid() const;
  void clear_txid();
  static const int kTxidFieldNumber = 3;
  const ::std::string& txid() const;
  void set_txid(const ::std::string& value);
  #if LANG_CXX11
  void set_txid(::std::string&& value);
  #endif
  void set_txid(const char* value);
  void set_txid(const char* value, size_t size);
  ::std::string* mutable_txid();
  ::std::string* release_txid();
  void set_allocated_txid(::std::string* txid);

  // optional bytes serialized = 6;
  bool has_serialized() const;
  void clear_serialized();
  static const int kSerializedFieldNumber = 6;
  const ::std::string& serialized() const;
  void set_serialized(const ::std::string& value);
  #if LANG_CXX11
  void set_serialized(::std::string&& value);
  #endif
  void set_serialized(const char* value);
  void set_serialized(const void* value, size_t size);
  ::std::string* mutable_serialized();
  ::std::string* release_serialized();
  void set_allocated_serialized(::std::string* serialized);

  // optional string blockhash = 10;
  bool has_blockhash() const;
  void clear_blockhash();
  static const int kBlockhashFieldNumber = 10;
  const ::std::string& blockhash() const;
  void set_blockhash(const ::std::string& value);
  #if LANG_CXX11
  void set_blockhash(::std::string&& value);
  #endif
  void set_blockhash(const char* value);
  void set_blockhash(const char* value, size_t size);
  ::std::string* mutable_blockhash();
  ::std::string* release_blockhash();
  void set_allocated_blockhash(::std::string* blockhash);

  // optional string memo = 15;
  bool has_memo() const;
  void clear_memo();
  static const int kMemoFieldNumber = 15;
  const ::std::string& memo() const;
  void set_memo(const ::std::string& value);
  #if LANG_CXX11
  void set_memo(::std::string&& value);
  #endif
  void set_memo(const char* value);
  void set_memo(const char* value, size_t size);
  ::std::string* mutable_memo();
  ::std::string* release_memo();
  void set_allocated_memo(::std::string* memo);

  // optional uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // optional .opentxs.proto.ContactItemType chain = 2;
  bool has_chain() const;
  void clear_chain();
  static const int kChainFieldNumber = 2;
  ::opentxs::proto::ContactItemType chain() const;
  void set_chain(::opentxs::proto::ContactItemType value);

  // optional uint32 txversion = 4;
  bool has_txversion() const;
  void clear_txversion();
  static const int kTxversionFieldNumber = 4;
  ::google::protobuf::uint32 txversion() const;
  void set_txversion(::google::protobuf::uint32 value);

  // optional uint32 locktime = 5;
  bool has_locktime() const;
  void clear_locktime();
  static const int kLocktimeFieldNumber = 5;
  ::google::protobuf::uint32 locktime() const;
  void set_locktime(::google::protobuf::uint32 value);

  // optional uint32 confirmations = 9;
  bool has_confirmations() const;
  void clear_confirmations();
  static const int kConfirmationsFieldNumber = 9;
  ::google::protobuf::uint32 confirmations() const;
  void set_confirmations(::google::protobuf::uint32 value);

  // optional uint32 blockindex = 11;
  bool has_blockindex() const;
  void clear_blockindex();
  static const int kBlockindexFieldNumber = 11;
  ::google::protobuf::uint32 blockindex() const;
  void set_blockindex(::google::protobuf::uint32 value);

  // optional uint64 fee = 12;
  bool has_fee() const;
  void clear_fee();
  static const int kFeeFieldNumber = 12;
  ::google::protobuf::uint64 fee() const;
  void set_fee(::google::protobuf::uint64 value);

  // optional int64 time = 13;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 13;
  ::google::protobuf::int64 time() const;
  void set_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:opentxs.proto.BlockchainTransaction)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_chain();
  void clear_has_chain();
  void set_has_txid();
  void clear_has_txid();
  void set_has_txversion();
  void clear_has_txversion();
  void set_has_locktime();
  void clear_has_locktime();
  void set_has_serialized();
  void clear_has_serialized();
  void set_has_confirmations();
  void clear_has_confirmations();
  void set_has_blockhash();
  void clear_has_blockhash();
  void set_has_blockindex();
  void clear_has_blockindex();
  void set_has_fee();
  void clear_has_fee();
  void set_has_time();
  void clear_has_time();
  void set_has_memo();
  void clear_has_memo();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::opentxs::proto::BlockchainTransactionInput > input_;
  ::google::protobuf::RepeatedPtrField< ::opentxs::proto::BlockchainTransactionOutput > output_;
  ::google::protobuf::RepeatedPtrField< ::std::string> conflicts_;
  ::google::protobuf::internal::ArenaStringPtr txid_;
  ::google::protobuf::internal::ArenaStringPtr serialized_;
  ::google::protobuf::internal::ArenaStringPtr blockhash_;
  ::google::protobuf::internal::ArenaStringPtr memo_;
  ::google::protobuf::uint32 version_;
  int chain_;
  ::google::protobuf::uint32 txversion_;
  ::google::protobuf::uint32 locktime_;
  ::google::protobuf::uint32 confirmations_;
  ::google::protobuf::uint32 blockindex_;
  ::google::protobuf::uint64 fee_;
  ::google::protobuf::int64 time_;
  friend struct ::protobuf_BlockchainTransaction_2eproto::TableStruct;
  friend void ::protobuf_BlockchainTransaction_2eproto::InitDefaultsBlockchainTransactionImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BlockchainTransaction

// optional uint32 version = 1;
inline bool BlockchainTransaction::has_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlockchainTransaction::set_has_version() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BlockchainTransaction::clear_has_version() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BlockchainTransaction::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 BlockchainTransaction::version() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.BlockchainTransaction.version)
  return version_;
}
inline void BlockchainTransaction::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.BlockchainTransaction.version)
}

// optional .opentxs.proto.ContactItemType chain = 2;
inline bool BlockchainTransaction::has_chain() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BlockchainTransaction::set_has_chain() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BlockchainTransaction::clear_has_chain() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BlockchainTransaction::clear_chain() {
  chain_ = 0;
  clear_has_chain();
}
inline ::opentxs::proto::ContactItemType BlockchainTransaction::chain() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.BlockchainTransaction.chain)
  return static_cast< ::opentxs::proto::ContactItemType >(chain_);
}
inline void BlockchainTransaction::set_chain(::opentxs::proto::ContactItemType value) {
  assert(::opentxs::proto::ContactItemType_IsValid(value));
  set_has_chain();
  chain_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.BlockchainTransaction.chain)
}

// optional string txid = 3;
inline bool BlockchainTransaction::has_txid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockchainTransaction::set_has_txid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlockchainTransaction::clear_has_txid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlockchainTransaction::clear_txid() {
  txid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_txid();
}
inline const ::std::string& BlockchainTransaction::txid() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.BlockchainTransaction.txid)
  return txid_.GetNoArena();
}
inline void BlockchainTransaction::set_txid(const ::std::string& value) {
  set_has_txid();
  txid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.BlockchainTransaction.txid)
}
#if LANG_CXX11
inline void BlockchainTransaction::set_txid(::std::string&& value) {
  set_has_txid();
  txid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.BlockchainTransaction.txid)
}
#endif
inline void BlockchainTransaction::set_txid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_txid();
  txid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.BlockchainTransaction.txid)
}
inline void BlockchainTransaction::set_txid(const char* value, size_t size) {
  set_has_txid();
  txid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.BlockchainTransaction.txid)
}
inline ::std::string* BlockchainTransaction::mutable_txid() {
  set_has_txid();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.BlockchainTransaction.txid)
  return txid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockchainTransaction::release_txid() {
  // @@protoc_insertion_point(field_release:opentxs.proto.BlockchainTransaction.txid)
  clear_has_txid();
  return txid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockchainTransaction::set_allocated_txid(::std::string* txid) {
  if (txid != NULL) {
    set_has_txid();
  } else {
    clear_has_txid();
  }
  txid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txid);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.BlockchainTransaction.txid)
}

// optional uint32 txversion = 4;
inline bool BlockchainTransaction::has_txversion() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BlockchainTransaction::set_has_txversion() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BlockchainTransaction::clear_has_txversion() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BlockchainTransaction::clear_txversion() {
  txversion_ = 0u;
  clear_has_txversion();
}
inline ::google::protobuf::uint32 BlockchainTransaction::txversion() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.BlockchainTransaction.txversion)
  return txversion_;
}
inline void BlockchainTransaction::set_txversion(::google::protobuf::uint32 value) {
  set_has_txversion();
  txversion_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.BlockchainTransaction.txversion)
}

// optional uint32 locktime = 5;
inline bool BlockchainTransaction::has_locktime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BlockchainTransaction::set_has_locktime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BlockchainTransaction::clear_has_locktime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BlockchainTransaction::clear_locktime() {
  locktime_ = 0u;
  clear_has_locktime();
}
inline ::google::protobuf::uint32 BlockchainTransaction::locktime() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.BlockchainTransaction.locktime)
  return locktime_;
}
inline void BlockchainTransaction::set_locktime(::google::protobuf::uint32 value) {
  set_has_locktime();
  locktime_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.BlockchainTransaction.locktime)
}

// optional bytes serialized = 6;
inline bool BlockchainTransaction::has_serialized() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlockchainTransaction::set_has_serialized() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlockchainTransaction::clear_has_serialized() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlockchainTransaction::clear_serialized() {
  serialized_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serialized();
}
inline const ::std::string& BlockchainTransaction::serialized() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.BlockchainTransaction.serialized)
  return serialized_.GetNoArena();
}
inline void BlockchainTransaction::set_serialized(const ::std::string& value) {
  set_has_serialized();
  serialized_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.BlockchainTransaction.serialized)
}
#if LANG_CXX11
inline void BlockchainTransaction::set_serialized(::std::string&& value) {
  set_has_serialized();
  serialized_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.BlockchainTransaction.serialized)
}
#endif
inline void BlockchainTransaction::set_serialized(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_serialized();
  serialized_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.BlockchainTransaction.serialized)
}
inline void BlockchainTransaction::set_serialized(const void* value, size_t size) {
  set_has_serialized();
  serialized_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.BlockchainTransaction.serialized)
}
inline ::std::string* BlockchainTransaction::mutable_serialized() {
  set_has_serialized();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.BlockchainTransaction.serialized)
  return serialized_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockchainTransaction::release_serialized() {
  // @@protoc_insertion_point(field_release:opentxs.proto.BlockchainTransaction.serialized)
  clear_has_serialized();
  return serialized_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockchainTransaction::set_allocated_serialized(::std::string* serialized) {
  if (serialized != NULL) {
    set_has_serialized();
  } else {
    clear_has_serialized();
  }
  serialized_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serialized);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.BlockchainTransaction.serialized)
}

// repeated .opentxs.proto.BlockchainTransactionInput input = 7;
inline int BlockchainTransaction::input_size() const {
  return input_.size();
}
inline const ::opentxs::proto::BlockchainTransactionInput& BlockchainTransaction::input(int index) const {
  // @@protoc_insertion_point(field_get:opentxs.proto.BlockchainTransaction.input)
  return input_.Get(index);
}
inline ::opentxs::proto::BlockchainTransactionInput* BlockchainTransaction::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:opentxs.proto.BlockchainTransaction.input)
  return input_.Mutable(index);
}
inline ::opentxs::proto::BlockchainTransactionInput* BlockchainTransaction::add_input() {
  // @@protoc_insertion_point(field_add:opentxs.proto.BlockchainTransaction.input)
  return input_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::opentxs::proto::BlockchainTransactionInput >*
BlockchainTransaction::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:opentxs.proto.BlockchainTransaction.input)
  return &input_;
}
inline const ::google::protobuf::RepeatedPtrField< ::opentxs::proto::BlockchainTransactionInput >&
BlockchainTransaction::input() const {
  // @@protoc_insertion_point(field_list:opentxs.proto.BlockchainTransaction.input)
  return input_;
}

// repeated .opentxs.proto.BlockchainTransactionOutput output = 8;
inline int BlockchainTransaction::output_size() const {
  return output_.size();
}
inline const ::opentxs::proto::BlockchainTransactionOutput& BlockchainTransaction::output(int index) const {
  // @@protoc_insertion_point(field_get:opentxs.proto.BlockchainTransaction.output)
  return output_.Get(index);
}
inline ::opentxs::proto::BlockchainTransactionOutput* BlockchainTransaction::mutable_output(int index) {
  // @@protoc_insertion_point(field_mutable:opentxs.proto.BlockchainTransaction.output)
  return output_.Mutable(index);
}
inline ::opentxs::proto::BlockchainTransactionOutput* BlockchainTransaction::add_output() {
  // @@protoc_insertion_point(field_add:opentxs.proto.BlockchainTransaction.output)
  return output_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::opentxs::proto::BlockchainTransactionOutput >*
BlockchainTransaction::mutable_output() {
  // @@protoc_insertion_point(field_mutable_list:opentxs.proto.BlockchainTransaction.output)
  return &output_;
}
inline const ::google::protobuf::RepeatedPtrField< ::opentxs::proto::BlockchainTransactionOutput >&
BlockchainTransaction::output() const {
  // @@protoc_insertion_point(field_list:opentxs.proto.BlockchainTransaction.output)
  return output_;
}

// optional uint32 confirmations = 9;
inline bool BlockchainTransaction::has_confirmations() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BlockchainTransaction::set_has_confirmations() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BlockchainTransaction::clear_has_confirmations() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BlockchainTransaction::clear_confirmations() {
  confirmations_ = 0u;
  clear_has_confirmations();
}
inline ::google::protobuf::uint32 BlockchainTransaction::confirmations() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.BlockchainTransaction.confirmations)
  return confirmations_;
}
inline void BlockchainTransaction::set_confirmations(::google::protobuf::uint32 value) {
  set_has_confirmations();
  confirmations_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.BlockchainTransaction.confirmations)
}

// optional string blockhash = 10;
inline bool BlockchainTransaction::has_blockhash() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlockchainTransaction::set_has_blockhash() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlockchainTransaction::clear_has_blockhash() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlockchainTransaction::clear_blockhash() {
  blockhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_blockhash();
}
inline const ::std::string& BlockchainTransaction::blockhash() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.BlockchainTransaction.blockhash)
  return blockhash_.GetNoArena();
}
inline void BlockchainTransaction::set_blockhash(const ::std::string& value) {
  set_has_blockhash();
  blockhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.BlockchainTransaction.blockhash)
}
#if LANG_CXX11
inline void BlockchainTransaction::set_blockhash(::std::string&& value) {
  set_has_blockhash();
  blockhash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.BlockchainTransaction.blockhash)
}
#endif
inline void BlockchainTransaction::set_blockhash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_blockhash();
  blockhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.BlockchainTransaction.blockhash)
}
inline void BlockchainTransaction::set_blockhash(const char* value, size_t size) {
  set_has_blockhash();
  blockhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.BlockchainTransaction.blockhash)
}
inline ::std::string* BlockchainTransaction::mutable_blockhash() {
  set_has_blockhash();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.BlockchainTransaction.blockhash)
  return blockhash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockchainTransaction::release_blockhash() {
  // @@protoc_insertion_point(field_release:opentxs.proto.BlockchainTransaction.blockhash)
  clear_has_blockhash();
  return blockhash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockchainTransaction::set_allocated_blockhash(::std::string* blockhash) {
  if (blockhash != NULL) {
    set_has_blockhash();
  } else {
    clear_has_blockhash();
  }
  blockhash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), blockhash);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.BlockchainTransaction.blockhash)
}

// optional uint32 blockindex = 11;
inline bool BlockchainTransaction::has_blockindex() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BlockchainTransaction::set_has_blockindex() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BlockchainTransaction::clear_has_blockindex() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BlockchainTransaction::clear_blockindex() {
  blockindex_ = 0u;
  clear_has_blockindex();
}
inline ::google::protobuf::uint32 BlockchainTransaction::blockindex() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.BlockchainTransaction.blockindex)
  return blockindex_;
}
inline void BlockchainTransaction::set_blockindex(::google::protobuf::uint32 value) {
  set_has_blockindex();
  blockindex_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.BlockchainTransaction.blockindex)
}

// optional uint64 fee = 12;
inline bool BlockchainTransaction::has_fee() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BlockchainTransaction::set_has_fee() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BlockchainTransaction::clear_has_fee() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BlockchainTransaction::clear_fee() {
  fee_ = GOOGLE_ULONGLONG(0);
  clear_has_fee();
}
inline ::google::protobuf::uint64 BlockchainTransaction::fee() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.BlockchainTransaction.fee)
  return fee_;
}
inline void BlockchainTransaction::set_fee(::google::protobuf::uint64 value) {
  set_has_fee();
  fee_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.BlockchainTransaction.fee)
}

// optional int64 time = 13;
inline bool BlockchainTransaction::has_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BlockchainTransaction::set_has_time() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BlockchainTransaction::clear_has_time() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BlockchainTransaction::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 BlockchainTransaction::time() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.BlockchainTransaction.time)
  return time_;
}
inline void BlockchainTransaction::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.BlockchainTransaction.time)
}

// repeated string conflicts = 14;
inline int BlockchainTransaction::conflicts_size() const {
  return conflicts_.size();
}
inline void BlockchainTransaction::clear_conflicts() {
  conflicts_.Clear();
}
inline const ::std::string& BlockchainTransaction::conflicts(int index) const {
  // @@protoc_insertion_point(field_get:opentxs.proto.BlockchainTransaction.conflicts)
  return conflicts_.Get(index);
}
inline ::std::string* BlockchainTransaction::mutable_conflicts(int index) {
  // @@protoc_insertion_point(field_mutable:opentxs.proto.BlockchainTransaction.conflicts)
  return conflicts_.Mutable(index);
}
inline void BlockchainTransaction::set_conflicts(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:opentxs.proto.BlockchainTransaction.conflicts)
  conflicts_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void BlockchainTransaction::set_conflicts(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:opentxs.proto.BlockchainTransaction.conflicts)
  conflicts_.Mutable(index)->assign(std::move(value));
}
#endif
inline void BlockchainTransaction::set_conflicts(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  conflicts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opentxs.proto.BlockchainTransaction.conflicts)
}
inline void BlockchainTransaction::set_conflicts(int index, const char* value, size_t size) {
  conflicts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.BlockchainTransaction.conflicts)
}
inline ::std::string* BlockchainTransaction::add_conflicts() {
  // @@protoc_insertion_point(field_add_mutable:opentxs.proto.BlockchainTransaction.conflicts)
  return conflicts_.Add();
}
inline void BlockchainTransaction::add_conflicts(const ::std::string& value) {
  conflicts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:opentxs.proto.BlockchainTransaction.conflicts)
}
#if LANG_CXX11
inline void BlockchainTransaction::add_conflicts(::std::string&& value) {
  conflicts_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:opentxs.proto.BlockchainTransaction.conflicts)
}
#endif
inline void BlockchainTransaction::add_conflicts(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  conflicts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opentxs.proto.BlockchainTransaction.conflicts)
}
inline void BlockchainTransaction::add_conflicts(const char* value, size_t size) {
  conflicts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opentxs.proto.BlockchainTransaction.conflicts)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BlockchainTransaction::conflicts() const {
  // @@protoc_insertion_point(field_list:opentxs.proto.BlockchainTransaction.conflicts)
  return conflicts_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BlockchainTransaction::mutable_conflicts() {
  // @@protoc_insertion_point(field_mutable_list:opentxs.proto.BlockchainTransaction.conflicts)
  return &conflicts_;
}

// optional string memo = 15;
inline bool BlockchainTransaction::has_memo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlockchainTransaction::set_has_memo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BlockchainTransaction::clear_has_memo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BlockchainTransaction::clear_memo() {
  memo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_memo();
}
inline const ::std::string& BlockchainTransaction::memo() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.BlockchainTransaction.memo)
  return memo_.GetNoArena();
}
inline void BlockchainTransaction::set_memo(const ::std::string& value) {
  set_has_memo();
  memo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.BlockchainTransaction.memo)
}
#if LANG_CXX11
inline void BlockchainTransaction::set_memo(::std::string&& value) {
  set_has_memo();
  memo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.BlockchainTransaction.memo)
}
#endif
inline void BlockchainTransaction::set_memo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_memo();
  memo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.BlockchainTransaction.memo)
}
inline void BlockchainTransaction::set_memo(const char* value, size_t size) {
  set_has_memo();
  memo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.BlockchainTransaction.memo)
}
inline ::std::string* BlockchainTransaction::mutable_memo() {
  set_has_memo();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.BlockchainTransaction.memo)
  return memo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockchainTransaction::release_memo() {
  // @@protoc_insertion_point(field_release:opentxs.proto.BlockchainTransaction.memo)
  clear_has_memo();
  return memo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockchainTransaction::set_allocated_memo(::std::string* memo) {
  if (memo != NULL) {
    set_has_memo();
  } else {
    clear_has_memo();
  }
  memo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), memo);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.BlockchainTransaction.memo)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace opentxs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BlockchainTransaction_2eproto__INCLUDED
