// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerRequest.proto

#ifndef PROTOBUF_ServerRequest_2eproto__INCLUDED
#define PROTOBUF_ServerRequest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "CredentialIndex.pb.h"  // IWYU pragma: export
#include "OTXEnums.pb.h"  // IWYU pragma: export
#include "Signature.pb.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace protobuf_ServerRequest_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsServerRequestImpl();
void InitDefaultsServerRequest();
inline void InitDefaults() {
  InitDefaultsServerRequest();
}
}  // namespace protobuf_ServerRequest_2eproto
namespace opentxs {
namespace proto {
class ServerRequest;
class ServerRequestDefaultTypeInternal;
extern ServerRequestDefaultTypeInternal _ServerRequest_default_instance_;
}  // namespace proto
}  // namespace opentxs
namespace opentxs {
namespace proto {

// ===================================================================

class ServerRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:opentxs.proto.ServerRequest) */ {
 public:
  ServerRequest();
  virtual ~ServerRequest();

  ServerRequest(const ServerRequest& from);

  inline ServerRequest& operator=(const ServerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerRequest(ServerRequest&& from) noexcept
    : ServerRequest() {
    *this = ::std::move(from);
  }

  inline ServerRequest& operator=(ServerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ServerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerRequest* internal_default_instance() {
    return reinterpret_cast<const ServerRequest*>(
               &_ServerRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ServerRequest* other);
  friend void swap(ServerRequest& a, ServerRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ServerRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const ServerRequest& from);
  void MergeFrom(const ServerRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string nym = 4;
  bool has_nym() const;
  void clear_nym();
  static const int kNymFieldNumber = 4;
  const ::std::string& nym() const;
  void set_nym(const ::std::string& value);
  #if LANG_CXX11
  void set_nym(::std::string&& value);
  #endif
  void set_nym(const char* value);
  void set_nym(const char* value, size_t size);
  ::std::string* mutable_nym();
  ::std::string* release_nym();
  void set_allocated_nym(::std::string* nym);

  // optional string server = 5;
  bool has_server() const;
  void clear_server();
  static const int kServerFieldNumber = 5;
  const ::std::string& server() const;
  void set_server(const ::std::string& value);
  #if LANG_CXX11
  void set_server(::std::string&& value);
  #endif
  void set_server(const char* value);
  void set_server(const char* value, size_t size);
  ::std::string* mutable_server();
  ::std::string* release_server();
  void set_allocated_server(::std::string* server);

  // optional .opentxs.proto.CredentialIndex credentials = 14;
  bool has_credentials() const;
  void clear_credentials();
  static const int kCredentialsFieldNumber = 14;
  const ::opentxs::proto::CredentialIndex& credentials() const;
  ::opentxs::proto::CredentialIndex* release_credentials();
  ::opentxs::proto::CredentialIndex* mutable_credentials();
  void set_allocated_credentials(::opentxs::proto::CredentialIndex* credentials);

  // optional .opentxs.proto.Signature signature = 15;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 15;
  const ::opentxs::proto::Signature& signature() const;
  ::opentxs::proto::Signature* release_signature();
  ::opentxs::proto::Signature* mutable_signature();
  void set_allocated_signature(::opentxs::proto::Signature* signature);

  // optional uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // optional .opentxs.proto.ServerRequestType type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::opentxs::proto::ServerRequestType type() const;
  void set_type(::opentxs::proto::ServerRequestType value);

  // optional uint64 request = 6;
  bool has_request() const;
  void clear_request();
  static const int kRequestFieldNumber = 6;
  ::google::protobuf::uint64 request() const;
  void set_request(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:opentxs.proto.ServerRequest)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_id();
  void clear_has_id();
  void set_has_type();
  void clear_has_type();
  void set_has_nym();
  void clear_has_nym();
  void set_has_server();
  void clear_has_server();
  void set_has_request();
  void clear_has_request();
  void set_has_credentials();
  void clear_has_credentials();
  void set_has_signature();
  void clear_has_signature();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr nym_;
  ::google::protobuf::internal::ArenaStringPtr server_;
  ::opentxs::proto::CredentialIndex* credentials_;
  ::opentxs::proto::Signature* signature_;
  ::google::protobuf::uint32 version_;
  int type_;
  ::google::protobuf::uint64 request_;
  friend struct ::protobuf_ServerRequest_2eproto::TableStruct;
  friend void ::protobuf_ServerRequest_2eproto::InitDefaultsServerRequestImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServerRequest

// optional uint32 version = 1;
inline bool ServerRequest::has_version() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ServerRequest::set_has_version() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ServerRequest::clear_has_version() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ServerRequest::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 ServerRequest::version() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.ServerRequest.version)
  return version_;
}
inline void ServerRequest::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.ServerRequest.version)
}

// optional string id = 2;
inline bool ServerRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& ServerRequest::id() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.ServerRequest.id)
  return id_.GetNoArena();
}
inline void ServerRequest::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.ServerRequest.id)
}
#if LANG_CXX11
inline void ServerRequest::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.ServerRequest.id)
}
#endif
inline void ServerRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.ServerRequest.id)
}
inline void ServerRequest::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.ServerRequest.id)
}
inline ::std::string* ServerRequest::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.ServerRequest.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerRequest::release_id() {
  // @@protoc_insertion_point(field_release:opentxs.proto.ServerRequest.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.ServerRequest.id)
}

// optional .opentxs.proto.ServerRequestType type = 3;
inline bool ServerRequest::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ServerRequest::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ServerRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ServerRequest::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::opentxs::proto::ServerRequestType ServerRequest::type() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.ServerRequest.type)
  return static_cast< ::opentxs::proto::ServerRequestType >(type_);
}
inline void ServerRequest::set_type(::opentxs::proto::ServerRequestType value) {
  assert(::opentxs::proto::ServerRequestType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.ServerRequest.type)
}

// optional string nym = 4;
inline bool ServerRequest::has_nym() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerRequest::set_has_nym() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerRequest::clear_has_nym() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerRequest::clear_nym() {
  nym_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nym();
}
inline const ::std::string& ServerRequest::nym() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.ServerRequest.nym)
  return nym_.GetNoArena();
}
inline void ServerRequest::set_nym(const ::std::string& value) {
  set_has_nym();
  nym_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.ServerRequest.nym)
}
#if LANG_CXX11
inline void ServerRequest::set_nym(::std::string&& value) {
  set_has_nym();
  nym_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.ServerRequest.nym)
}
#endif
inline void ServerRequest::set_nym(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nym();
  nym_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.ServerRequest.nym)
}
inline void ServerRequest::set_nym(const char* value, size_t size) {
  set_has_nym();
  nym_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.ServerRequest.nym)
}
inline ::std::string* ServerRequest::mutable_nym() {
  set_has_nym();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.ServerRequest.nym)
  return nym_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerRequest::release_nym() {
  // @@protoc_insertion_point(field_release:opentxs.proto.ServerRequest.nym)
  clear_has_nym();
  return nym_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerRequest::set_allocated_nym(::std::string* nym) {
  if (nym != NULL) {
    set_has_nym();
  } else {
    clear_has_nym();
  }
  nym_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nym);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.ServerRequest.nym)
}

// optional string server = 5;
inline bool ServerRequest::has_server() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerRequest::set_has_server() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerRequest::clear_has_server() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerRequest::clear_server() {
  server_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server();
}
inline const ::std::string& ServerRequest::server() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.ServerRequest.server)
  return server_.GetNoArena();
}
inline void ServerRequest::set_server(const ::std::string& value) {
  set_has_server();
  server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.ServerRequest.server)
}
#if LANG_CXX11
inline void ServerRequest::set_server(::std::string&& value) {
  set_has_server();
  server_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.ServerRequest.server)
}
#endif
inline void ServerRequest::set_server(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_server();
  server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.ServerRequest.server)
}
inline void ServerRequest::set_server(const char* value, size_t size) {
  set_has_server();
  server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.ServerRequest.server)
}
inline ::std::string* ServerRequest::mutable_server() {
  set_has_server();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.ServerRequest.server)
  return server_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerRequest::release_server() {
  // @@protoc_insertion_point(field_release:opentxs.proto.ServerRequest.server)
  clear_has_server();
  return server_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerRequest::set_allocated_server(::std::string* server) {
  if (server != NULL) {
    set_has_server();
  } else {
    clear_has_server();
  }
  server_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.ServerRequest.server)
}

// optional uint64 request = 6;
inline bool ServerRequest::has_request() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ServerRequest::set_has_request() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ServerRequest::clear_has_request() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ServerRequest::clear_request() {
  request_ = GOOGLE_ULONGLONG(0);
  clear_has_request();
}
inline ::google::protobuf::uint64 ServerRequest::request() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.ServerRequest.request)
  return request_;
}
inline void ServerRequest::set_request(::google::protobuf::uint64 value) {
  set_has_request();
  request_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.ServerRequest.request)
}

// optional .opentxs.proto.CredentialIndex credentials = 14;
inline bool ServerRequest::has_credentials() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerRequest::set_has_credentials() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerRequest::clear_has_credentials() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::opentxs::proto::CredentialIndex& ServerRequest::credentials() const {
  const ::opentxs::proto::CredentialIndex* p = credentials_;
  // @@protoc_insertion_point(field_get:opentxs.proto.ServerRequest.credentials)
  return p != NULL ? *p : *reinterpret_cast<const ::opentxs::proto::CredentialIndex*>(
      &::opentxs::proto::_CredentialIndex_default_instance_);
}
inline ::opentxs::proto::CredentialIndex* ServerRequest::release_credentials() {
  // @@protoc_insertion_point(field_release:opentxs.proto.ServerRequest.credentials)
  clear_has_credentials();
  ::opentxs::proto::CredentialIndex* temp = credentials_;
  credentials_ = NULL;
  return temp;
}
inline ::opentxs::proto::CredentialIndex* ServerRequest::mutable_credentials() {
  set_has_credentials();
  if (credentials_ == NULL) {
    credentials_ = new ::opentxs::proto::CredentialIndex;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.proto.ServerRequest.credentials)
  return credentials_;
}
inline void ServerRequest::set_allocated_credentials(::opentxs::proto::CredentialIndex* credentials) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(credentials_);
  }
  if (credentials) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      credentials = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, credentials, submessage_arena);
    }
    set_has_credentials();
  } else {
    clear_has_credentials();
  }
  credentials_ = credentials;
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.ServerRequest.credentials)
}

// optional .opentxs.proto.Signature signature = 15;
inline bool ServerRequest::has_signature() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ServerRequest::set_has_signature() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ServerRequest::clear_has_signature() {
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::opentxs::proto::Signature& ServerRequest::signature() const {
  const ::opentxs::proto::Signature* p = signature_;
  // @@protoc_insertion_point(field_get:opentxs.proto.ServerRequest.signature)
  return p != NULL ? *p : *reinterpret_cast<const ::opentxs::proto::Signature*>(
      &::opentxs::proto::_Signature_default_instance_);
}
inline ::opentxs::proto::Signature* ServerRequest::release_signature() {
  // @@protoc_insertion_point(field_release:opentxs.proto.ServerRequest.signature)
  clear_has_signature();
  ::opentxs::proto::Signature* temp = signature_;
  signature_ = NULL;
  return temp;
}
inline ::opentxs::proto::Signature* ServerRequest::mutable_signature() {
  set_has_signature();
  if (signature_ == NULL) {
    signature_ = new ::opentxs::proto::Signature;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.proto.ServerRequest.signature)
  return signature_;
}
inline void ServerRequest::set_allocated_signature(::opentxs::proto::Signature* signature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(signature_);
  }
  if (signature) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      signature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, signature, submessage_arena);
    }
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_ = signature;
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.ServerRequest.signature)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace opentxs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ServerRequest_2eproto__INCLUDED
