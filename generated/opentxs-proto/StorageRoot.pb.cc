// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StorageRoot.proto

#include "StorageRoot.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace opentxs {
namespace proto {
class StorageRootDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StorageRoot>
      _instance;
} _StorageRoot_default_instance_;
}  // namespace proto
}  // namespace opentxs
namespace protobuf_StorageRoot_2eproto {
void InitDefaultsStorageRootImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::opentxs::proto::_StorageRoot_default_instance_;
    new (ptr) ::opentxs::proto::StorageRoot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opentxs::proto::StorageRoot::InitAsDefaultInstance();
}

void InitDefaultsStorageRoot() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStorageRootImpl);
}

}  // namespace protobuf_StorageRoot_2eproto
namespace opentxs {
namespace proto {

// ===================================================================

void StorageRoot::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StorageRoot::kVersionFieldNumber;
const int StorageRoot::kItemsFieldNumber;
const int StorageRoot::kAltLocationFieldNumber;
const int StorageRoot::kLastgcFieldNumber;
const int StorageRoot::kGcFieldNumber;
const int StorageRoot::kGcrootFieldNumber;
const int StorageRoot::kSequenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StorageRoot::StorageRoot()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_StorageRoot_2eproto::InitDefaultsStorageRoot();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:opentxs.proto.StorageRoot)
}
StorageRoot::StorageRoot(const StorageRoot& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  items_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_items()) {
    items_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.items_);
  }
  gcroot_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gcroot()) {
    gcroot_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gcroot_);
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&sequence_) -
    reinterpret_cast<char*>(&version_)) + sizeof(sequence_));
  // @@protoc_insertion_point(copy_constructor:opentxs.proto.StorageRoot)
}

void StorageRoot::SharedCtor() {
  _cached_size_ = 0;
  items_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gcroot_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_) -
      reinterpret_cast<char*>(&version_)) + sizeof(sequence_));
}

StorageRoot::~StorageRoot() {
  // @@protoc_insertion_point(destructor:opentxs.proto.StorageRoot)
  SharedDtor();
}

void StorageRoot::SharedDtor() {
  items_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gcroot_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StorageRoot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StorageRoot& StorageRoot::default_instance() {
  ::protobuf_StorageRoot_2eproto::InitDefaultsStorageRoot();
  return *internal_default_instance();
}

StorageRoot* StorageRoot::New(::google::protobuf::Arena* arena) const {
  StorageRoot* n = new StorageRoot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StorageRoot::Clear() {
// @@protoc_insertion_point(message_clear_start:opentxs.proto.StorageRoot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!items_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*items_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!gcroot_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*gcroot_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 124u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sequence_) -
        reinterpret_cast<char*>(&version_)) + sizeof(sequence_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StorageRoot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:opentxs.proto.StorageRoot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string items = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool altLocation = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_altlocation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &altlocation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 lastgc = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_lastgc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &lastgc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool gc = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_gc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string gcroot = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gcroot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sequence = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_sequence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opentxs.proto.StorageRoot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opentxs.proto.StorageRoot)
  return false;
#undef DO_
}

void StorageRoot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opentxs.proto.StorageRoot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional string items = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->items(), output);
  }

  // optional bool altLocation = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->altlocation(), output);
  }

  // optional sint64 lastgc = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(4, this->lastgc(), output);
  }

  // optional bool gc = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->gc(), output);
  }

  // optional string gcroot = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->gcroot(), output);
  }

  // optional int64 sequence = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->sequence(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:opentxs.proto.StorageRoot)
}

size_t StorageRoot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentxs.proto.StorageRoot)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 127u) {
    // optional string items = 2;
    if (has_items()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->items());
    }

    // optional string gcroot = 6;
    if (has_gcroot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gcroot());
    }

    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional bool altLocation = 3;
    if (has_altlocation()) {
      total_size += 1 + 1;
    }

    // optional bool gc = 5;
    if (has_gc()) {
      total_size += 1 + 1;
    }

    // optional sint64 lastgc = 4;
    if (has_lastgc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->lastgc());
    }

    // optional int64 sequence = 7;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sequence());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StorageRoot::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StorageRoot*>(&from));
}

void StorageRoot::MergeFrom(const StorageRoot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentxs.proto.StorageRoot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_items();
      items_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.items_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_gcroot();
      gcroot_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gcroot_);
    }
    if (cached_has_bits & 0x00000004u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000008u) {
      altlocation_ = from.altlocation_;
    }
    if (cached_has_bits & 0x00000010u) {
      gc_ = from.gc_;
    }
    if (cached_has_bits & 0x00000020u) {
      lastgc_ = from.lastgc_;
    }
    if (cached_has_bits & 0x00000040u) {
      sequence_ = from.sequence_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StorageRoot::CopyFrom(const StorageRoot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentxs.proto.StorageRoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageRoot::IsInitialized() const {
  return true;
}

void StorageRoot::Swap(StorageRoot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StorageRoot::InternalSwap(StorageRoot* other) {
  using std::swap;
  items_.Swap(&other->items_);
  gcroot_.Swap(&other->gcroot_);
  swap(version_, other->version_);
  swap(altlocation_, other->altlocation_);
  swap(gc_, other->gc_);
  swap(lastgc_, other->lastgc_);
  swap(sequence_, other->sequence_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string StorageRoot::GetTypeName() const {
  return "opentxs.proto.StorageRoot";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace opentxs

// @@protoc_insertion_point(global_scope)
