// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BlockchainActivity.proto

#ifndef PROTOBUF_BlockchainActivity_2eproto__INCLUDED
#define PROTOBUF_BlockchainActivity_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace protobuf_BlockchainActivity_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsBlockchainActivityImpl();
void InitDefaultsBlockchainActivity();
inline void InitDefaults() {
  InitDefaultsBlockchainActivity();
}
}  // namespace protobuf_BlockchainActivity_2eproto
namespace opentxs {
namespace proto {
class BlockchainActivity;
class BlockchainActivityDefaultTypeInternal;
extern BlockchainActivityDefaultTypeInternal _BlockchainActivity_default_instance_;
}  // namespace proto
}  // namespace opentxs
namespace opentxs {
namespace proto {

// ===================================================================

class BlockchainActivity : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:opentxs.proto.BlockchainActivity) */ {
 public:
  BlockchainActivity();
  virtual ~BlockchainActivity();

  BlockchainActivity(const BlockchainActivity& from);

  inline BlockchainActivity& operator=(const BlockchainActivity& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BlockchainActivity(BlockchainActivity&& from) noexcept
    : BlockchainActivity() {
    *this = ::std::move(from);
  }

  inline BlockchainActivity& operator=(BlockchainActivity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BlockchainActivity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockchainActivity* internal_default_instance() {
    return reinterpret_cast<const BlockchainActivity*>(
               &_BlockchainActivity_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(BlockchainActivity* other);
  friend void swap(BlockchainActivity& a, BlockchainActivity& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BlockchainActivity* New() const PROTOBUF_FINAL { return New(NULL); }

  BlockchainActivity* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const BlockchainActivity& from);
  void MergeFrom(const BlockchainActivity& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BlockchainActivity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string txid = 2;
  bool has_txid() const;
  void clear_txid();
  static const int kTxidFieldNumber = 2;
  const ::std::string& txid() const;
  void set_txid(const ::std::string& value);
  #if LANG_CXX11
  void set_txid(::std::string&& value);
  #endif
  void set_txid(const char* value);
  void set_txid(const char* value, size_t size);
  ::std::string* mutable_txid();
  ::std::string* release_txid();
  void set_allocated_txid(::std::string* txid);

  // optional string account = 5;
  bool has_account() const;
  void clear_account();
  static const int kAccountFieldNumber = 5;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // optional uint64 output = 3;
  bool has_output() const;
  void clear_output();
  static const int kOutputFieldNumber = 3;
  ::google::protobuf::uint64 output() const;
  void set_output(::google::protobuf::uint64 value);

  // optional uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // optional uint32 subchain = 6;
  bool has_subchain() const;
  void clear_subchain();
  static const int kSubchainFieldNumber = 6;
  ::google::protobuf::uint32 subchain() const;
  void set_subchain(::google::protobuf::uint32 value);

  // optional int64 amount = 4;
  bool has_amount() const;
  void clear_amount();
  static const int kAmountFieldNumber = 4;
  ::google::protobuf::int64 amount() const;
  void set_amount(::google::protobuf::int64 value);

  // optional uint32 index = 7;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 7;
  ::google::protobuf::uint32 index() const;
  void set_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:opentxs.proto.BlockchainActivity)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_txid();
  void clear_has_txid();
  void set_has_output();
  void clear_has_output();
  void set_has_amount();
  void clear_has_amount();
  void set_has_account();
  void clear_has_account();
  void set_has_subchain();
  void clear_has_subchain();
  void set_has_index();
  void clear_has_index();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr txid_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::uint64 output_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::uint32 subchain_;
  ::google::protobuf::int64 amount_;
  ::google::protobuf::uint32 index_;
  friend struct ::protobuf_BlockchainActivity_2eproto::TableStruct;
  friend void ::protobuf_BlockchainActivity_2eproto::InitDefaultsBlockchainActivityImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BlockchainActivity

// optional uint32 version = 1;
inline bool BlockchainActivity::has_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlockchainActivity::set_has_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BlockchainActivity::clear_has_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BlockchainActivity::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 BlockchainActivity::version() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.BlockchainActivity.version)
  return version_;
}
inline void BlockchainActivity::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.BlockchainActivity.version)
}

// optional string txid = 2;
inline bool BlockchainActivity::has_txid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockchainActivity::set_has_txid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlockchainActivity::clear_has_txid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlockchainActivity::clear_txid() {
  txid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_txid();
}
inline const ::std::string& BlockchainActivity::txid() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.BlockchainActivity.txid)
  return txid_.GetNoArena();
}
inline void BlockchainActivity::set_txid(const ::std::string& value) {
  set_has_txid();
  txid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.BlockchainActivity.txid)
}
#if LANG_CXX11
inline void BlockchainActivity::set_txid(::std::string&& value) {
  set_has_txid();
  txid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.BlockchainActivity.txid)
}
#endif
inline void BlockchainActivity::set_txid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_txid();
  txid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.BlockchainActivity.txid)
}
inline void BlockchainActivity::set_txid(const char* value, size_t size) {
  set_has_txid();
  txid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.BlockchainActivity.txid)
}
inline ::std::string* BlockchainActivity::mutable_txid() {
  set_has_txid();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.BlockchainActivity.txid)
  return txid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockchainActivity::release_txid() {
  // @@protoc_insertion_point(field_release:opentxs.proto.BlockchainActivity.txid)
  clear_has_txid();
  return txid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockchainActivity::set_allocated_txid(::std::string* txid) {
  if (txid != NULL) {
    set_has_txid();
  } else {
    clear_has_txid();
  }
  txid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txid);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.BlockchainActivity.txid)
}

// optional uint64 output = 3;
inline bool BlockchainActivity::has_output() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlockchainActivity::set_has_output() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlockchainActivity::clear_has_output() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlockchainActivity::clear_output() {
  output_ = GOOGLE_ULONGLONG(0);
  clear_has_output();
}
inline ::google::protobuf::uint64 BlockchainActivity::output() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.BlockchainActivity.output)
  return output_;
}
inline void BlockchainActivity::set_output(::google::protobuf::uint64 value) {
  set_has_output();
  output_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.BlockchainActivity.output)
}

// optional int64 amount = 4;
inline bool BlockchainActivity::has_amount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BlockchainActivity::set_has_amount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BlockchainActivity::clear_has_amount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BlockchainActivity::clear_amount() {
  amount_ = GOOGLE_LONGLONG(0);
  clear_has_amount();
}
inline ::google::protobuf::int64 BlockchainActivity::amount() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.BlockchainActivity.amount)
  return amount_;
}
inline void BlockchainActivity::set_amount(::google::protobuf::int64 value) {
  set_has_amount();
  amount_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.BlockchainActivity.amount)
}

// optional string account = 5;
inline bool BlockchainActivity::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlockchainActivity::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlockchainActivity::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlockchainActivity::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
inline const ::std::string& BlockchainActivity::account() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.BlockchainActivity.account)
  return account_.GetNoArena();
}
inline void BlockchainActivity::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.BlockchainActivity.account)
}
#if LANG_CXX11
inline void BlockchainActivity::set_account(::std::string&& value) {
  set_has_account();
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.BlockchainActivity.account)
}
#endif
inline void BlockchainActivity::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.BlockchainActivity.account)
}
inline void BlockchainActivity::set_account(const char* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.BlockchainActivity.account)
}
inline ::std::string* BlockchainActivity::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.BlockchainActivity.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockchainActivity::release_account() {
  // @@protoc_insertion_point(field_release:opentxs.proto.BlockchainActivity.account)
  clear_has_account();
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockchainActivity::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.BlockchainActivity.account)
}

// optional uint32 subchain = 6;
inline bool BlockchainActivity::has_subchain() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlockchainActivity::set_has_subchain() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BlockchainActivity::clear_has_subchain() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BlockchainActivity::clear_subchain() {
  subchain_ = 0u;
  clear_has_subchain();
}
inline ::google::protobuf::uint32 BlockchainActivity::subchain() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.BlockchainActivity.subchain)
  return subchain_;
}
inline void BlockchainActivity::set_subchain(::google::protobuf::uint32 value) {
  set_has_subchain();
  subchain_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.BlockchainActivity.subchain)
}

// optional uint32 index = 7;
inline bool BlockchainActivity::has_index() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BlockchainActivity::set_has_index() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BlockchainActivity::clear_has_index() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BlockchainActivity::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 BlockchainActivity::index() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.BlockchainActivity.index)
  return index_;
}
inline void BlockchainActivity::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.BlockchainActivity.index)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace opentxs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BlockchainActivity_2eproto__INCLUDED
