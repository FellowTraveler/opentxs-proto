// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StorageNym.proto

#include "StorageNym.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace opentxs {
namespace proto {
class StorageNymDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StorageNym>
      _instance;
} _StorageNym_default_instance_;
}  // namespace proto
}  // namespace opentxs
namespace protobuf_StorageNym_2eproto {
void InitDefaultsStorageNymImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_StorageItemHash_2eproto::InitDefaultsStorageItemHash();
  protobuf_StorageBlockchainAccountList_2eproto::InitDefaultsStorageBlockchainAccountList();
  protobuf_Bip44Account_2eproto::InitDefaultsBip44Account();
  protobuf_StoragePurse_2eproto::InitDefaultsStoragePurse();
  {
    void* ptr = &::opentxs::proto::_StorageNym_default_instance_;
    new (ptr) ::opentxs::proto::StorageNym();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opentxs::proto::StorageNym::InitAsDefaultInstance();
}

void InitDefaultsStorageNym() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStorageNymImpl);
}

}  // namespace protobuf_StorageNym_2eproto
namespace opentxs {
namespace proto {

// ===================================================================

void StorageNym::InitAsDefaultInstance() {
  ::opentxs::proto::_StorageNym_default_instance_._instance.get_mutable()->credlist_ = const_cast< ::opentxs::proto::StorageItemHash*>(
      ::opentxs::proto::StorageItemHash::internal_default_instance());
  ::opentxs::proto::_StorageNym_default_instance_._instance.get_mutable()->sentpeerrequests_ = const_cast< ::opentxs::proto::StorageItemHash*>(
      ::opentxs::proto::StorageItemHash::internal_default_instance());
  ::opentxs::proto::_StorageNym_default_instance_._instance.get_mutable()->incomingpeerrequests_ = const_cast< ::opentxs::proto::StorageItemHash*>(
      ::opentxs::proto::StorageItemHash::internal_default_instance());
  ::opentxs::proto::_StorageNym_default_instance_._instance.get_mutable()->sentpeerreply_ = const_cast< ::opentxs::proto::StorageItemHash*>(
      ::opentxs::proto::StorageItemHash::internal_default_instance());
  ::opentxs::proto::_StorageNym_default_instance_._instance.get_mutable()->incomingpeerreply_ = const_cast< ::opentxs::proto::StorageItemHash*>(
      ::opentxs::proto::StorageItemHash::internal_default_instance());
  ::opentxs::proto::_StorageNym_default_instance_._instance.get_mutable()->finishedpeerrequest_ = const_cast< ::opentxs::proto::StorageItemHash*>(
      ::opentxs::proto::StorageItemHash::internal_default_instance());
  ::opentxs::proto::_StorageNym_default_instance_._instance.get_mutable()->finishedpeerreply_ = const_cast< ::opentxs::proto::StorageItemHash*>(
      ::opentxs::proto::StorageItemHash::internal_default_instance());
  ::opentxs::proto::_StorageNym_default_instance_._instance.get_mutable()->processedpeerrequest_ = const_cast< ::opentxs::proto::StorageItemHash*>(
      ::opentxs::proto::StorageItemHash::internal_default_instance());
  ::opentxs::proto::_StorageNym_default_instance_._instance.get_mutable()->processedpeerreply_ = const_cast< ::opentxs::proto::StorageItemHash*>(
      ::opentxs::proto::StorageItemHash::internal_default_instance());
  ::opentxs::proto::_StorageNym_default_instance_._instance.get_mutable()->mailinbox_ = const_cast< ::opentxs::proto::StorageItemHash*>(
      ::opentxs::proto::StorageItemHash::internal_default_instance());
  ::opentxs::proto::_StorageNym_default_instance_._instance.get_mutable()->mailoutbox_ = const_cast< ::opentxs::proto::StorageItemHash*>(
      ::opentxs::proto::StorageItemHash::internal_default_instance());
  ::opentxs::proto::_StorageNym_default_instance_._instance.get_mutable()->threads_ = const_cast< ::opentxs::proto::StorageItemHash*>(
      ::opentxs::proto::StorageItemHash::internal_default_instance());
  ::opentxs::proto::_StorageNym_default_instance_._instance.get_mutable()->contexts_ = const_cast< ::opentxs::proto::StorageItemHash*>(
      ::opentxs::proto::StorageItemHash::internal_default_instance());
  ::opentxs::proto::_StorageNym_default_instance_._instance.get_mutable()->accounts_ = const_cast< ::opentxs::proto::StorageItemHash*>(
      ::opentxs::proto::StorageItemHash::internal_default_instance());
}
void StorageNym::clear_credlist() {
  if (credlist_ != NULL) credlist_->Clear();
  clear_has_credlist();
}
void StorageNym::clear_sentpeerrequests() {
  if (sentpeerrequests_ != NULL) sentpeerrequests_->Clear();
  clear_has_sentpeerrequests();
}
void StorageNym::clear_incomingpeerrequests() {
  if (incomingpeerrequests_ != NULL) incomingpeerrequests_->Clear();
  clear_has_incomingpeerrequests();
}
void StorageNym::clear_sentpeerreply() {
  if (sentpeerreply_ != NULL) sentpeerreply_->Clear();
  clear_has_sentpeerreply();
}
void StorageNym::clear_incomingpeerreply() {
  if (incomingpeerreply_ != NULL) incomingpeerreply_->Clear();
  clear_has_incomingpeerreply();
}
void StorageNym::clear_finishedpeerrequest() {
  if (finishedpeerrequest_ != NULL) finishedpeerrequest_->Clear();
  clear_has_finishedpeerrequest();
}
void StorageNym::clear_finishedpeerreply() {
  if (finishedpeerreply_ != NULL) finishedpeerreply_->Clear();
  clear_has_finishedpeerreply();
}
void StorageNym::clear_processedpeerrequest() {
  if (processedpeerrequest_ != NULL) processedpeerrequest_->Clear();
  clear_has_processedpeerrequest();
}
void StorageNym::clear_processedpeerreply() {
  if (processedpeerreply_ != NULL) processedpeerreply_->Clear();
  clear_has_processedpeerreply();
}
void StorageNym::clear_mailinbox() {
  if (mailinbox_ != NULL) mailinbox_->Clear();
  clear_has_mailinbox();
}
void StorageNym::clear_mailoutbox() {
  if (mailoutbox_ != NULL) mailoutbox_->Clear();
  clear_has_mailoutbox();
}
void StorageNym::clear_threads() {
  if (threads_ != NULL) threads_->Clear();
  clear_has_threads();
}
void StorageNym::clear_contexts() {
  if (contexts_ != NULL) contexts_->Clear();
  clear_has_contexts();
}
void StorageNym::clear_accounts() {
  if (accounts_ != NULL) accounts_->Clear();
  clear_has_accounts();
}
void StorageNym::clear_blockchainaccountindex() {
  blockchainaccountindex_.Clear();
}
void StorageNym::clear_blockchainaccount() {
  blockchainaccount_.Clear();
}
void StorageNym::clear_purse() {
  purse_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StorageNym::kVersionFieldNumber;
const int StorageNym::kNymidFieldNumber;
const int StorageNym::kCredListFieldNumber;
const int StorageNym::kSentPeerRequestsFieldNumber;
const int StorageNym::kIncomingPeerRequestsFieldNumber;
const int StorageNym::kSentPeerReplyFieldNumber;
const int StorageNym::kIncomingPeerReplyFieldNumber;
const int StorageNym::kFinishedPeerRequestFieldNumber;
const int StorageNym::kFinishedPeerReplyFieldNumber;
const int StorageNym::kProcessedPeerRequestFieldNumber;
const int StorageNym::kProcessedPeerReplyFieldNumber;
const int StorageNym::kMailInboxFieldNumber;
const int StorageNym::kMailOutboxFieldNumber;
const int StorageNym::kThreadsFieldNumber;
const int StorageNym::kContextsFieldNumber;
const int StorageNym::kAccountsFieldNumber;
const int StorageNym::kBlockchainAccountIndexFieldNumber;
const int StorageNym::kBlockchainAccountFieldNumber;
const int StorageNym::kIssuersFieldNumber;
const int StorageNym::kPaymentWorkflowFieldNumber;
const int StorageNym::kBip47FieldNumber;
const int StorageNym::kPurseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StorageNym::StorageNym()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_StorageNym_2eproto::InitDefaultsStorageNym();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:opentxs.proto.StorageNym)
}
StorageNym::StorageNym(const StorageNym& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      blockchainaccountindex_(from.blockchainaccountindex_),
      blockchainaccount_(from.blockchainaccount_),
      purse_(from.purse_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nymid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nymid()) {
    nymid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nymid_);
  }
  issuers_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_issuers()) {
    issuers_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.issuers_);
  }
  paymentworkflow_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_paymentworkflow()) {
    paymentworkflow_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.paymentworkflow_);
  }
  bip47_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bip47()) {
    bip47_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bip47_);
  }
  if (from.has_credlist()) {
    credlist_ = new ::opentxs::proto::StorageItemHash(*from.credlist_);
  } else {
    credlist_ = NULL;
  }
  if (from.has_sentpeerrequests()) {
    sentpeerrequests_ = new ::opentxs::proto::StorageItemHash(*from.sentpeerrequests_);
  } else {
    sentpeerrequests_ = NULL;
  }
  if (from.has_incomingpeerrequests()) {
    incomingpeerrequests_ = new ::opentxs::proto::StorageItemHash(*from.incomingpeerrequests_);
  } else {
    incomingpeerrequests_ = NULL;
  }
  if (from.has_sentpeerreply()) {
    sentpeerreply_ = new ::opentxs::proto::StorageItemHash(*from.sentpeerreply_);
  } else {
    sentpeerreply_ = NULL;
  }
  if (from.has_incomingpeerreply()) {
    incomingpeerreply_ = new ::opentxs::proto::StorageItemHash(*from.incomingpeerreply_);
  } else {
    incomingpeerreply_ = NULL;
  }
  if (from.has_finishedpeerrequest()) {
    finishedpeerrequest_ = new ::opentxs::proto::StorageItemHash(*from.finishedpeerrequest_);
  } else {
    finishedpeerrequest_ = NULL;
  }
  if (from.has_finishedpeerreply()) {
    finishedpeerreply_ = new ::opentxs::proto::StorageItemHash(*from.finishedpeerreply_);
  } else {
    finishedpeerreply_ = NULL;
  }
  if (from.has_processedpeerrequest()) {
    processedpeerrequest_ = new ::opentxs::proto::StorageItemHash(*from.processedpeerrequest_);
  } else {
    processedpeerrequest_ = NULL;
  }
  if (from.has_processedpeerreply()) {
    processedpeerreply_ = new ::opentxs::proto::StorageItemHash(*from.processedpeerreply_);
  } else {
    processedpeerreply_ = NULL;
  }
  if (from.has_mailinbox()) {
    mailinbox_ = new ::opentxs::proto::StorageItemHash(*from.mailinbox_);
  } else {
    mailinbox_ = NULL;
  }
  if (from.has_mailoutbox()) {
    mailoutbox_ = new ::opentxs::proto::StorageItemHash(*from.mailoutbox_);
  } else {
    mailoutbox_ = NULL;
  }
  if (from.has_threads()) {
    threads_ = new ::opentxs::proto::StorageItemHash(*from.threads_);
  } else {
    threads_ = NULL;
  }
  if (from.has_contexts()) {
    contexts_ = new ::opentxs::proto::StorageItemHash(*from.contexts_);
  } else {
    contexts_ = NULL;
  }
  if (from.has_accounts()) {
    accounts_ = new ::opentxs::proto::StorageItemHash(*from.accounts_);
  } else {
    accounts_ = NULL;
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:opentxs.proto.StorageNym)
}

void StorageNym::SharedCtor() {
  _cached_size_ = 0;
  nymid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  issuers_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  paymentworkflow_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bip47_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&credlist_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&credlist_)) + sizeof(version_));
}

StorageNym::~StorageNym() {
  // @@protoc_insertion_point(destructor:opentxs.proto.StorageNym)
  SharedDtor();
}

void StorageNym::SharedDtor() {
  nymid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  issuers_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  paymentworkflow_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bip47_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete credlist_;
  if (this != internal_default_instance()) delete sentpeerrequests_;
  if (this != internal_default_instance()) delete incomingpeerrequests_;
  if (this != internal_default_instance()) delete sentpeerreply_;
  if (this != internal_default_instance()) delete incomingpeerreply_;
  if (this != internal_default_instance()) delete finishedpeerrequest_;
  if (this != internal_default_instance()) delete finishedpeerreply_;
  if (this != internal_default_instance()) delete processedpeerrequest_;
  if (this != internal_default_instance()) delete processedpeerreply_;
  if (this != internal_default_instance()) delete mailinbox_;
  if (this != internal_default_instance()) delete mailoutbox_;
  if (this != internal_default_instance()) delete threads_;
  if (this != internal_default_instance()) delete contexts_;
  if (this != internal_default_instance()) delete accounts_;
}

void StorageNym::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StorageNym& StorageNym::default_instance() {
  ::protobuf_StorageNym_2eproto::InitDefaultsStorageNym();
  return *internal_default_instance();
}

StorageNym* StorageNym::New(::google::protobuf::Arena* arena) const {
  StorageNym* n = new StorageNym;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StorageNym::Clear() {
// @@protoc_insertion_point(message_clear_start:opentxs.proto.StorageNym)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blockchainaccountindex_.Clear();
  blockchainaccount_.Clear();
  purse_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!nymid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*nymid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!issuers_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*issuers_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!paymentworkflow_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*paymentworkflow_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!bip47_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bip47_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(credlist_ != NULL);
      credlist_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(sentpeerrequests_ != NULL);
      sentpeerrequests_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(incomingpeerrequests_ != NULL);
      incomingpeerrequests_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(sentpeerreply_ != NULL);
      sentpeerreply_->Clear();
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(incomingpeerreply_ != NULL);
      incomingpeerreply_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(finishedpeerrequest_ != NULL);
      finishedpeerrequest_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(finishedpeerreply_ != NULL);
      finishedpeerreply_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(processedpeerrequest_ != NULL);
      processedpeerrequest_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(processedpeerreply_ != NULL);
      processedpeerreply_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(mailinbox_ != NULL);
      mailinbox_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(mailoutbox_ != NULL);
      mailoutbox_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(threads_ != NULL);
      threads_->Clear();
    }
  }
  if (cached_has_bits & 196608u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(contexts_ != NULL);
      contexts_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(accounts_ != NULL);
      accounts_->Clear();
    }
  }
  version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StorageNym::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:opentxs.proto.StorageNym)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string nymid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nymid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.StorageItemHash credList = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_credlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.StorageItemHash SentPeerRequests = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sentpeerrequests()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.StorageItemHash IncomingPeerRequests = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_incomingpeerrequests()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.StorageItemHash SentPeerReply = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sentpeerreply()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.StorageItemHash IncomingPeerReply = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_incomingpeerreply()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.StorageItemHash FinishedPeerRequest = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_finishedpeerrequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.StorageItemHash FinishedPeerReply = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_finishedpeerreply()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.StorageItemHash ProcessedPeerRequest = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_processedpeerrequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.StorageItemHash ProcessedPeerReply = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_processedpeerreply()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.StorageItemHash MailInbox = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mailinbox()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.StorageItemHash MailOutbox = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mailoutbox()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.StorageItemHash Threads = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_threads()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.StorageItemHash Contexts = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_contexts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.StorageItemHash Accounts = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_accounts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .opentxs.proto.StorageBlockchainAccountList BlockchainAccountIndex = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_blockchainaccountindex()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .opentxs.proto.Bip44Account BlockchainAccount = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_blockchainaccount()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string issuers = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_issuers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string PaymentWorkflow = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_paymentworkflow()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string bip47 = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bip47()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .opentxs.proto.StoragePurse purse = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_purse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opentxs.proto.StorageNym)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opentxs.proto.StorageNym)
  return false;
#undef DO_
}

void StorageNym::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opentxs.proto.StorageNym)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional string nymid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nymid(), output);
  }

  // optional .opentxs.proto.StorageItemHash credList = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->credlist_, output);
  }

  // optional .opentxs.proto.StorageItemHash SentPeerRequests = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->sentpeerrequests_, output);
  }

  // optional .opentxs.proto.StorageItemHash IncomingPeerRequests = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->incomingpeerrequests_, output);
  }

  // optional .opentxs.proto.StorageItemHash SentPeerReply = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->sentpeerreply_, output);
  }

  // optional .opentxs.proto.StorageItemHash IncomingPeerReply = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, *this->incomingpeerreply_, output);
  }

  // optional .opentxs.proto.StorageItemHash FinishedPeerRequest = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, *this->finishedpeerrequest_, output);
  }

  // optional .opentxs.proto.StorageItemHash FinishedPeerReply = 9;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, *this->finishedpeerreply_, output);
  }

  // optional .opentxs.proto.StorageItemHash ProcessedPeerRequest = 10;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, *this->processedpeerrequest_, output);
  }

  // optional .opentxs.proto.StorageItemHash ProcessedPeerReply = 11;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, *this->processedpeerreply_, output);
  }

  // optional .opentxs.proto.StorageItemHash MailInbox = 12;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, *this->mailinbox_, output);
  }

  // optional .opentxs.proto.StorageItemHash MailOutbox = 13;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, *this->mailoutbox_, output);
  }

  // optional .opentxs.proto.StorageItemHash Threads = 14;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, *this->threads_, output);
  }

  // optional .opentxs.proto.StorageItemHash Contexts = 15;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, *this->contexts_, output);
  }

  // optional .opentxs.proto.StorageItemHash Accounts = 16;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      16, *this->accounts_, output);
  }

  // repeated .opentxs.proto.StorageBlockchainAccountList BlockchainAccountIndex = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->blockchainaccountindex_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17, this->blockchainaccountindex(static_cast<int>(i)), output);
  }

  // repeated .opentxs.proto.Bip44Account BlockchainAccount = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->blockchainaccount_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      18, this->blockchainaccount(static_cast<int>(i)), output);
  }

  // optional string issuers = 19;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->issuers(), output);
  }

  // optional string PaymentWorkflow = 20;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->paymentworkflow(), output);
  }

  // optional string bip47 = 21;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->bip47(), output);
  }

  // repeated .opentxs.proto.StoragePurse purse = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->purse_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      22, this->purse(static_cast<int>(i)), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:opentxs.proto.StorageNym)
}

size_t StorageNym::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentxs.proto.StorageNym)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated .opentxs.proto.StorageBlockchainAccountList BlockchainAccountIndex = 17;
  {
    unsigned int count = static_cast<unsigned int>(this->blockchainaccountindex_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->blockchainaccountindex(static_cast<int>(i)));
    }
  }

  // repeated .opentxs.proto.Bip44Account BlockchainAccount = 18;
  {
    unsigned int count = static_cast<unsigned int>(this->blockchainaccount_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->blockchainaccount(static_cast<int>(i)));
    }
  }

  // repeated .opentxs.proto.StoragePurse purse = 22;
  {
    unsigned int count = static_cast<unsigned int>(this->purse_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->purse(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string nymid = 2;
    if (has_nymid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nymid());
    }

    // optional string issuers = 19;
    if (has_issuers()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->issuers());
    }

    // optional string PaymentWorkflow = 20;
    if (has_paymentworkflow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->paymentworkflow());
    }

    // optional string bip47 = 21;
    if (has_bip47()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bip47());
    }

    // optional .opentxs.proto.StorageItemHash credList = 3;
    if (has_credlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->credlist_);
    }

    // optional .opentxs.proto.StorageItemHash SentPeerRequests = 4;
    if (has_sentpeerrequests()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->sentpeerrequests_);
    }

    // optional .opentxs.proto.StorageItemHash IncomingPeerRequests = 5;
    if (has_incomingpeerrequests()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->incomingpeerrequests_);
    }

    // optional .opentxs.proto.StorageItemHash SentPeerReply = 6;
    if (has_sentpeerreply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->sentpeerreply_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .opentxs.proto.StorageItemHash IncomingPeerReply = 7;
    if (has_incomingpeerreply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->incomingpeerreply_);
    }

    // optional .opentxs.proto.StorageItemHash FinishedPeerRequest = 8;
    if (has_finishedpeerrequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->finishedpeerrequest_);
    }

    // optional .opentxs.proto.StorageItemHash FinishedPeerReply = 9;
    if (has_finishedpeerreply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->finishedpeerreply_);
    }

    // optional .opentxs.proto.StorageItemHash ProcessedPeerRequest = 10;
    if (has_processedpeerrequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->processedpeerrequest_);
    }

    // optional .opentxs.proto.StorageItemHash ProcessedPeerReply = 11;
    if (has_processedpeerreply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->processedpeerreply_);
    }

    // optional .opentxs.proto.StorageItemHash MailInbox = 12;
    if (has_mailinbox()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->mailinbox_);
    }

    // optional .opentxs.proto.StorageItemHash MailOutbox = 13;
    if (has_mailoutbox()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->mailoutbox_);
    }

    // optional .opentxs.proto.StorageItemHash Threads = 14;
    if (has_threads()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->threads_);
    }

  }
  if (_has_bits_[16 / 32] & 458752u) {
    // optional .opentxs.proto.StorageItemHash Contexts = 15;
    if (has_contexts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->contexts_);
    }

    // optional .opentxs.proto.StorageItemHash Accounts = 16;
    if (has_accounts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->accounts_);
    }

    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StorageNym::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StorageNym*>(&from));
}

void StorageNym::MergeFrom(const StorageNym& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentxs.proto.StorageNym)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blockchainaccountindex_.MergeFrom(from.blockchainaccountindex_);
  blockchainaccount_.MergeFrom(from.blockchainaccount_);
  purse_.MergeFrom(from.purse_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_nymid();
      nymid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nymid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_issuers();
      issuers_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.issuers_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_paymentworkflow();
      paymentworkflow_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.paymentworkflow_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_bip47();
      bip47_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bip47_);
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_credlist()->::opentxs::proto::StorageItemHash::MergeFrom(from.credlist());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_sentpeerrequests()->::opentxs::proto::StorageItemHash::MergeFrom(from.sentpeerrequests());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_incomingpeerrequests()->::opentxs::proto::StorageItemHash::MergeFrom(from.incomingpeerrequests());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_sentpeerreply()->::opentxs::proto::StorageItemHash::MergeFrom(from.sentpeerreply());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_incomingpeerreply()->::opentxs::proto::StorageItemHash::MergeFrom(from.incomingpeerreply());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_finishedpeerrequest()->::opentxs::proto::StorageItemHash::MergeFrom(from.finishedpeerrequest());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_finishedpeerreply()->::opentxs::proto::StorageItemHash::MergeFrom(from.finishedpeerreply());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_processedpeerrequest()->::opentxs::proto::StorageItemHash::MergeFrom(from.processedpeerrequest());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_processedpeerreply()->::opentxs::proto::StorageItemHash::MergeFrom(from.processedpeerreply());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_mailinbox()->::opentxs::proto::StorageItemHash::MergeFrom(from.mailinbox());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_mailoutbox()->::opentxs::proto::StorageItemHash::MergeFrom(from.mailoutbox());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_threads()->::opentxs::proto::StorageItemHash::MergeFrom(from.threads());
    }
  }
  if (cached_has_bits & 458752u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_contexts()->::opentxs::proto::StorageItemHash::MergeFrom(from.contexts());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_accounts()->::opentxs::proto::StorageItemHash::MergeFrom(from.accounts());
    }
    if (cached_has_bits & 0x00040000u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StorageNym::CopyFrom(const StorageNym& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentxs.proto.StorageNym)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageNym::IsInitialized() const {
  return true;
}

void StorageNym::Swap(StorageNym* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StorageNym::InternalSwap(StorageNym* other) {
  using std::swap;
  blockchainaccountindex_.InternalSwap(&other->blockchainaccountindex_);
  blockchainaccount_.InternalSwap(&other->blockchainaccount_);
  purse_.InternalSwap(&other->purse_);
  nymid_.Swap(&other->nymid_);
  issuers_.Swap(&other->issuers_);
  paymentworkflow_.Swap(&other->paymentworkflow_);
  bip47_.Swap(&other->bip47_);
  swap(credlist_, other->credlist_);
  swap(sentpeerrequests_, other->sentpeerrequests_);
  swap(incomingpeerrequests_, other->incomingpeerrequests_);
  swap(sentpeerreply_, other->sentpeerreply_);
  swap(incomingpeerreply_, other->incomingpeerreply_);
  swap(finishedpeerrequest_, other->finishedpeerrequest_);
  swap(finishedpeerreply_, other->finishedpeerreply_);
  swap(processedpeerrequest_, other->processedpeerrequest_);
  swap(processedpeerreply_, other->processedpeerreply_);
  swap(mailinbox_, other->mailinbox_);
  swap(mailoutbox_, other->mailoutbox_);
  swap(threads_, other->threads_);
  swap(contexts_, other->contexts_);
  swap(accounts_, other->accounts_);
  swap(version_, other->version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string StorageNym::GetTypeName() const {
  return "opentxs.proto.StorageNym";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace opentxs

// @@protoc_insertion_point(global_scope)
