// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerContract.proto

#ifndef PROTOBUF_ServerContract_2eproto__INCLUDED
#define PROTOBUF_ServerContract_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "CredentialIndex.pb.h"  // IWYU pragma: export
#include "Enums.pb.h"  // IWYU pragma: export
#include "ListenAddress.pb.h"  // IWYU pragma: export
#include "Signature.pb.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace protobuf_ServerContract_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsServerContractImpl();
void InitDefaultsServerContract();
inline void InitDefaults() {
  InitDefaultsServerContract();
}
}  // namespace protobuf_ServerContract_2eproto
namespace opentxs {
namespace proto {
class ServerContract;
class ServerContractDefaultTypeInternal;
extern ServerContractDefaultTypeInternal _ServerContract_default_instance_;
}  // namespace proto
}  // namespace opentxs
namespace opentxs {
namespace proto {

// ===================================================================

class ServerContract : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:opentxs.proto.ServerContract) */ {
 public:
  ServerContract();
  virtual ~ServerContract();

  ServerContract(const ServerContract& from);

  inline ServerContract& operator=(const ServerContract& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerContract(ServerContract&& from) noexcept
    : ServerContract() {
    *this = ::std::move(from);
  }

  inline ServerContract& operator=(ServerContract&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ServerContract& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerContract* internal_default_instance() {
    return reinterpret_cast<const ServerContract*>(
               &_ServerContract_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ServerContract* other);
  friend void swap(ServerContract& a, ServerContract& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerContract* New() const PROTOBUF_FINAL { return New(NULL); }

  ServerContract* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const ServerContract& from);
  void MergeFrom(const ServerContract& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerContract* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .opentxs.proto.ListenAddress address = 6;
  int address_size() const;
  void clear_address();
  static const int kAddressFieldNumber = 6;
  const ::opentxs::proto::ListenAddress& address(int index) const;
  ::opentxs::proto::ListenAddress* mutable_address(int index);
  ::opentxs::proto::ListenAddress* add_address();
  ::google::protobuf::RepeatedPtrField< ::opentxs::proto::ListenAddress >*
      mutable_address();
  const ::google::protobuf::RepeatedPtrField< ::opentxs::proto::ListenAddress >&
      address() const;

  // optional string id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string nymid = 3;
  bool has_nymid() const;
  void clear_nymid();
  static const int kNymidFieldNumber = 3;
  const ::std::string& nymid() const;
  void set_nymid(const ::std::string& value);
  #if LANG_CXX11
  void set_nymid(::std::string&& value);
  #endif
  void set_nymid(const char* value);
  void set_nymid(const char* value, size_t size);
  ::std::string* mutable_nymid();
  ::std::string* release_nymid();
  void set_allocated_nymid(::std::string* nymid);

  // optional string name = 4;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string terms = 7;
  bool has_terms() const;
  void clear_terms();
  static const int kTermsFieldNumber = 7;
  const ::std::string& terms() const;
  void set_terms(const ::std::string& value);
  #if LANG_CXX11
  void set_terms(::std::string&& value);
  #endif
  void set_terms(const char* value);
  void set_terms(const char* value, size_t size);
  ::std::string* mutable_terms();
  ::std::string* release_terms();
  void set_allocated_terms(::std::string* terms);

  // optional bytes transportKey = 8;
  bool has_transportkey() const;
  void clear_transportkey();
  static const int kTransportKeyFieldNumber = 8;
  const ::std::string& transportkey() const;
  void set_transportkey(const ::std::string& value);
  #if LANG_CXX11
  void set_transportkey(::std::string&& value);
  #endif
  void set_transportkey(const char* value);
  void set_transportkey(const void* value, size_t size);
  ::std::string* mutable_transportkey();
  ::std::string* release_transportkey();
  void set_allocated_transportkey(::std::string* transportkey);

  // optional .opentxs.proto.CredentialIndex publicNym = 5;
  bool has_publicnym() const;
  void clear_publicnym();
  static const int kPublicNymFieldNumber = 5;
  const ::opentxs::proto::CredentialIndex& publicnym() const;
  ::opentxs::proto::CredentialIndex* release_publicnym();
  ::opentxs::proto::CredentialIndex* mutable_publicnym();
  void set_allocated_publicnym(::opentxs::proto::CredentialIndex* publicnym);

  // optional .opentxs.proto.Signature signature = 9;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 9;
  const ::opentxs::proto::Signature& signature() const;
  ::opentxs::proto::Signature* release_signature();
  ::opentxs::proto::Signature* mutable_signature();
  void set_allocated_signature(::opentxs::proto::Signature* signature);

  // optional uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:opentxs.proto.ServerContract)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_id();
  void clear_has_id();
  void set_has_nymid();
  void clear_has_nymid();
  void set_has_name();
  void clear_has_name();
  void set_has_publicnym();
  void clear_has_publicnym();
  void set_has_terms();
  void clear_has_terms();
  void set_has_transportkey();
  void clear_has_transportkey();
  void set_has_signature();
  void clear_has_signature();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::opentxs::proto::ListenAddress > address_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr nymid_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr terms_;
  ::google::protobuf::internal::ArenaStringPtr transportkey_;
  ::opentxs::proto::CredentialIndex* publicnym_;
  ::opentxs::proto::Signature* signature_;
  ::google::protobuf::uint32 version_;
  friend struct ::protobuf_ServerContract_2eproto::TableStruct;
  friend void ::protobuf_ServerContract_2eproto::InitDefaultsServerContractImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServerContract

// optional uint32 version = 1;
inline bool ServerContract::has_version() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ServerContract::set_has_version() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ServerContract::clear_has_version() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ServerContract::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 ServerContract::version() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.ServerContract.version)
  return version_;
}
inline void ServerContract::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:opentxs.proto.ServerContract.version)
}

// optional string id = 2;
inline bool ServerContract::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerContract::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerContract::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerContract::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& ServerContract::id() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.ServerContract.id)
  return id_.GetNoArena();
}
inline void ServerContract::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.ServerContract.id)
}
#if LANG_CXX11
inline void ServerContract::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.ServerContract.id)
}
#endif
inline void ServerContract::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.ServerContract.id)
}
inline void ServerContract::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.ServerContract.id)
}
inline ::std::string* ServerContract::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.ServerContract.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerContract::release_id() {
  // @@protoc_insertion_point(field_release:opentxs.proto.ServerContract.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerContract::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.ServerContract.id)
}

// optional string nymid = 3;
inline bool ServerContract::has_nymid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerContract::set_has_nymid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerContract::clear_has_nymid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerContract::clear_nymid() {
  nymid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nymid();
}
inline const ::std::string& ServerContract::nymid() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.ServerContract.nymid)
  return nymid_.GetNoArena();
}
inline void ServerContract::set_nymid(const ::std::string& value) {
  set_has_nymid();
  nymid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.ServerContract.nymid)
}
#if LANG_CXX11
inline void ServerContract::set_nymid(::std::string&& value) {
  set_has_nymid();
  nymid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.ServerContract.nymid)
}
#endif
inline void ServerContract::set_nymid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nymid();
  nymid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.ServerContract.nymid)
}
inline void ServerContract::set_nymid(const char* value, size_t size) {
  set_has_nymid();
  nymid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.ServerContract.nymid)
}
inline ::std::string* ServerContract::mutable_nymid() {
  set_has_nymid();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.ServerContract.nymid)
  return nymid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerContract::release_nymid() {
  // @@protoc_insertion_point(field_release:opentxs.proto.ServerContract.nymid)
  clear_has_nymid();
  return nymid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerContract::set_allocated_nymid(::std::string* nymid) {
  if (nymid != NULL) {
    set_has_nymid();
  } else {
    clear_has_nymid();
  }
  nymid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nymid);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.ServerContract.nymid)
}

// optional string name = 4;
inline bool ServerContract::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerContract::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerContract::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerContract::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ServerContract::name() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.ServerContract.name)
  return name_.GetNoArena();
}
inline void ServerContract::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.ServerContract.name)
}
#if LANG_CXX11
inline void ServerContract::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.ServerContract.name)
}
#endif
inline void ServerContract::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.ServerContract.name)
}
inline void ServerContract::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.ServerContract.name)
}
inline ::std::string* ServerContract::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.ServerContract.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerContract::release_name() {
  // @@protoc_insertion_point(field_release:opentxs.proto.ServerContract.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerContract::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.ServerContract.name)
}

// optional .opentxs.proto.CredentialIndex publicNym = 5;
inline bool ServerContract::has_publicnym() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ServerContract::set_has_publicnym() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ServerContract::clear_has_publicnym() {
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::opentxs::proto::CredentialIndex& ServerContract::publicnym() const {
  const ::opentxs::proto::CredentialIndex* p = publicnym_;
  // @@protoc_insertion_point(field_get:opentxs.proto.ServerContract.publicNym)
  return p != NULL ? *p : *reinterpret_cast<const ::opentxs::proto::CredentialIndex*>(
      &::opentxs::proto::_CredentialIndex_default_instance_);
}
inline ::opentxs::proto::CredentialIndex* ServerContract::release_publicnym() {
  // @@protoc_insertion_point(field_release:opentxs.proto.ServerContract.publicNym)
  clear_has_publicnym();
  ::opentxs::proto::CredentialIndex* temp = publicnym_;
  publicnym_ = NULL;
  return temp;
}
inline ::opentxs::proto::CredentialIndex* ServerContract::mutable_publicnym() {
  set_has_publicnym();
  if (publicnym_ == NULL) {
    publicnym_ = new ::opentxs::proto::CredentialIndex;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.proto.ServerContract.publicNym)
  return publicnym_;
}
inline void ServerContract::set_allocated_publicnym(::opentxs::proto::CredentialIndex* publicnym) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(publicnym_);
  }
  if (publicnym) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      publicnym = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, publicnym, submessage_arena);
    }
    set_has_publicnym();
  } else {
    clear_has_publicnym();
  }
  publicnym_ = publicnym;
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.ServerContract.publicNym)
}

// repeated .opentxs.proto.ListenAddress address = 6;
inline int ServerContract::address_size() const {
  return address_.size();
}
inline const ::opentxs::proto::ListenAddress& ServerContract::address(int index) const {
  // @@protoc_insertion_point(field_get:opentxs.proto.ServerContract.address)
  return address_.Get(index);
}
inline ::opentxs::proto::ListenAddress* ServerContract::mutable_address(int index) {
  // @@protoc_insertion_point(field_mutable:opentxs.proto.ServerContract.address)
  return address_.Mutable(index);
}
inline ::opentxs::proto::ListenAddress* ServerContract::add_address() {
  // @@protoc_insertion_point(field_add:opentxs.proto.ServerContract.address)
  return address_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::opentxs::proto::ListenAddress >*
ServerContract::mutable_address() {
  // @@protoc_insertion_point(field_mutable_list:opentxs.proto.ServerContract.address)
  return &address_;
}
inline const ::google::protobuf::RepeatedPtrField< ::opentxs::proto::ListenAddress >&
ServerContract::address() const {
  // @@protoc_insertion_point(field_list:opentxs.proto.ServerContract.address)
  return address_;
}

// optional string terms = 7;
inline bool ServerContract::has_terms() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerContract::set_has_terms() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerContract::clear_has_terms() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerContract::clear_terms() {
  terms_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_terms();
}
inline const ::std::string& ServerContract::terms() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.ServerContract.terms)
  return terms_.GetNoArena();
}
inline void ServerContract::set_terms(const ::std::string& value) {
  set_has_terms();
  terms_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.ServerContract.terms)
}
#if LANG_CXX11
inline void ServerContract::set_terms(::std::string&& value) {
  set_has_terms();
  terms_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.ServerContract.terms)
}
#endif
inline void ServerContract::set_terms(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_terms();
  terms_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.ServerContract.terms)
}
inline void ServerContract::set_terms(const char* value, size_t size) {
  set_has_terms();
  terms_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.ServerContract.terms)
}
inline ::std::string* ServerContract::mutable_terms() {
  set_has_terms();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.ServerContract.terms)
  return terms_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerContract::release_terms() {
  // @@protoc_insertion_point(field_release:opentxs.proto.ServerContract.terms)
  clear_has_terms();
  return terms_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerContract::set_allocated_terms(::std::string* terms) {
  if (terms != NULL) {
    set_has_terms();
  } else {
    clear_has_terms();
  }
  terms_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), terms);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.ServerContract.terms)
}

// optional bytes transportKey = 8;
inline bool ServerContract::has_transportkey() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ServerContract::set_has_transportkey() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ServerContract::clear_has_transportkey() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ServerContract::clear_transportkey() {
  transportkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_transportkey();
}
inline const ::std::string& ServerContract::transportkey() const {
  // @@protoc_insertion_point(field_get:opentxs.proto.ServerContract.transportKey)
  return transportkey_.GetNoArena();
}
inline void ServerContract::set_transportkey(const ::std::string& value) {
  set_has_transportkey();
  transportkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opentxs.proto.ServerContract.transportKey)
}
#if LANG_CXX11
inline void ServerContract::set_transportkey(::std::string&& value) {
  set_has_transportkey();
  transportkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opentxs.proto.ServerContract.transportKey)
}
#endif
inline void ServerContract::set_transportkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_transportkey();
  transportkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opentxs.proto.ServerContract.transportKey)
}
inline void ServerContract::set_transportkey(const void* value, size_t size) {
  set_has_transportkey();
  transportkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opentxs.proto.ServerContract.transportKey)
}
inline ::std::string* ServerContract::mutable_transportkey() {
  set_has_transportkey();
  // @@protoc_insertion_point(field_mutable:opentxs.proto.ServerContract.transportKey)
  return transportkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerContract::release_transportkey() {
  // @@protoc_insertion_point(field_release:opentxs.proto.ServerContract.transportKey)
  clear_has_transportkey();
  return transportkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerContract::set_allocated_transportkey(::std::string* transportkey) {
  if (transportkey != NULL) {
    set_has_transportkey();
  } else {
    clear_has_transportkey();
  }
  transportkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transportkey);
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.ServerContract.transportKey)
}

// optional .opentxs.proto.Signature signature = 9;
inline bool ServerContract::has_signature() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ServerContract::set_has_signature() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ServerContract::clear_has_signature() {
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::opentxs::proto::Signature& ServerContract::signature() const {
  const ::opentxs::proto::Signature* p = signature_;
  // @@protoc_insertion_point(field_get:opentxs.proto.ServerContract.signature)
  return p != NULL ? *p : *reinterpret_cast<const ::opentxs::proto::Signature*>(
      &::opentxs::proto::_Signature_default_instance_);
}
inline ::opentxs::proto::Signature* ServerContract::release_signature() {
  // @@protoc_insertion_point(field_release:opentxs.proto.ServerContract.signature)
  clear_has_signature();
  ::opentxs::proto::Signature* temp = signature_;
  signature_ = NULL;
  return temp;
}
inline ::opentxs::proto::Signature* ServerContract::mutable_signature() {
  set_has_signature();
  if (signature_ == NULL) {
    signature_ = new ::opentxs::proto::Signature;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.proto.ServerContract.signature)
  return signature_;
}
inline void ServerContract::set_allocated_signature(::opentxs::proto::Signature* signature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(signature_);
  }
  if (signature) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      signature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, signature, submessage_arena);
    }
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_ = signature;
  // @@protoc_insertion_point(field_set_allocated:opentxs.proto.ServerContract.signature)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace opentxs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ServerContract_2eproto__INCLUDED
