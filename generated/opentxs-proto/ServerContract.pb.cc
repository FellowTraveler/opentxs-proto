// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerContract.proto

#include "ServerContract.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace opentxs {
namespace proto {
class ServerContractDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServerContract>
      _instance;
} _ServerContract_default_instance_;
}  // namespace proto
}  // namespace opentxs
namespace protobuf_ServerContract_2eproto {
void InitDefaultsServerContractImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_CredentialIndex_2eproto::InitDefaultsCredentialIndex();
  protobuf_ListenAddress_2eproto::InitDefaultsListenAddress();
  protobuf_Signature_2eproto::InitDefaultsSignature();
  {
    void* ptr = &::opentxs::proto::_ServerContract_default_instance_;
    new (ptr) ::opentxs::proto::ServerContract();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::opentxs::proto::ServerContract::InitAsDefaultInstance();
}

void InitDefaultsServerContract() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsServerContractImpl);
}

}  // namespace protobuf_ServerContract_2eproto
namespace opentxs {
namespace proto {

// ===================================================================

void ServerContract::InitAsDefaultInstance() {
  ::opentxs::proto::_ServerContract_default_instance_._instance.get_mutable()->publicnym_ = const_cast< ::opentxs::proto::CredentialIndex*>(
      ::opentxs::proto::CredentialIndex::internal_default_instance());
  ::opentxs::proto::_ServerContract_default_instance_._instance.get_mutable()->signature_ = const_cast< ::opentxs::proto::Signature*>(
      ::opentxs::proto::Signature::internal_default_instance());
}
void ServerContract::clear_publicnym() {
  if (publicnym_ != NULL) publicnym_->Clear();
  clear_has_publicnym();
}
void ServerContract::clear_address() {
  address_.Clear();
}
void ServerContract::clear_signature() {
  if (signature_ != NULL) signature_->Clear();
  clear_has_signature();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerContract::kVersionFieldNumber;
const int ServerContract::kIdFieldNumber;
const int ServerContract::kNymidFieldNumber;
const int ServerContract::kNameFieldNumber;
const int ServerContract::kPublicNymFieldNumber;
const int ServerContract::kAddressFieldNumber;
const int ServerContract::kTermsFieldNumber;
const int ServerContract::kTransportKeyFieldNumber;
const int ServerContract::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerContract::ServerContract()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ServerContract_2eproto::InitDefaultsServerContract();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:opentxs.proto.ServerContract)
}
ServerContract::ServerContract(const ServerContract& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      address_(from.address_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  nymid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nymid()) {
    nymid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nymid_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  terms_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_terms()) {
    terms_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.terms_);
  }
  transportkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_transportkey()) {
    transportkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transportkey_);
  }
  if (from.has_publicnym()) {
    publicnym_ = new ::opentxs::proto::CredentialIndex(*from.publicnym_);
  } else {
    publicnym_ = NULL;
  }
  if (from.has_signature()) {
    signature_ = new ::opentxs::proto::Signature(*from.signature_);
  } else {
    signature_ = NULL;
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:opentxs.proto.ServerContract)
}

void ServerContract::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nymid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  terms_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transportkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&publicnym_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&publicnym_)) + sizeof(version_));
}

ServerContract::~ServerContract() {
  // @@protoc_insertion_point(destructor:opentxs.proto.ServerContract)
  SharedDtor();
}

void ServerContract::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nymid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  terms_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transportkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete publicnym_;
  if (this != internal_default_instance()) delete signature_;
}

void ServerContract::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServerContract& ServerContract::default_instance() {
  ::protobuf_ServerContract_2eproto::InitDefaultsServerContract();
  return *internal_default_instance();
}

ServerContract* ServerContract::New(::google::protobuf::Arena* arena) const {
  ServerContract* n = new ServerContract;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerContract::Clear() {
// @@protoc_insertion_point(message_clear_start:opentxs.proto.ServerContract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!nymid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*nymid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!terms_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*terms_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!transportkey_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*transportkey_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(publicnym_ != NULL);
      publicnym_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(signature_ != NULL);
      signature_->Clear();
    }
  }
  version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ServerContract::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:opentxs.proto.ServerContract)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string nymid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nymid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.CredentialIndex publicNym = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_publicnym()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .opentxs.proto.ListenAddress address = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string terms = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_terms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes transportKey = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_transportkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .opentxs.proto.Signature signature = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opentxs.proto.ServerContract)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opentxs.proto.ServerContract)
  return false;
#undef DO_
}

void ServerContract::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opentxs.proto.ServerContract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional string id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // optional string nymid = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->nymid(), output);
  }

  // optional string name = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // optional .opentxs.proto.CredentialIndex publicNym = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->publicnym_, output);
  }

  // repeated .opentxs.proto.ListenAddress address = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->address_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->address(static_cast<int>(i)), output);
  }

  // optional string terms = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->terms(), output);
  }

  // optional bytes transportKey = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->transportkey(), output);
  }

  // optional .opentxs.proto.Signature signature = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, *this->signature_, output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:opentxs.proto.ServerContract)
}

size_t ServerContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentxs.proto.ServerContract)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated .opentxs.proto.ListenAddress address = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->address_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->address(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string nymid = 3;
    if (has_nymid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nymid());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string terms = 7;
    if (has_terms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->terms());
    }

    // optional bytes transportKey = 8;
    if (has_transportkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->transportkey());
    }

    // optional .opentxs.proto.CredentialIndex publicNym = 5;
    if (has_publicnym()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->publicnym_);
    }

    // optional .opentxs.proto.Signature signature = 9;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->signature_);
    }

    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerContract::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ServerContract*>(&from));
}

void ServerContract::MergeFrom(const ServerContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentxs.proto.ServerContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  address_.MergeFrom(from.address_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_nymid();
      nymid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nymid_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_terms();
      terms_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.terms_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_transportkey();
      transportkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transportkey_);
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_publicnym()->::opentxs::proto::CredentialIndex::MergeFrom(from.publicnym());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_signature()->::opentxs::proto::Signature::MergeFrom(from.signature());
    }
    if (cached_has_bits & 0x00000080u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ServerContract::CopyFrom(const ServerContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentxs.proto.ServerContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerContract::IsInitialized() const {
  return true;
}

void ServerContract::Swap(ServerContract* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerContract::InternalSwap(ServerContract* other) {
  using std::swap;
  address_.InternalSwap(&other->address_);
  id_.Swap(&other->id_);
  nymid_.Swap(&other->nymid_);
  name_.Swap(&other->name_);
  terms_.Swap(&other->terms_);
  transportkey_.Swap(&other->transportkey_);
  swap(publicnym_, other->publicnym_);
  swap(signature_, other->signature_);
  swap(version_, other->version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string ServerContract::GetTypeName() const {
  return "opentxs.proto.ServerContract";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace opentxs

// @@protoc_insertion_point(global_scope)
