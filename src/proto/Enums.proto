syntax = "proto2";

package opentxs.proto;
option optimize_for = LITE_RUNTIME;

enum SignatureRole {
    option allow_alias = true;

    SIGROLE_ERROR = 0;
    SIGROLE_PUBCREDENTIAL = 1;
    SIGROLE_PRIVCREDENTIAL = 2;
    SIGROLE_NYMIDSOURCE = 3;
}

enum CredentialType {
    option allow_alias = true;

    CREDTYPE_ERROR = 0;
    CREDTYPE_LEGACY = 1;
    CREDTYPE_HD = 2;
}

enum CredentialRole {
    option allow_alias = true;

    CREDROLE_ERROR = 0;
    CREDROLE_MASTERKEY = 1;
    CREDROLE_CHILDKEY = 2;
}

enum AsymmetricKeyType {
    option allow_alias = true;

    AKEYTYPE_ERROR = 0;
    AKEYTYPE_NULL = 1;
    AKEYTYPE_LEGACY = 2;
    AKEYTYPE_SECP256K1 = 3;
}

enum KeyMode {
    option allow_alias = true;

    KEYMODE_ERROR = 0;
    KEYMODE_NULL = 1;
    KEYMODE_PUBLIC = 2;
    KEYMODE_PRIVATE = 3;
}

enum KeyRole {
    option allow_alias = true;

    KEYROLE_ERROR = 0;
    KEYROLE_AUTH = 1;
    KEYROLE_ENCRYPT = 2;
    KEYROLE_SIGN = 3;
}

enum SourceType {
    option allow_alias = true;

    SOURCETYPE_ERROR = 0;
    SOURCETYPE_SELF = 1;
    SOURCETYPE_PUBKEY = 2;
    SOURCETYPE_BIP47 = 3;
}

enum SourceProofType {
    option allow_alias = true;

    SOURCEPROOFTYPE_ERROR = 0;
    SOURCEPROOFTYPE_SELF_SIGNATURE = 1;
    SOURCEPROOFTYPE_SIGNATURE = 2;
}

enum HashType {
    option allow_alias = true;

    HASHTYPE_ERROR = 0;
    HASHTYPE_NONE = 1;
    HASHTYPE_BTC160 = 2;
    HASHTYPE_BTC256 = 3;
    HASHTYPE_SHA224 = 4;
    HASHTYPE_SHA256 = 5;
    HASHTYPE_SHA384 = 6;
    HASHTYPE_SHA512 = 7;
}
